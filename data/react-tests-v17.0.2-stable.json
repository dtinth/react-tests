{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":253,"numPassedTests":6836,"numPendingTestSuites":0,"numPendingTests":26,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":253,"numTotalTests":6862,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":81,"total":81,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1639318638810,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["createSubscription"],"failureMessages":[],"fullName":"createSubscription supports basic subscription pattern","location":{"column":3,"line":48},"status":"passed","title":"supports basic subscription pattern"},{"ancestorTitles":["createSubscription"],"failureMessages":[],"fullName":"createSubscription should support observable types like RxJS ReplaySubject","location":{"column":3,"line":80},"status":"passed","title":"should support observable types like RxJS ReplaySubject"},{"ancestorTitles":["createSubscription","Promises"],"failureMessages":[],"fullName":"createSubscription Promises should support Promises","location":{"column":5,"line":115},"status":"passed","title":"should support Promises"},{"ancestorTitles":["createSubscription","Promises"],"failureMessages":[],"fullName":"createSubscription Promises should still work if unsubscription is managed incorrectly","location":{"column":5,"line":162},"status":"passed","title":"should still work if unsubscription is managed incorrectly"},{"ancestorTitles":["createSubscription","Promises"],"failureMessages":[],"fullName":"createSubscription Promises should not call setState for a Promise that resolves after unmount","location":{"column":5,"line":196},"status":"passed","title":"should not call setState for a Promise that resolves after unmount"},{"ancestorTitles":["createSubscription"],"failureMessages":[],"fullName":"createSubscription should unsubscribe from old subscribables and subscribe to new subscribables when props change","location":{"column":3,"line":232},"status":"passed","title":"should unsubscribe from old subscribables and subscribe to new subscribables when props change"},{"ancestorTitles":["createSubscription"],"failureMessages":[],"fullName":"createSubscription should ignore values emitted by a new subscribable until the commit phase","location":{"column":3,"line":271},"status":"passed","title":"should ignore values emitted by a new subscribable until the commit phase"},{"ancestorTitles":["createSubscription"],"failureMessages":[],"fullName":"createSubscription should not drop values emitted between updates","location":{"column":3,"line":358},"status":"passed","title":"should not drop values emitted between updates"},{"ancestorTitles":["createSubscription","warnings"],"failureMessages":[],"fullName":"createSubscription warnings should warn for invalid missing getCurrentValue","location":{"column":5,"line":451},"status":"passed","title":"should warn for invalid missing getCurrentValue"},{"ancestorTitles":["createSubscription","warnings"],"failureMessages":[],"fullName":"createSubscription warnings should warn for invalid missing subscribe","location":{"column":5,"line":464},"status":"passed","title":"should warn for invalid missing subscribe"},{"ancestorTitles":["createSubscription","warnings"],"failureMessages":[],"fullName":"createSubscription warnings should warn if subscribe does not return an unsubscribe method","location":{"column":5,"line":477},"status":"passed","title":"should warn if subscribe does not return an unsubscribe method"}],"endTime":1639318646381,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/create-subscription/src/__tests__/createSubscription-test.js","startTime":1639318639419,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn for controlled value of 0 with missing onChange","location":{"column":3,"line":53},"status":"passed","title":"should warn for controlled value of 0 with missing onChange"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn for controlled value of \"\" with missing onChange","location":{"column":3,"line":61},"status":"passed","title":"should warn for controlled value of \"\" with missing onChange"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn for controlled value of \"0\" with missing onChange","location":{"column":3,"line":69},"status":"passed","title":"should warn for controlled value of \"0\" with missing onChange"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn for controlled value of false with missing onChange","location":{"column":3,"line":77},"status":"passed","title":"should warn for controlled value of false with missing onChange"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn with checked and no onChange handler with readOnly specified","location":{"column":3,"line":85},"status":"passed","title":"should warn with checked and no onChange handler with readOnly specified"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not warn about missing onChange in uncontrolled inputs","location":{"column":3,"line":104},"status":"passed","title":"should not warn about missing onChange in uncontrolled inputs"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not warn with value and onInput handler","location":{"column":3,"line":118},"status":"passed","title":"should not warn with value and onInput handler"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly control a value even if no event listener exists","location":{"column":3,"line":122},"status":"passed","title":"should properly control a value even if no event listener exists"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should control a value in reentrant events","location":{"column":3,"line":140},"status":"passed","title":"should control a value in reentrant events"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should control values in reentrant events with different targets","location":{"column":3,"line":192},"status":"passed","title":"should control values in reentrant events with different targets"},{"ancestorTitles":["ReactDOMInput","switching text inputs between numeric and string numbers"],"failureMessages":[],"fullName":"ReactDOMInput switching text inputs between numeric and string numbers does change the number 2 to \"2.0\" with no change handler","location":{"column":5,"line":236},"status":"passed","title":"does change the number 2 to \"2.0\" with no change handler"},{"ancestorTitles":["ReactDOMInput","switching text inputs between numeric and string numbers"],"failureMessages":[],"fullName":"ReactDOMInput switching text inputs between numeric and string numbers does change the string \"2\" to \"2.0\" with no change handler","location":{"column":5,"line":251},"status":"passed","title":"does change the string \"2\" to \"2.0\" with no change handler"},{"ancestorTitles":["ReactDOMInput","switching text inputs between numeric and string numbers"],"failureMessages":[],"fullName":"ReactDOMInput switching text inputs between numeric and string numbers changes the number 2 to \"2.0\" using a change handler","location":{"column":5,"line":266},"status":"passed","title":"changes the number 2 to \"2.0\" using a change handler"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput does change the string \".98\" to \"0.98\" with no change handler","location":{"column":3,"line":296},"status":"passed","title":"does change the string \".98\" to \"0.98\" with no change handler"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput performs a state change from \"\" to 0","location":{"column":3,"line":319},"status":"passed","title":"performs a state change from \"\" to 0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput updates the value on radio buttons from \"\" to 0","location":{"column":3,"line":336},"status":"passed","title":"updates the value on radio buttons from \"\" to 0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput updates the value on checkboxes from \"\" to 0","location":{"column":3,"line":349},"status":"passed","title":"updates the value on checkboxes from \"\" to 0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput distinguishes precision for extra zeroes in string number values","location":{"column":3,"line":362},"status":"passed","title":"distinguishes precision for extra zeroes in string number values"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should display `defaultValue` of number 0","location":{"column":3,"line":386},"status":"passed","title":"should display `defaultValue` of number 0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput only assigns defaultValue if it changes","location":{"column":3,"line":394},"status":"passed","title":"only assigns defaultValue if it changes"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should display \"true\" for `defaultValue` of `true`","location":{"column":3,"line":418},"status":"passed","title":"should display \"true\" for `defaultValue` of `true`"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should display \"false\" for `defaultValue` of `false`","location":{"column":3,"line":425},"status":"passed","title":"should display \"false\" for `defaultValue` of `false`"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should update `defaultValue` for uncontrolled input","location":{"column":3,"line":432},"status":"passed","title":"should update `defaultValue` for uncontrolled input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should update `defaultValue` for uncontrolled date/time input","location":{"column":3,"line":452},"status":"passed","title":"should update `defaultValue` for uncontrolled date/time input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should take `defaultValue` when changing to uncontrolled input","location":{"column":3,"line":474},"status":"passed","title":"should take `defaultValue` when changing to uncontrolled input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should render defaultValue for SSR","location":{"column":3,"line":488},"status":"passed","title":"should render defaultValue for SSR"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should render value for SSR","location":{"column":3,"line":498},"status":"passed","title":"should render value for SSR"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should render name attribute if it is supplied","location":{"column":3,"line":507},"status":"passed","title":"should render name attribute if it is supplied"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should render name attribute if it is supplied for SSR","location":{"column":3,"line":513},"status":"passed","title":"should render name attribute if it is supplied for SSR"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not render name attribute if it is not supplied","location":{"column":3,"line":521},"status":"passed","title":"should not render name attribute if it is not supplied"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not render name attribute if it is not supplied for SSR","location":{"column":3,"line":526},"status":"passed","title":"should not render name attribute if it is not supplied for SSR"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should display \"foobar\" for `defaultValue` of `objToString`","location":{"column":3,"line":534},"status":"passed","title":"should display \"foobar\" for `defaultValue` of `objToString`"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should display `value` of number 0","location":{"column":3,"line":547},"status":"passed","title":"should display `value` of number 0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should allow setting `value` to `true`","location":{"column":3,"line":554},"status":"passed","title":"should allow setting `value` to `true`"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should allow setting `value` to `false`","location":{"column":3,"line":567},"status":"passed","title":"should allow setting `value` to `false`"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should allow setting `value` to `objToString`","location":{"column":3,"line":580},"status":"passed","title":"should allow setting `value` to `objToString`"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not incur unnecessary DOM mutations","location":{"column":3,"line":598},"status":"passed","title":"should not incur unnecessary DOM mutations"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not incur unnecessary DOM mutations for numeric type conversion","location":{"column":3,"line":620},"status":"passed","title":"should not incur unnecessary DOM mutations for numeric type conversion"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not incur unnecessary DOM mutations for the boolean type conversion","location":{"column":3,"line":639},"status":"passed","title":"should not incur unnecessary DOM mutations for the boolean type conversion"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly control a value of number `0`","location":{"column":3,"line":658},"status":"passed","title":"should properly control a value of number `0`"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly control 0.0 for a text input","location":{"column":3,"line":667},"status":"passed","title":"should properly control 0.0 for a text input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly control 0.0 for a number input","location":{"column":3,"line":676},"status":"passed","title":"should properly control 0.0 for a number input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly transition from an empty value to 0","location":{"column":3,"line":695},"status":"passed","title":"should properly transition from an empty value to 0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly transition from 0 to an empty value","location":{"column":3,"line":715},"status":"passed","title":"should properly transition from 0 to an empty value"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly transition a text input from 0 to an empty 0.0","location":{"column":3,"line":731},"status":"passed","title":"should properly transition a text input from 0 to an empty 0.0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly transition a number input from \"\" to 0","location":{"column":3,"line":751},"status":"passed","title":"should properly transition a number input from \"\" to 0"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should properly transition a number input from \"\" to \"0\"","location":{"column":3,"line":771},"status":"passed","title":"should properly transition a number input from \"\" to \"0\""},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should have the correct target value","location":{"column":3,"line":791},"status":"passed","title":"should have the correct target value"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should restore uncontrolled inputs to last defaultValue upon reset","location":{"column":3,"line":807},"status":"passed","title":"should restore uncontrolled inputs to last defaultValue upon reset"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not set a value for submit buttons unnecessarily","location":{"column":3,"line":838},"status":"passed","title":"should not set a value for submit buttons unnecessarily"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should remove the value attribute on submit inputs when value is updated to undefined","location":{"column":3,"line":850},"status":"passed","title":"should remove the value attribute on submit inputs when value is updated to undefined"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should remove the value attribute on reset inputs when value is updated to undefined","location":{"column":3,"line":869},"status":"passed","title":"should remove the value attribute on reset inputs when value is updated to undefined"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should set a value on a submit input","location":{"column":3,"line":888},"status":"passed","title":"should set a value on a submit input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not set an undefined value on a submit input","location":{"column":3,"line":896},"status":"passed","title":"should not set an undefined value on a submit input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not set an undefined value on a reset input","location":{"column":3,"line":909},"status":"passed","title":"should not set an undefined value on a reset input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not set a null value on a submit input","location":{"column":3,"line":922},"status":"passed","title":"should not set a null value on a submit input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not set a null value on a reset input","location":{"column":3,"line":937},"status":"passed","title":"should not set a null value on a reset input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should set a value on a reset input","location":{"column":3,"line":952},"status":"passed","title":"should set a value on a reset input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should set an empty string value on a submit input","location":{"column":3,"line":960},"status":"passed","title":"should set an empty string value on a submit input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should set an empty string value on a reset input","location":{"column":3,"line":968},"status":"passed","title":"should set an empty string value on a reset input"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should control radio buttons","location":{"column":3,"line":976},"status":"passed","title":"should control radio buttons"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should check the correct radio when the selected name moves","location":{"column":3,"line":1048},"status":"passed","title":"should check the correct radio when the selected name moves"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should control radio buttons if the tree updates during render","location":{"column":3,"line":1087},"status":"passed","title":"should control radio buttons if the tree updates during render"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn with value and no onChange handler and readOnly specified","location":{"column":3,"line":1161},"status":"passed","title":"should warn with value and no onChange handler and readOnly specified"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should have a this value of undefined if bind is not used","location":{"column":3,"line":1182},"status":"passed","title":"should have a this value of undefined if bind is not used"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should update defaultValue to empty string","location":{"column":3,"line":1195},"status":"passed","title":"should update defaultValue to empty string"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if value is null","location":{"column":3,"line":1201},"status":"passed","title":"should warn if value is null"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if checked and defaultChecked props are specified","location":{"column":3,"line":1214},"status":"passed","title":"should warn if checked and defaultChecked props are specified"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if value and defaultValue props are specified","location":{"column":3,"line":1246},"status":"passed","title":"should warn if value and defaultValue props are specified"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled input switches to uncontrolled (value is undefined)","location":{"column":3,"line":1268},"status":"passed","title":"should warn if controlled input switches to uncontrolled (value is undefined)"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled input switches to uncontrolled (value is null)","location":{"column":3,"line":1283},"status":"passed","title":"should warn if controlled input switches to uncontrolled (value is null)"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled input switches to uncontrolled with defaultValue","location":{"column":3,"line":1302},"status":"passed","title":"should warn if controlled input switches to uncontrolled with defaultValue"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if uncontrolled input (value is undefined) switches to controlled","location":{"column":3,"line":1322},"status":"passed","title":"should warn if uncontrolled input (value is undefined) switches to controlled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if uncontrolled input (value is null) switches to controlled","location":{"column":3,"line":1337},"status":"passed","title":"should warn if uncontrolled input (value is null) switches to controlled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled checkbox switches to uncontrolled (checked is undefined)","location":{"column":3,"line":1355},"status":"passed","title":"should warn if controlled checkbox switches to uncontrolled (checked is undefined)"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled checkbox switches to uncontrolled (checked is null)","location":{"column":3,"line":1372},"status":"passed","title":"should warn if controlled checkbox switches to uncontrolled (checked is null)"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled checkbox switches to uncontrolled with defaultChecked","location":{"column":3,"line":1389},"status":"passed","title":"should warn if controlled checkbox switches to uncontrolled with defaultChecked"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if uncontrolled checkbox (checked is undefined) switches to controlled","location":{"column":3,"line":1409},"status":"passed","title":"should warn if uncontrolled checkbox (checked is undefined) switches to controlled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if uncontrolled checkbox (checked is null) switches to controlled","location":{"column":3,"line":1424},"status":"passed","title":"should warn if uncontrolled checkbox (checked is null) switches to controlled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled radio switches to uncontrolled (checked is undefined)","location":{"column":3,"line":1439},"status":"passed","title":"should warn if controlled radio switches to uncontrolled (checked is undefined)"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled radio switches to uncontrolled (checked is null)","location":{"column":3,"line":1452},"status":"passed","title":"should warn if controlled radio switches to uncontrolled (checked is null)"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if controlled radio switches to uncontrolled with defaultChecked","location":{"column":3,"line":1467},"status":"passed","title":"should warn if controlled radio switches to uncontrolled with defaultChecked"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if uncontrolled radio (checked is undefined) switches to controlled","location":{"column":3,"line":1482},"status":"passed","title":"should warn if uncontrolled radio (checked is undefined) switches to controlled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if uncontrolled radio (checked is null) switches to controlled","location":{"column":3,"line":1497},"status":"passed","title":"should warn if uncontrolled radio (checked is null) switches to controlled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not warn if radio value changes but never becomes controlled","location":{"column":3,"line":1512},"status":"passed","title":"should not warn if radio value changes but never becomes controlled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should not warn if radio value changes but never becomes uncontrolled","location":{"column":3,"line":1526},"status":"passed","title":"should not warn if radio value changes but never becomes uncontrolled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput should warn if radio checked false changes to become uncontrolled","location":{"column":3,"line":1543},"status":"passed","title":"should warn if radio checked false changes to become uncontrolled"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput sets type, step, min, max before value always","location":{"column":3,"line":1565},"status":"passed","title":"sets type, step, min, max before value always"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput sets value properly with type coming later in props","location":{"column":3,"line":1610},"status":"passed","title":"sets value properly with type coming later in props"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput does not raise a validation warning when it switches types","location":{"column":3,"line":1615},"status":"passed","title":"does not raise a validation warning when it switches types"},{"ancestorTitles":["ReactDOMInput"],"failureMessages":[],"fullName":"ReactDOMInput resets value of date/time input to fix bugs in iOS Safari","location":{"column":3,"line":1634},"status":"passed","title":"resets value of date/time input to fix bugs in iOS Safari"},{"ancestorTitles":["ReactDOMInput","assigning the value attribute on controlled inputs"],"failureMessages":[],"fullName":"ReactDOMInput assigning the value attribute on controlled inputs always sets the attribute when values change on text inputs","location":{"column":5,"line":1724},"status":"passed","title":"always sets the attribute when values change on text inputs"},{"ancestorTitles":["ReactDOMInput","assigning the value attribute on controlled inputs"],"failureMessages":[],"fullName":"ReactDOMInput assigning the value attribute on controlled inputs does not set the value attribute on number inputs if focused","location":{"column":5,"line":1739},"status":"passed","title":"does not set the value attribute on number inputs if focused"},{"ancestorTitles":["ReactDOMInput","assigning the value attribute on controlled inputs"],"failureMessages":[],"fullName":"ReactDOMInput assigning the value attribute on controlled inputs sets the value attribute on number inputs on blur","location":{"column":5,"line":1759},"status":"passed","title":"sets the value attribute on number inputs on blur"},{"ancestorTitles":["ReactDOMInput","assigning the value attribute on controlled inputs"],"failureMessages":[],"fullName":"ReactDOMInput assigning the value attribute on controlled inputs an uncontrolled number input will not update the value attribute on blur","location":{"column":5,"line":1787},"status":"passed","title":"an uncontrolled number input will not update the value attribute on blur"},{"ancestorTitles":["ReactDOMInput","assigning the value attribute on controlled inputs"],"failureMessages":[],"fullName":"ReactDOMInput assigning the value attribute on controlled inputs an uncontrolled text input will not update the value attribute on blur","location":{"column":5,"line":1807},"status":"passed","title":"an uncontrolled text input will not update the value attribute on blur"},{"ancestorTitles":["ReactDOMInput","setting a controlled input to undefined"],"failureMessages":[],"fullName":"ReactDOMInput setting a controlled input to undefined reverts the value attribute to the initial value","location":{"column":5,"line":1856},"status":"passed","title":"reverts the value attribute to the initial value"},{"ancestorTitles":["ReactDOMInput","setting a controlled input to undefined"],"failureMessages":[],"fullName":"ReactDOMInput setting a controlled input to undefined preserves the value property","location":{"column":5,"line":1867},"status":"passed","title":"preserves the value property"},{"ancestorTitles":["ReactDOMInput","setting a controlled input to null"],"failureMessages":[],"fullName":"ReactDOMInput setting a controlled input to null reverts the value attribute to the initial value","location":{"column":5,"line":1903},"status":"passed","title":"reverts the value attribute to the initial value"},{"ancestorTitles":["ReactDOMInput","setting a controlled input to null"],"failureMessages":[],"fullName":"ReactDOMInput setting a controlled input to null preserves the value property","location":{"column":5,"line":1917},"status":"passed","title":"preserves the value property"},{"ancestorTitles":["ReactDOMInput","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMInput When given a Symbol value treats initial Symbol value as an empty string","location":{"column":5,"line":1929},"status":"passed","title":"treats initial Symbol value as an empty string"},{"ancestorTitles":["ReactDOMInput","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMInput When given a Symbol value treats updated Symbol value as an empty string","location":{"column":5,"line":1946},"status":"passed","title":"treats updated Symbol value as an empty string"},{"ancestorTitles":["ReactDOMInput","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMInput When given a Symbol value treats initial Symbol defaultValue as an empty string","location":{"column":5,"line":1964},"status":"passed","title":"treats initial Symbol defaultValue as an empty string"},{"ancestorTitles":["ReactDOMInput","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMInput When given a Symbol value treats updated Symbol defaultValue as an empty string","location":{"column":5,"line":1973},"status":"passed","title":"treats updated Symbol defaultValue as an empty string"},{"ancestorTitles":["ReactDOMInput","When given a function value"],"failureMessages":[],"fullName":"ReactDOMInput When given a function value treats initial function value as an empty string","location":{"column":5,"line":1989},"status":"passed","title":"treats initial function value as an empty string"},{"ancestorTitles":["ReactDOMInput","When given a function value"],"failureMessages":[],"fullName":"ReactDOMInput When given a function value treats updated function value as an empty string","location":{"column":5,"line":2006},"status":"passed","title":"treats updated function value as an empty string"},{"ancestorTitles":["ReactDOMInput","When given a function value"],"failureMessages":[],"fullName":"ReactDOMInput When given a function value treats initial function defaultValue as an empty string","location":{"column":5,"line":2024},"status":"passed","title":"treats initial function defaultValue as an empty string"},{"ancestorTitles":["ReactDOMInput","When given a function value"],"failureMessages":[],"fullName":"ReactDOMInput When given a function value treats updated function defaultValue as an empty string","location":{"column":5,"line":2033},"status":"passed","title":"treats updated function defaultValue as an empty string"},{"ancestorTitles":["ReactDOMInput","checked inputs without a value property"],"failureMessages":[],"fullName":"ReactDOMInput checked inputs without a value property does not add \"on\" in absence of value on a checkbox","location":{"column":5,"line":2054},"status":"passed","title":"does not add \"on\" in absence of value on a checkbox"},{"ancestorTitles":["ReactDOMInput","checked inputs without a value property"],"failureMessages":[],"fullName":"ReactDOMInput checked inputs without a value property does not add \"on\" in absence of value on a radio","location":{"column":5,"line":2065},"status":"passed","title":"does not add \"on\" in absence of value on a radio"}],"endTime":1639318659945,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMInput-test.js","startTime":1639318646458,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactDOMSuspensePlaceholder hides and unhides timed out DOM elements","location":{"column":3,"line":74},"status":"passed","title":"hides and unhides timed out DOM elements"},{"ancestorTitles":["ReactDOMSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactDOMSuspensePlaceholder hides and unhides timed out text nodes","location":{"column":3,"line":110},"status":"passed","title":"hides and unhides timed out text nodes"},{"ancestorTitles":["ReactDOMSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactDOMSuspensePlaceholder outside concurrent mode, re-hides children if their display is updated but the boundary is still showing the fallback","location":{"column":3,"line":130},"status":"passed","title":"outside concurrent mode, re-hides children if their display is updated but the boundary is still showing the fallback"},{"ancestorTitles":["ReactDOMSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactDOMSuspensePlaceholder can call findDOMNode() in a suspended component commit phase","location":{"column":3,"line":183},"status":"passed","title":"can call findDOMNode() in a suspended component commit phase"},{"ancestorTitles":["ReactDOMSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactDOMSuspensePlaceholder can call findDOMNode() in a suspended component commit phase (#2)","location":{"column":3,"line":243},"status":"passed","title":"can call findDOMNode() in a suspended component commit phase (#2)"}],"endTime":1639318660878,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMSuspensePlaceholder-test.js","startTime":1639318660022,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should batch state when updating state twice","location":{"column":3,"line":41},"status":"passed","title":"should batch state when updating state twice"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should batch state when updating two different state keys","location":{"column":3,"line":70},"status":"passed","title":"should batch state when updating two different state keys"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should batch state and props together","location":{"column":3,"line":106},"status":"passed","title":"should batch state and props together"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should batch parent/child state updates together","location":{"column":3,"line":143},"status":"passed","title":"should batch parent/child state updates together"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should batch child/parent state updates together","location":{"column":3,"line":196},"status":"passed","title":"should batch child/parent state updates together"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should support chained state updates","location":{"column":3,"line":251},"status":"passed","title":"should support chained state updates"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should batch forceUpdate together","location":{"column":3,"line":290},"status":"passed","title":"should batch forceUpdate together"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should update children even if parent blocks updates","location":{"column":3,"line":332},"status":"passed","title":"should update children even if parent blocks updates"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should not reconcile children passed via props","location":{"column":3,"line":378},"status":"passed","title":"should not reconcile children passed via props"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should flow updates correctly","location":{"column":3,"line":415},"status":"passed","title":"should flow updates correctly"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should queue mount-ready handlers across different roots","location":{"column":3,"line":535},"status":"passed","title":"should queue mount-ready handlers across different roots"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should flush updates in the correct order","location":{"column":3,"line":584},"status":"passed","title":"should flush updates in the correct order"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should flush updates in the correct order across roots","location":{"column":3,"line":665},"status":"passed","title":"should flush updates in the correct order across roots"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should queue nested updates","location":{"column":3,"line":703},"status":"passed","title":"should queue nested updates"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should queue updates from during mount","location":{"column":3,"line":756},"status":"passed","title":"should queue updates from during mount"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates calls componentWillReceiveProps setState callback properly","location":{"column":3,"line":795},"status":"passed","title":"calls componentWillReceiveProps setState callback properly"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not call render after a component as been deleted","location":{"column":3,"line":821},"status":"passed","title":"does not call render after a component as been deleted"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates throws in setState if the update callback is not a function","location":{"column":3,"line":858},"status":"passed","title":"throws in setState if the update callback is not a function"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates throws in forceUpdate if the update callback is not a function","location":{"column":3,"line":901},"status":"passed","title":"throws in forceUpdate if the update callback is not a function"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not update one component twice in a batch (#2410)","location":{"column":3,"line":944},"status":"passed","title":"does not update one component twice in a batch (#2410)"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not update one component twice in a batch (#6371)","location":{"column":3,"line":994},"status":"passed","title":"does not update one component twice in a batch (#6371)"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates unstable_batchedUpdates should return value from a callback","location":{"column":3,"line":1044},"status":"passed","title":"unstable_batchedUpdates should return value from a callback"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates unmounts and remounts a root in the same batch","location":{"column":3,"line":1051},"status":"passed","title":"unmounts and remounts a root in the same batch"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates handles reentrant mounting in synchronous mode","location":{"column":3,"line":1061},"status":"passed","title":"handles reentrant mounting in synchronous mode"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates mounts and unmounts are sync even in a batch","location":{"column":3,"line":1098},"status":"passed","title":"mounts and unmounts are sync even in a batch"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates in legacy mode, updates in componentWillUpdate and componentDidUpdate should both flush in the immediately subsequent commit","location":{"column":3,"line":1110},"status":"passed","title":"in legacy mode, updates in componentWillUpdate and componentDidUpdate should both flush in the immediately subsequent commit"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates in legacy mode, updates in componentWillUpdate and componentDidUpdate (on a sibling) should both flush in the immediately subsequent commit","location":{"column":3,"line":1153},"status":"passed","title":"in legacy mode, updates in componentWillUpdate and componentDidUpdate (on a sibling) should both flush in the immediately subsequent commit"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates uses correct base state for setState inside render phase","location":{"column":3,"line":1224},"status":"passed","title":"uses correct base state for setState inside render phase"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not re-render if state update is null","location":{"column":3,"line":1247},"status":"passed","title":"does not re-render if state update is null"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates synchronously renders hidden subtrees","location":{"column":3,"line":1267},"status":"passed","title":"synchronously renders hidden subtrees"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates [GATED, SHOULD FAIL] delays sync updates inside hidden subtrees in Concurrent Mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] delays sync updates inside hidden subtrees in Concurrent Mode"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates can render ridiculously large number of roots without triggering infinite update loop error","location":{"column":3,"line":1360},"status":"passed","title":"can render ridiculously large number of roots without triggering infinite update loop error"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates resets the update counter for unrelated updates","location":{"column":3,"line":1384},"status":"passed","title":"resets the update counter for unrelated updates"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not fall into an infinite update loop","location":{"column":3,"line":1424},"status":"passed","title":"does not fall into an infinite update loop"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not fall into an infinite update loop with useLayoutEffect","location":{"column":3,"line":1449},"status":"passed","title":"does not fall into an infinite update loop with useLayoutEffect"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates can recover after falling into an infinite update loop","location":{"column":3,"line":1464},"status":"passed","title":"can recover after falling into an infinite update loop"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not fall into mutually recursive infinite update loop with same container","location":{"column":3,"line":1504},"status":"passed","title":"does not fall into mutually recursive infinite update loop with same container"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates does not fall into an infinite error loop","location":{"column":3,"line":1531},"status":"passed","title":"does not fall into an infinite error loop"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates can schedule ridiculously many updates within the same batch without triggering a maximum update error","location":{"column":3,"line":1564},"status":"passed","title":"can schedule ridiculously many updates within the same batch without triggering a maximum update error"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates warns about a deferred infinite update loop with useEffect","location":{"column":5,"line":1598},"status":"passed","title":"warns about a deferred infinite update loop with useEffect"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates can have nested updates if they do not cross the limit","location":{"column":5,"line":1639},"status":"passed","title":"can have nested updates if they do not cross the limit"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates can have many updates inside useEffect without triggering a warning","location":{"column":5,"line":1666},"status":"passed","title":"can have many updates inside useEffect without triggering a warning"},{"ancestorTitles":["ReactUpdates"],"failureMessages":[],"fullName":"ReactUpdates should properly trace interactions within batched updates","location":{"column":5,"line":1689},"status":"passed","title":"should properly trace interactions within batched updates"}],"endTime":1639318665473,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactUpdates-test.js","startTime":1639318660955,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a blank div with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a blank div with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a blank div with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a blank div with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a blank div with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a blank div with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a blank div with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a blank div with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a blank div with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a blank div with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a self-closing tag with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a self-closing tag with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a self-closing tag with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a self-closing tag with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a self-closing tag with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag as a child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a self-closing tag as a child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag as a child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a self-closing tag as a child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag as a child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a self-closing tag as a child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag as a child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a self-closing tag as a child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a self-closing tag as a child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a self-closing tag as a child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a string with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a string with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a string with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a string with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a string with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a string with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a string with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a string with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a string with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a string with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a number with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a number with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a number with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a number with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a number with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a number with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a number with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a number with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a number with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a number with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with one child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an array with one child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with one child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an array with one child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with one child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an array with one child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with one child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an array with one child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with one child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an array with one child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with several children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an array with several children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with several children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an array with several children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with several children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an array with several children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with several children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an array with several children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an array with several children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an array with several children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a nested array with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a nested array with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a nested array with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a nested array with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a nested array with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a nested array with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a nested array with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a nested array with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders a nested array with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a nested array with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an iterable with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an iterable with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an iterable with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an iterable with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an iterable with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an iterable with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an iterable with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an iterable with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders an iterable with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an iterable with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders emptyish values with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders emptyish values with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders emptyish values with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders emptyish values with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders emptyish values with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders emptyish values with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders emptyish values with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders emptyish values with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","basic rendering"],"failureMessages":[],"fullName":"ReactDOMServerIntegration basic rendering renders emptyish values with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders emptyish values with client render on top of bad server markup"}],"endTime":1639318669914,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationBasic-test.js","startTime":1639318665541,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should have locally attached media events","location":{"column":3,"line":30},"status":"passed","title":"Simulate should have locally attached media events"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils gives Jest mocks a passthrough implementation with mockComponent()","location":{"column":3,"line":34},"status":"passed","title":"gives Jest mocks a passthrough implementation with mockComponent()"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils can scryRenderedComponentsWithType","location":{"column":3,"line":61},"status":"passed","title":"can scryRenderedComponentsWithType"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils can scryRenderedDOMComponentsWithClass with TextComponent","location":{"column":3,"line":84},"status":"passed","title":"can scryRenderedDOMComponentsWithClass with TextComponent"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils can scryRenderedDOMComponentsWithClass with className contains \\n","location":{"column":3,"line":103},"status":"passed","title":"can scryRenderedDOMComponentsWithClass with className contains \\n"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils can scryRenderedDOMComponentsWithClass with multiple classes","location":{"column":3,"line":122},"status":"passed","title":"can scryRenderedDOMComponentsWithClass with multiple classes"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils traverses children in the correct order","location":{"column":3,"line":168},"status":"passed","title":"traverses children in the correct order"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils should support injected wrapper components as DOM components","location":{"column":3,"line":202},"status":"passed","title":"should support injected wrapper components as DOM components"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils can scry with stateless components involved","location":{"column":3,"line":249},"status":"passed","title":"can scry with stateless components involved"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils provides a clear error when passing invalid objects to scry","location":{"column":3,"line":272},"status":"passed","title":"provides a clear error when passing invalid objects to scry"},{"ancestorTitles":["ReactTestUtils","Simulate"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should change the value of an input field","location":{"column":5,"line":329},"status":"passed","title":"should change the value of an input field"},{"ancestorTitles":["ReactTestUtils","Simulate"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should change the value of an input field in a component","location":{"column":5,"line":350},"status":"passed","title":"should change the value of an input field in a component"},{"ancestorTitles":["ReactTestUtils","Simulate"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should throw when attempting to use a React element","location":{"column":5,"line":386},"status":"passed","title":"should throw when attempting to use a React element"},{"ancestorTitles":["ReactTestUtils","Simulate"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should throw when attempting to use a component instance","location":{"column":5,"line":407},"status":"passed","title":"should throw when attempting to use a component instance"},{"ancestorTitles":["ReactTestUtils","Simulate"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should not warn when used with extra properties","location":{"column":5,"line":428},"status":"passed","title":"should not warn when used with extra properties"},{"ancestorTitles":["ReactTestUtils","Simulate"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should set the type of the event","location":{"column":5,"line":448},"status":"passed","title":"should set the type of the event"},{"ancestorTitles":["ReactTestUtils","Simulate"],"failureMessages":[],"fullName":"ReactTestUtils Simulate should work with renderIntoDocument","location":{"column":5,"line":465},"status":"passed","title":"should work with renderIntoDocument"},{"ancestorTitles":["ReactTestUtils"],"failureMessages":[],"fullName":"ReactTestUtils should call setState callback with no arguments","location":{"column":3,"line":492},"status":"passed","title":"should call setState callback with no arguments"}],"endTime":1639318670361,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactTestUtils-test.js","startTime":1639318669990,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and an onChange with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a textarea with a value and an onChange with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and an onChange with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a textarea with a value and an onChange with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and an onChange with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a textarea with a value and an onChange with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and an onChange with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a textarea with a value and an onChange with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and an onChange with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a textarea with a value and an onChange with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a textarea with a value and readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a textarea with a value and readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a textarea with a value and readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a textarea with a value and readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a textarea with a value and readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and no onChange/readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a textarea with a value and no onChange/readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and no onChange/readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a textarea with a value and no onChange/readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and no onChange/readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a textarea with a value and no onChange/readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and no onChange/readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a textarea with a value and no onChange/readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a value and no onChange/readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a textarea with a value and no onChange/readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a defaultValue with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a textarea with a defaultValue with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a defaultValue with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a textarea with a defaultValue with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a defaultValue with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a textarea with a defaultValue with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a defaultValue with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a textarea with a defaultValue with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea with a defaultValue with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a textarea with a defaultValue with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a textarea value overriding defaultValue with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a textarea value overriding defaultValue with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a textarea value overriding defaultValue with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a textarea value overriding defaultValue with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a textarea value overriding defaultValue with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue no matter the prop order with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a textarea value overriding defaultValue no matter the prop order with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue no matter the prop order with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a textarea value overriding defaultValue no matter the prop order with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue no matter the prop order with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a textarea value overriding defaultValue no matter the prop order with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue no matter the prop order with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a textarea value overriding defaultValue no matter the prop order with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationTextarea"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationTextarea renders a textarea value overriding defaultValue no matter the prop order with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a textarea value overriding defaultValue no matter the prop order with client render on top of bad server markup"}],"endTime":1639318672752,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationTextarea-test.js","startTime":1639318670420,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should support setting state","location":{"column":3,"line":124},"status":"passed","title":"should support setting state"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should call componentDidUpdate of children first","location":{"column":3,"line":218},"status":"passed","title":"should call componentDidUpdate of children first"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should batch unmounts","location":{"column":3,"line":285},"status":"passed","title":"should batch unmounts"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should update state when called from child cWRP","location":{"column":3,"line":313},"status":"passed","title":"should update state when called from child cWRP"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should merge state when sCU returns false","location":{"column":3,"line":353},"status":"passed","title":"should merge state when sCU returns false"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should treat assigning to this.state inside cWRP as a replaceState, with a warning","location":{"column":3,"line":380},"status":"passed","title":"should treat assigning to this.state inside cWRP as a replaceState, with a warning"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should treat assigning to this.state inside cWM as a replaceState, with a warning","location":{"column":3,"line":423},"status":"passed","title":"should treat assigning to this.state inside cWM as a replaceState, with a warning"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should support stateful module pattern components","location":{"column":5,"line":461},"status":"passed","title":"should support stateful module pattern components"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should support getDerivedStateFromProps for module pattern components","location":{"column":5,"line":485},"status":"passed","title":"should support getDerivedStateFromProps for module pattern components"},{"ancestorTitles":["ReactCompositeComponent-state"],"failureMessages":[],"fullName":"ReactCompositeComponent-state should support setState in componentWillUnmount","location":{"column":3,"line":514},"status":"passed","title":"should support setState in componentWillUnmount"}],"endTime":1639318673254,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactCompositeComponentState-test.js","startTime":1639318672829,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow setting `defaultValue`","location":{"column":3,"line":28},"status":"passed","title":"should allow setting `defaultValue`"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should not throw with `defaultValue` and without children","location":{"column":3,"line":50},"status":"passed","title":"should not throw with `defaultValue` and without children"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should not control when using `defaultValue`","location":{"column":3,"line":58},"status":"passed","title":"should not control when using `defaultValue`"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow setting `defaultValue` with multiple","location":{"column":3,"line":77},"status":"passed","title":"should allow setting `defaultValue` with multiple"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow setting `value`","location":{"column":3,"line":106},"status":"passed","title":"should allow setting `value`"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should default to the first non-disabled option","location":{"column":3,"line":130},"status":"passed","title":"should default to the first non-disabled option"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow setting `value` to __proto__","location":{"column":3,"line":145},"status":"passed","title":"should allow setting `value` to __proto__"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should not throw with `value` and without children","location":{"column":3,"line":169},"status":"passed","title":"should not throw with `value` and without children"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow setting `value` with multiple","location":{"column":3,"line":177},"status":"passed","title":"should allow setting `value` with multiple"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow setting `value` to __proto__ with multiple","location":{"column":3,"line":206},"status":"passed","title":"should allow setting `value` to __proto__ with multiple"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should not select other options automatically","location":{"column":3,"line":235},"status":"passed","title":"should not select other options automatically"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should reset child options selected when they are changed and `value` is set","location":{"column":3,"line":250},"status":"passed","title":"should reset child options selected when they are changed and `value` is set"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow setting `value` with `objectToString`","location":{"column":3,"line":269},"status":"passed","title":"should allow setting `value` with `objectToString`"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow switching to multiple","location":{"column":3,"line":308},"status":"passed","title":"should allow switching to multiple"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow switching from multiple","location":{"column":3,"line":337},"status":"passed","title":"should allow switching from multiple"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect does not select an item when size is initially set to greater than 1","location":{"column":3,"line":365},"status":"passed","title":"does not select an item when size is initially set to greater than 1"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should remember value when switching to uncontrolled","location":{"column":3,"line":384},"status":"passed","title":"should remember value when switching to uncontrolled"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should remember updated value when switching to uncontrolled","location":{"column":3,"line":407},"status":"passed","title":"should remember updated value when switching to uncontrolled"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should support server-side rendering","location":{"column":3,"line":437},"status":"passed","title":"should support server-side rendering"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should support server-side rendering with defaultValue","location":{"column":3,"line":451},"status":"passed","title":"should support server-side rendering with defaultValue"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should support server-side rendering with dangerouslySetInnerHTML","location":{"column":3,"line":465},"status":"passed","title":"should support server-side rendering with dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should support server-side rendering with multiple","location":{"column":3,"line":496},"status":"passed","title":"should support server-side rendering with multiple"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should not control defaultValue if re-adding options","location":{"column":3,"line":510},"status":"passed","title":"should not control defaultValue if re-adding options"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should support options with dynamic children","location":{"column":3,"line":567},"status":"passed","title":"should support options with dynamic children"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should warn if value is null","location":{"column":3,"line":599},"status":"passed","title":"should warn if value is null"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should warn if selected is set on <option>","location":{"column":3,"line":619},"status":"passed","title":"should warn if selected is set on <option>"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should warn if value is null and multiple is true","location":{"column":3,"line":637},"status":"passed","title":"should warn if value is null and multiple is true"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should refresh state on change","location":{"column":3,"line":658},"status":"passed","title":"should refresh state on change"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should warn if value and defaultValue props are specified","location":{"column":3,"line":682},"status":"passed","title":"should warn if value and defaultValue props are specified"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should not warn about missing onChange in uncontrolled textareas","location":{"column":3,"line":708},"status":"passed","title":"should not warn about missing onChange in uncontrolled textareas"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should be able to safely remove select onChange","location":{"column":3,"line":715},"status":"passed","title":"should be able to safely remove select onChange"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should select grandchild options nested inside an optgroup","location":{"column":3,"line":733},"status":"passed","title":"should select grandchild options nested inside an optgroup"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should allow controlling `value` in a nested render","location":{"column":3,"line":751},"status":"passed","title":"should allow controlling `value` in a nested render"},{"ancestorTitles":["ReactDOMSelect"],"failureMessages":[],"fullName":"ReactDOMSelect should not select first option by default when multiple is set and no defaultValue is set","location":{"column":3,"line":815},"status":"passed","title":"should not select first option by default when multiple is set and no defaultValue is set"},{"ancestorTitles":["ReactDOMSelect","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a Symbol value treats initial Symbol value as an empty string","location":{"column":5,"line":832},"status":"passed","title":"treats initial Symbol value as an empty string"},{"ancestorTitles":["ReactDOMSelect","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a Symbol value treats updated Symbol value as an empty string","location":{"column":5,"line":848},"status":"passed","title":"treats updated Symbol value as an empty string"},{"ancestorTitles":["ReactDOMSelect","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a Symbol value treats initial Symbol defaultValue as an empty string","location":{"column":5,"line":874},"status":"passed","title":"treats initial Symbol defaultValue as an empty string"},{"ancestorTitles":["ReactDOMSelect","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a Symbol value treats updated Symbol defaultValue as an empty string","location":{"column":5,"line":890},"status":"passed","title":"treats updated Symbol defaultValue as an empty string"},{"ancestorTitles":["ReactDOMSelect","When given a function value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a function value treats initial function value as an empty string","location":{"column":5,"line":918},"status":"passed","title":"treats initial function value as an empty string"},{"ancestorTitles":["ReactDOMSelect","When given a function value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a function value treats initial function defaultValue as an empty string","location":{"column":5,"line":934},"status":"passed","title":"treats initial function defaultValue as an empty string"},{"ancestorTitles":["ReactDOMSelect","When given a function value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a function value treats updated function value as an empty string","location":{"column":5,"line":950},"status":"passed","title":"treats updated function value as an empty string"},{"ancestorTitles":["ReactDOMSelect","When given a function value"],"failureMessages":[],"fullName":"ReactDOMSelect When given a function value treats updated function defaultValue as an empty string","location":{"column":5,"line":976},"status":"passed","title":"treats updated function defaultValue as an empty string"}],"endTime":1639318676349,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMSelect-test.js","startTime":1639318673314,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with an onChange with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a checkbox that is checked with an onChange with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with an onChange with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a checkbox that is checked with an onChange with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with an onChange with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a checkbox that is checked with an onChange with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with an onChange with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a checkbox that is checked with an onChange with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with an onChange with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a checkbox that is checked with an onChange with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a checkbox that is checked with readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a checkbox that is checked with readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a checkbox that is checked with readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a checkbox that is checked with readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked with readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a checkbox that is checked with readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked and no onChange/readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a checkbox that is checked and no onChange/readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked and no onChange/readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a checkbox that is checked and no onChange/readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked and no onChange/readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a checkbox that is checked and no onChange/readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked and no onChange/readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a checkbox that is checked and no onChange/readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox that is checked and no onChange/readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a checkbox that is checked and no onChange/readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox with defaultChecked with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a checkbox with defaultChecked with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox with defaultChecked with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a checkbox with defaultChecked with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox with defaultChecked with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a checkbox with defaultChecked with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox with defaultChecked with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a checkbox with defaultChecked with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox with defaultChecked with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a checkbox with defaultChecked with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a checkbox checked overriding defaultChecked with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a checkbox checked overriding defaultChecked with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a checkbox checked overriding defaultChecked with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a checkbox checked overriding defaultChecked with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a checkbox checked overriding defaultChecked with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked no matter the prop order with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a checkbox checked overriding defaultChecked no matter the prop order with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked no matter the prop order with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a checkbox checked overriding defaultChecked no matter the prop order with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked no matter the prop order with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a checkbox checked overriding defaultChecked no matter the prop order with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked no matter the prop order with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a checkbox checked overriding defaultChecked no matter the prop order with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationCheckbox"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationCheckbox renders a checkbox checked overriding defaultChecked no matter the prop order with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a checkbox checked overriding defaultChecked no matter the prop order with client render on top of bad server markup"}],"endTime":1639318678872,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationCheckbox-test.js","startTime":1639318676416,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"does not warn when rendering in legacy mode","location":{"column":1,"line":24},"status":"passed","title":"does not warn when rendering in legacy mode"},{"ancestorTitles":[],"failureMessages":[],"fullName":"[GATED, SHOULD FAIL] should warn when rendering in concurrent mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should warn when rendering in concurrent mode"},{"ancestorTitles":[],"failureMessages":[],"fullName":"[GATED, SHOULD FAIL] should warn when rendering in blocking mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should warn when rendering in blocking mode"}],"endTime":1639318679265,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactUnmockedSchedulerWarning-test.js","startTime":1639318678939,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should bubble simply","location":{"column":3,"line":129},"status":"passed","title":"should bubble simply"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should bubble to the right handler after an update","location":{"column":3,"line":140},"status":"passed","title":"should bubble to the right handler after an update"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should continue bubbling if an error is thrown","location":{"column":3,"line":160},"status":"passed","title":"should continue bubbling if an error is thrown"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should set currentTarget","location":{"column":3,"line":176},"status":"passed","title":"should set currentTarget"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should support stopPropagation()","location":{"column":3,"line":196},"status":"passed","title":"should support stopPropagation()"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should support overriding .isPropagationStopped()","location":{"column":3,"line":210},"status":"passed","title":"should support overriding .isPropagationStopped()"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should stop after first dispatch if stopPropagation","location":{"column":3,"line":225},"status":"passed","title":"should stop after first dispatch if stopPropagation"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should not stopPropagation if false is returned","location":{"column":3,"line":238},"status":"passed","title":"should not stopPropagation if false is returned"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should invoke handlers that were removed while bubbling","location":{"column":3,"line":258},"status":"passed","title":"should invoke handlers that were removed while bubbling"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should not invoke newly inserted handlers while bubbling","location":{"column":3,"line":269},"status":"passed","title":"should not invoke newly inserted handlers while bubbling"},{"ancestorTitles":["ReactBrowserEventEmitter"],"failureMessages":[],"fullName":"ReactBrowserEventEmitter should have mouse enter simulated by test utils","location":{"column":3,"line":279},"status":"passed","title":"should have mouse enter simulated by test utils"}],"endTime":1639318680314,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactBrowserEventEmitter-test.js","startTime":1639318679338,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["refs-destruction"],"failureMessages":[],"fullName":"refs-destruction should remove refs when destroying the parent","location":{"column":3,"line":55},"status":"passed","title":"should remove refs when destroying the parent"},{"ancestorTitles":["refs-destruction"],"failureMessages":[],"fullName":"refs-destruction should remove refs when destroying the child","location":{"column":3,"line":72},"status":"passed","title":"should remove refs when destroying the child"},{"ancestorTitles":["refs-destruction"],"failureMessages":[],"fullName":"refs-destruction should remove refs when removing the child ref attribute","location":{"column":3,"line":89},"status":"passed","title":"should remove refs when removing the child ref attribute"},{"ancestorTitles":["refs-destruction"],"failureMessages":[],"fullName":"refs-destruction should not error when destroying child with ref asynchronously","location":{"column":3,"line":106},"status":"passed","title":"should not error when destroying child with ref asynchronously"}],"endTime":1639318680821,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/refs-destruction-test.js","startTime":1639318680387,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer should pass context when rendering subtree elsewhere","location":{"column":3,"line":22},"status":"passed","title":"should pass context when rendering subtree elsewhere"},{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer should throw if parentComponent is invalid","location":{"column":3,"line":70},"status":"passed","title":"should throw if parentComponent is invalid"},{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer should update context if it changes due to setState","location":{"column":3,"line":109},"status":"passed","title":"should update context if it changes due to setState"},{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer should update context if it changes due to re-render","location":{"column":3,"line":161},"status":"passed","title":"should update context if it changes due to re-render"},{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer should render portal with non-context-provider parent","location":{"column":3,"line":209},"status":"passed","title":"should render portal with non-context-provider parent"},{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer should get context through non-context-provider parent","location":{"column":3,"line":228},"status":"passed","title":"should get context through non-context-provider parent"},{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer should get context through middle non-context-provider layer","location":{"column":3,"line":267},"status":"passed","title":"should get context through middle non-context-provider layer"},{"ancestorTitles":["renderSubtreeIntoContainer"],"failureMessages":[],"fullName":"renderSubtreeIntoContainer fails gracefully when mixing React 15 and 16","location":{"column":3,"line":310},"status":"passed","title":"fails gracefully when mixing React 15 and 16"}],"endTime":1639318681175,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/renderSubtreeIntoContainer-test.js","startTime":1639318680888,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries does not swallow exceptions on mounting without boundaries","location":{"column":3,"line":587},"status":"passed","title":"does not swallow exceptions on mounting without boundaries"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries does not swallow exceptions on updating without boundaries","location":{"column":3,"line":604},"status":"passed","title":"does not swallow exceptions on updating without boundaries"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries does not swallow exceptions on unmounting without boundaries","location":{"column":3,"line":624},"status":"passed","title":"does not swallow exceptions on unmounting without boundaries"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries prevents errors from leaking into other roots","location":{"column":3,"line":632},"status":"passed","title":"prevents errors from leaking into other roots"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries logs a single error using both error boundaries","location":{"column":3,"line":669},"status":"passed","title":"logs a single error using both error boundaries"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries renders an error state if child throws in render","location":{"column":3,"line":708},"status":"passed","title":"renders an error state if child throws in render"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries renders an error state if child throws in constructor","location":{"column":3,"line":738},"status":"passed","title":"renders an error state if child throws in constructor"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries renders an error state if child throws in componentWillMount","location":{"column":3,"line":766},"status":"passed","title":"renders an error state if child throws in componentWillMount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries renders an error state if context provider throws in componentWillMount","location":{"column":3,"line":793},"status":"passed","title":"renders an error state if context provider throws in componentWillMount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries renders an error state if module-style context provider throws in componentWillMount","location":{"column":5,"line":818},"status":"passed","title":"renders an error state if module-style context provider throws in componentWillMount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries mounts the error message if mounting fails","location":{"column":3,"line":856},"status":"passed","title":"mounts the error message if mounting fails"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries propagates errors on retry on mounting","location":{"column":3,"line":894},"status":"passed","title":"propagates errors on retry on mounting"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries propagates errors inside boundary during componentWillMount","location":{"column":3,"line":938},"status":"passed","title":"propagates errors inside boundary during componentWillMount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries propagates errors inside boundary while rendering error state","location":{"column":3,"line":966},"status":"passed","title":"propagates errors inside boundary while rendering error state"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries does not call componentWillUnmount when aborting initial mount","location":{"column":3,"line":1009},"status":"passed","title":"does not call componentWillUnmount when aborting initial mount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries resets callback refs if mounting aborts","location":{"column":3,"line":1051},"status":"passed","title":"resets callback refs if mounting aborts"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries resets object refs if mounting aborts","location":{"column":3,"line":1095},"status":"passed","title":"resets object refs if mounting aborts"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries successfully mounts if no error occurs","location":{"column":3,"line":1135},"status":"passed","title":"successfully mounts if no error occurs"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches if child throws in constructor during update","location":{"column":3,"line":1156},"status":"passed","title":"catches if child throws in constructor during update"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches if child throws in componentWillMount during update","location":{"column":3,"line":1204},"status":"passed","title":"catches if child throws in componentWillMount during update"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches if child throws in componentWillReceiveProps during update","location":{"column":3,"line":1253},"status":"passed","title":"catches if child throws in componentWillReceiveProps during update"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches if child throws in componentWillUpdate during update","location":{"column":3,"line":1297},"status":"passed","title":"catches if child throws in componentWillUpdate during update"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches if child throws in render during update","location":{"column":3,"line":1342},"status":"passed","title":"catches if child throws in render during update"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries keeps refs up-to-date during updates","location":{"column":3,"line":1391},"status":"passed","title":"keeps refs up-to-date during updates"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries recovers from componentWillUnmount errors on update","location":{"column":3,"line":1455},"status":"passed","title":"recovers from componentWillUnmount errors on update"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries recovers from nested componentWillUnmount errors on update","location":{"column":3,"line":1511},"status":"passed","title":"recovers from nested componentWillUnmount errors on update"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries picks the right boundary when handling unmounting errors","location":{"column":3,"line":1572},"status":"passed","title":"picks the right boundary when handling unmounting errors"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries can recover from error state","location":{"column":3,"line":1641},"status":"passed","title":"can recover from error state"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries can update multiple times in error state","location":{"column":3,"line":1689},"status":"passed","title":"can update multiple times in error state"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries doesn't get into inconsistent state during removals","location":{"column":3,"line":1713},"status":"passed","title":"doesn't get into inconsistent state during removals"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries doesn't get into inconsistent state during additions","location":{"column":3,"line":1732},"status":"passed","title":"doesn't get into inconsistent state during additions"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries doesn't get into inconsistent state during reorders","location":{"column":3,"line":1750},"status":"passed","title":"doesn't get into inconsistent state during reorders"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches errors originating downstream","location":{"column":3,"line":1798},"status":"passed","title":"catches errors originating downstream"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches errors in componentDidMount","location":{"column":3,"line":1840},"status":"passed","title":"catches errors in componentDidMount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries catches errors in componentDidUpdate","location":{"column":3,"line":1899},"status":"passed","title":"catches errors in componentDidUpdate"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries propagates errors inside boundary during componentDidMount","location":{"column":3,"line":1938},"status":"passed","title":"propagates errors inside boundary during componentDidMount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries calls componentDidCatch for each error that is captured","location":{"column":3,"line":1975},"status":"passed","title":"calls componentDidCatch for each error that is captured"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries discards a bad root if the root component fails","location":{"column":3,"line":2076},"status":"passed","title":"discards a bad root if the root component fails"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries renders empty output if error boundary does not handle the error","location":{"column":3,"line":2107},"status":"passed","title":"renders empty output if error boundary does not handle the error"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries passes first error when two errors happen in commit","location":{"column":3,"line":2141},"status":"passed","title":"passes first error when two errors happen in commit"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries propagates uncaught error inside unbatched initial mount","location":{"column":3,"line":2180},"status":"passed","title":"propagates uncaught error inside unbatched initial mount"},{"ancestorTitles":["ReactLegacyErrorBoundaries"],"failureMessages":[],"fullName":"ReactLegacyErrorBoundaries handles errors that occur in before-mutation commit hook","location":{"column":3,"line":2192},"status":"passed","title":"handles errors that occur in before-mutation commit hook"}],"endTime":1639318684804,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactLegacyErrorBoundaries-test.internal.js","startTime":1639318681242,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should return null if passed null","location":{"column":3,"line":18},"status":"passed","title":"findDOMNode should return null if passed null"},{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should find dom element","location":{"column":3,"line":22},"status":"passed","title":"findDOMNode should find dom element"},{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should find dom element after an update from null","location":{"column":3,"line":40},"status":"passed","title":"findDOMNode should find dom element after an update from null"},{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should reject random objects","location":{"column":3,"line":66},"status":"passed","title":"findDOMNode should reject random objects"},{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should reject unmounted objects with render func","location":{"column":3,"line":72},"status":"passed","title":"findDOMNode should reject unmounted objects with render func"},{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should not throw an error when called within a component that is not mounted","location":{"column":3,"line":88},"status":"passed","title":"findDOMNode should not throw an error when called within a component that is not mounted"},{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should warn if used to find a host component inside StrictMode","location":{"column":3,"line":101},"status":"passed","title":"findDOMNode should warn if used to find a host component inside StrictMode"},{"ancestorTitles":["findDOMNode"],"failureMessages":[],"fullName":"findDOMNode findDOMNode should warn if passed a component that is inside StrictMode","location":{"column":3,"line":132},"status":"passed","title":"findDOMNode should warn if passed a component that is inside StrictMode"}],"endTime":1639318685129,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/findDOMNode-test.js","startTime":1639318684871,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMComponentTree"],"failureMessages":[],"fullName":"ReactDOMComponentTree finds nodes for instances on events","location":{"column":3,"line":29},"status":"passed","title":"finds nodes for instances on events"},{"ancestorTitles":["ReactDOMComponentTree"],"failureMessages":[],"fullName":"ReactDOMComponentTree finds closest instance for node when an event happens","location":{"column":3,"line":66},"status":"passed","title":"finds closest instance for node when an event happens"},{"ancestorTitles":["ReactDOMComponentTree"],"failureMessages":[],"fullName":"ReactDOMComponentTree updates event handlers from fiber props","location":{"column":3,"line":101},"status":"passed","title":"updates event handlers from fiber props"},{"ancestorTitles":["ReactDOMComponentTree"],"failureMessages":[],"fullName":"ReactDOMComponentTree finds a controlled instance from node and gets its current fiber props","location":{"column":3,"line":143},"status":"passed","title":"finds a controlled instance from node and gets its current fiber props"},{"ancestorTitles":["ReactDOMComponentTree"],"failureMessages":[],"fullName":"ReactDOMComponentTree finds instance of node that is attempted to be unmounted","location":{"column":3,"line":190},"status":"passed","title":"finds instance of node that is attempted to be unmounted"},{"ancestorTitles":["ReactDOMComponentTree"],"failureMessages":[],"fullName":"ReactDOMComponentTree finds instance from node to stop rendering over other react rendered components","location":{"column":3,"line":204},"status":"passed","title":"finds instance from node to stop rendering over other react rendered components"}],"endTime":1639318685472,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMComponentTree-test.js","startTime":1639318685196,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactMultiChildText"],"failureMessages":[],"fullName":"ReactMultiChildText should correctly handle all possible children for render and update","location":{"column":3,"line":75},"status":"passed","title":"should correctly handle all possible children for render and update"},{"ancestorTitles":["ReactMultiChildText"],"failureMessages":[],"fullName":"ReactMultiChildText should throw if rendering both HTML and children","location":{"column":3,"line":170},"status":"passed","title":"should throw if rendering both HTML and children"},{"ancestorTitles":["ReactMultiChildText"],"failureMessages":[],"fullName":"ReactMultiChildText should render between nested components and inline children","location":{"column":3,"line":178},"status":"passed","title":"should render between nested components and inline children"}],"endTime":1639318693724,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactMultiChildText-test.js","startTime":1639318685540,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"can use act to flush effects","location":{"column":1,"line":50},"status":"passed","title":"can use act to flush effects"},{"ancestorTitles":[],"failureMessages":[],"fullName":"flushes effects on every call","location":{"column":1,"line":65},"status":"passed","title":"flushes effects on every call"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should keep flushing effects until they're done","location":{"column":1,"line":103},"status":"passed","title":"should keep flushing effects until they're done"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should flush effects only on exiting the outermost act","location":{"column":1,"line":121},"status":"passed","title":"should flush effects only on exiting the outermost act"},{"ancestorTitles":[],"failureMessages":[],"fullName":"can handle cascading promises","location":{"column":1,"line":141},"status":"passed","title":"can handle cascading promises"}],"endTime":1639318694311,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactTestUtilsActUnmockedScheduler-test.js","startTime":1639318693796,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API should be able to adopt server markup","location":{"column":5,"line":48},"status":"passed","title":"should be able to adopt server markup"},{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API should not be able to unmount component from document node","location":{"column":5,"line":77},"status":"passed","title":"should not be able to unmount component from document node"},{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API should not be able to switch root constructors","location":{"column":5,"line":103},"status":"passed","title":"should not be able to switch root constructors"},{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API should be able to mount into document","location":{"column":5,"line":144},"status":"passed","title":"should be able to mount into document"},{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API renders over an existing text child without throwing","location":{"column":5,"line":170},"status":"passed","title":"renders over an existing text child without throwing"},{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API should give helpful errors on state desync","location":{"column":5,"line":180},"status":"passed","title":"should give helpful errors on state desync"},{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API should throw on full document render w/ no markup","location":{"column":5,"line":211},"status":"passed","title":"should throw on full document render w/ no markup"},{"ancestorTitles":["rendering React components at document","with old implicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with old implicit hydration API supports findDOMNode on full-page components","location":{"column":5,"line":234},"status":"passed","title":"supports findDOMNode on full-page components"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API should be able to adopt server markup","location":{"column":5,"line":256},"status":"passed","title":"should be able to adopt server markup"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API should not be able to unmount component from document node","location":{"column":5,"line":283},"status":"passed","title":"should not be able to unmount component from document node"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API should not be able to switch root constructors","location":{"column":5,"line":307},"status":"passed","title":"should not be able to switch root constructors"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API should be able to mount into document","location":{"column":5,"line":347},"status":"passed","title":"should be able to mount into document"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API renders over an existing text child without throwing","location":{"column":5,"line":371},"status":"passed","title":"renders over an existing text child without throwing"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API should give helpful errors on state desync","location":{"column":5,"line":380},"status":"passed","title":"should give helpful errors on state desync"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API should render w/ no markup to full document","location":{"column":5,"line":405},"status":"passed","title":"should render w/ no markup to full document"},{"ancestorTitles":["rendering React components at document","with new explicit hydration API"],"failureMessages":[],"fullName":"rendering React components at document with new explicit hydration API supports findDOMNode on full-page components","location":{"column":5,"line":428},"status":"passed","title":"supports findDOMNode on full-page components"}],"endTime":1639318695729,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactRenderDocument-test.js","startTime":1639318694379,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM should bubble onSubmit","location":{"column":3,"line":26},"status":"passed","title":"should bubble onSubmit"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM allows a DOM element to be used with a string","location":{"column":3,"line":62},"status":"passed","title":"allows a DOM element to be used with a string"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM should allow children to be passed as an argument","location":{"column":3,"line":68},"status":"passed","title":"should allow children to be passed as an argument"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM should overwrite props.children with children argument","location":{"column":3,"line":75},"status":"passed","title":"should overwrite props.children with children argument"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM should purge the DOM cache when removing nodes","location":{"column":3,"line":86},"status":"passed","title":"should purge the DOM cache when removing nodes"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM throws in render() if the mount callback is not a function","location":{"column":3,"line":124},"status":"passed","title":"throws in render() if the mount callback is not a function"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM throws in render() if the update callback is not a function","location":{"column":3,"line":176},"status":"passed","title":"throws in render() if the update callback is not a function"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM preserves focus","location":{"column":3,"line":231},"status":"passed","title":"preserves focus"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM calls focus() on autoFocus elements after they have been mounted to the DOM","location":{"column":3,"line":291},"status":"passed","title":"calls focus() on autoFocus elements after they have been mounted to the DOM"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM shouldn't fire duplicate event handler while handling other nested dispatch","location":{"column":3,"line":324},"status":"passed","title":"shouldn't fire duplicate event handler while handling other nested dispatch"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM should not crash with devtools installed","location":{"column":3,"line":369},"status":"passed","title":"should not crash with devtools installed"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM should not crash calling findDOMNode inside a function component","location":{"column":3,"line":391},"status":"passed","title":"should not crash calling findDOMNode inside a function component"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM throws in DEV if jsdom is destroyed by the time setState() is called","location":{"column":3,"line":411},"status":"passed","title":"throws in DEV if jsdom is destroyed by the time setState() is called"},{"ancestorTitles":["ReactDOM"],"failureMessages":[],"fullName":"ReactDOM reports stacks with re-entrant renderToString() calls on the client","location":{"column":3,"line":454},"status":"passed","title":"reports stacks with re-entrant renderToString() calls on the client"}],"endTime":1639318697074,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOM-test.js","startTime":1639318695796,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled text input with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a controlled text input with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled text input with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a controlled text input with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled text input with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a controlled text input with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled textarea with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a controlled textarea with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled textarea with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a controlled textarea with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled textarea with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a controlled textarea with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled checkbox with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a controlled checkbox with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled checkbox with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a controlled checkbox with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled checkbox with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a controlled checkbox with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled select with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a controlled select with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled select with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a controlled select with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with controlled inputs"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with controlled inputs renders a controlled select with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a controlled select with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-entered text on successful reconnect to an uncontrolled input","location":{"column":5,"line":280},"status":"passed","title":"should not blow away user-entered text on successful reconnect to an uncontrolled input"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-entered text on successful reconnect to a controlled input","location":{"column":5,"line":283},"status":"passed","title":"should not blow away user-entered text on successful reconnect to a controlled input"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-interaction on successful reconnect to an uncontrolled range input","location":{"column":5,"line":294},"status":"passed","title":"should not blow away user-interaction on successful reconnect to an uncontrolled range input"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-interaction on successful reconnect to a controlled range input","location":{"column":5,"line":301},"status":"passed","title":"should not blow away user-interaction on successful reconnect to a controlled range input"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-entered text on successful reconnect to an uncontrolled checkbox","location":{"column":5,"line":315},"status":"passed","title":"should not blow away user-entered text on successful reconnect to an uncontrolled checkbox"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-entered text on successful reconnect to a controlled checkbox","location":{"column":5,"line":323},"status":"passed","title":"should not blow away user-entered text on successful reconnect to a controlled checkbox"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-entered text on successful reconnect to an uncontrolled textarea","location":{"column":5,"line":336},"status":"pending","title":"should not blow away user-entered text on successful reconnect to an uncontrolled textarea"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-entered text on successful reconnect to a controlled textarea","location":{"column":5,"line":341},"status":"pending","title":"should not blow away user-entered text on successful reconnect to a controlled textarea"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-selected value on successful reconnect to an uncontrolled select","location":{"column":5,"line":349},"status":"passed","title":"should not blow away user-selected value on successful reconnect to an uncontrolled select"},{"ancestorTitles":["ReactDOMServerIntegrationUserInteraction","user interaction with inputs before client render"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationUserInteraction user interaction with inputs before client render should not blow away user-selected value on successful reconnect to an controlled select","location":{"column":5,"line":361},"status":"passed","title":"should not blow away user-selected value on successful reconnect to an controlled select"}],"endTime":1639318699494,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationUserInteraction-test.js","startTime":1639318697142,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCompositeComponentDOMMinimalism"],"failureMessages":[],"fullName":"ReactCompositeComponentDOMMinimalism should not render extra nodes for non-interpolated text","location":{"column":3,"line":53},"status":"passed","title":"should not render extra nodes for non-interpolated text"},{"ancestorTitles":["ReactCompositeComponentDOMMinimalism"],"failureMessages":[],"fullName":"ReactCompositeComponentDOMMinimalism should not render extra nodes for non-interpolated text","location":{"column":3,"line":59},"status":"passed","title":"should not render extra nodes for non-interpolated text"},{"ancestorTitles":["ReactCompositeComponentDOMMinimalism"],"failureMessages":[],"fullName":"ReactCompositeComponentDOMMinimalism should not render extra nodes for non-interpolated text","location":{"column":3,"line":67},"status":"passed","title":"should not render extra nodes for non-interpolated text"}],"endTime":1639318699790,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactCompositeComponentDOMMinimalism-test.js","startTime":1639318699561,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should flatten children to a string","location":{"column":3,"line":24},"status":"passed","title":"should flatten children to a string"},{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should ignore and warn invalid children types","location":{"column":3,"line":35},"status":"passed","title":"should ignore and warn invalid children types"},{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should ignore null/undefined/false children without warning","location":{"column":3,"line":52},"status":"passed","title":"should ignore null/undefined/false children without warning"},{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should throw on object children","location":{"column":3,"line":66},"status":"passed","title":"should throw on object children"},{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should support element-ish child","location":{"column":3,"line":92},"status":"passed","title":"should support element-ish child"},{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should be able to use dangerouslySetInnerHTML on option","location":{"column":3,"line":136},"status":"passed","title":"should be able to use dangerouslySetInnerHTML on option"},{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should set attribute for empty value","location":{"column":3,"line":143},"status":"passed","title":"should set attribute for empty value"},{"ancestorTitles":["ReactDOMOption"],"failureMessages":[],"fullName":"ReactDOMOption should allow ignoring `value` on option","location":{"column":3,"line":154},"status":"passed","title":"should allow ignoring `value` on option"}],"endTime":1639318700573,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMOption-test.js","startTime":1639318699862,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders undefined legacy context with warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders undefined legacy context with warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders undefined legacy context with warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders undefined legacy context with warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders undefined legacy context with warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders undefined legacy context with warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders undefined legacy context with warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders undefined legacy context with warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders undefined legacy context with warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders undefined legacy context with warning with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders modern context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders modern context with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders modern context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders modern context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders modern context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders modern context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders modern context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders modern context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationLegacyContextDisabled renders modern context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders modern context with client render on top of bad server markup"}],"endTime":1639318701638,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationLegacyContextDisabled-test.internal.js","startTime":1639318700639,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerSuspense"],"failureMessages":[],"fullName":"ReactDOMServerSuspense [GATED, SHOULD FAIL] should render the children when no promise is thrown","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render the children when no promise is thrown"},{"ancestorTitles":["ReactDOMServerSuspense"],"failureMessages":[],"fullName":"ReactDOMServerSuspense [GATED, SHOULD FAIL] should render the fallback when a promise thrown","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render the fallback when a promise thrown"},{"ancestorTitles":["ReactDOMServerSuspense"],"failureMessages":[],"fullName":"ReactDOMServerSuspense [GATED, SHOULD FAIL] should work with nested suspense components","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should work with nested suspense components"},{"ancestorTitles":["ReactDOMServerSuspense"],"failureMessages":[],"fullName":"ReactDOMServerSuspense [GATED, SHOULD FAIL] server renders a SuspenseList component and its children","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] server renders a SuspenseList component and its children"},{"ancestorTitles":["ReactDOMServerSuspense"],"failureMessages":[],"fullName":"ReactDOMServerSuspense does not get confused by throwing null","location":{"column":3,"line":172},"status":"passed","title":"does not get confused by throwing null"},{"ancestorTitles":["ReactDOMServerSuspense"],"failureMessages":[],"fullName":"ReactDOMServerSuspense does not get confused by throwing undefined","location":{"column":3,"line":190},"status":"passed","title":"does not get confused by throwing undefined"},{"ancestorTitles":["ReactDOMServerSuspense"],"failureMessages":[],"fullName":"ReactDOMServerSuspense does not get confused by throwing a primitive","location":{"column":3,"line":208},"status":"passed","title":"does not get confused by throwing a primitive"}],"endTime":1639318702291,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerSuspense-test.internal.js","startTime":1639318701705,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow setting `defaultValue`","location":{"column":3,"line":45},"status":"passed","title":"should allow setting `defaultValue`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should display `defaultValue` of number 0","location":{"column":3,"line":61},"status":"passed","title":"should display `defaultValue` of number 0"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should display \"false\" for `defaultValue` of `false`","location":{"column":3,"line":68},"status":"passed","title":"should display \"false\" for `defaultValue` of `false`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should display \"foobar\" for `defaultValue` of `objToString`","location":{"column":3,"line":75},"status":"passed","title":"should display \"foobar\" for `defaultValue` of `objToString`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should set defaultValue","location":{"column":3,"line":88},"status":"passed","title":"should set defaultValue"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should not render value as an attribute","location":{"column":3,"line":96},"status":"passed","title":"should not render value as an attribute"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should display `value` of number 0","location":{"column":3,"line":103},"status":"passed","title":"should display `value` of number 0"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should update defaultValue to empty string","location":{"column":3,"line":110},"status":"passed","title":"should update defaultValue to empty string"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow setting `value` to `giraffe`","location":{"column":3,"line":117},"status":"passed","title":"should allow setting `value` to `giraffe`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea will not initially assign an empty value (covers case where firefox throws a validation error when required attribute is set)","location":{"column":3,"line":131},"status":"passed","title":"will not initially assign an empty value (covers case where firefox throws a validation error when required attribute is set)"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should render defaultValue for SSR","location":{"column":3,"line":158},"status":"passed","title":"should render defaultValue for SSR"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should render value for SSR","location":{"column":3,"line":166},"status":"passed","title":"should render value for SSR"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow setting `value` to `true`","location":{"column":3,"line":175},"status":"passed","title":"should allow setting `value` to `true`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow setting `value` to `false`","location":{"column":3,"line":189},"status":"passed","title":"should allow setting `value` to `false`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow setting `value` to `objToString`","location":{"column":3,"line":203},"status":"passed","title":"should allow setting `value` to `objToString`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should take updates to `defaultValue` for uncontrolled textarea","location":{"column":3,"line":222},"status":"passed","title":"should take updates to `defaultValue` for uncontrolled textarea"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should take updates to children in lieu of `defaultValue` for uncontrolled textarea","location":{"column":3,"line":234},"status":"passed","title":"should take updates to children in lieu of `defaultValue` for uncontrolled textarea"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should not incur unnecessary DOM mutations","location":{"column":3,"line":246},"status":"passed","title":"should not incur unnecessary DOM mutations"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should properly control a value of number `0`","location":{"column":3,"line":269},"status":"passed","title":"should properly control a value of number `0`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should treat children like `defaultValue`","location":{"column":5,"line":326},"status":"passed","title":"should treat children like `defaultValue`"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should keep value when switching to uncontrolled element if not changed","location":{"column":3,"line":345},"status":"passed","title":"should keep value when switching to uncontrolled element if not changed"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should keep value when switching to uncontrolled element if changed","location":{"column":3,"line":360},"status":"passed","title":"should keep value when switching to uncontrolled element if changed"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow numbers as children","location":{"column":5,"line":395},"status":"passed","title":"should allow numbers as children"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow booleans as children","location":{"column":5,"line":419},"status":"passed","title":"should allow booleans as children"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should allow objects as children","location":{"column":5,"line":448},"status":"passed","title":"should allow objects as children"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should throw with multiple or invalid children","location":{"column":5,"line":465},"status":"passed","title":"should throw with multiple or invalid children"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should unmount","location":{"column":3,"line":497},"status":"passed","title":"should unmount"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should warn if value is null","location":{"column":3,"line":503},"status":"passed","title":"should warn if value is null"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should warn if value and defaultValue are specified","location":{"column":3,"line":516},"status":"passed","title":"should warn if value and defaultValue are specified"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea should not warn about missing onChange in uncontrolled textareas","location":{"column":3,"line":535},"status":"passed","title":"should not warn about missing onChange in uncontrolled textareas"},{"ancestorTitles":["ReactDOMTextarea"],"failureMessages":[],"fullName":"ReactDOMTextarea does not set textContent if value is unchanged","location":{"column":3,"line":542},"status":"passed","title":"does not set textContent if value is unchanged"},{"ancestorTitles":["ReactDOMTextarea","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a Symbol value treats initial Symbol value as an empty string","location":{"column":5,"line":583},"status":"passed","title":"treats initial Symbol value as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a Symbol value treats initial Symbol children as an empty string","location":{"column":5,"line":596},"status":"passed","title":"treats initial Symbol children as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a Symbol value treats updated Symbol value as an empty string","location":{"column":5,"line":609},"status":"passed","title":"treats updated Symbol value as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a Symbol value treats initial Symbol defaultValue as an empty string","location":{"column":5,"line":623},"status":"passed","title":"treats initial Symbol defaultValue as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a Symbol value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a Symbol value treats updated Symbol defaultValue as an empty string","location":{"column":5,"line":632},"status":"passed","title":"treats updated Symbol defaultValue as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a function value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a function value treats initial function value as an empty string","location":{"column":5,"line":644},"status":"passed","title":"treats initial function value as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a function value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a function value treats initial function children as an empty string","location":{"column":5,"line":657},"status":"passed","title":"treats initial function children as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a function value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a function value treats updated function value as an empty string","location":{"column":5,"line":670},"status":"passed","title":"treats updated function value as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a function value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a function value treats initial function defaultValue as an empty string","location":{"column":5,"line":684},"status":"passed","title":"treats initial function defaultValue as an empty string"},{"ancestorTitles":["ReactDOMTextarea","When given a function value"],"failureMessages":[],"fullName":"ReactDOMTextarea When given a function value treats updated function defaultValue as an empty string","location":{"column":5,"line":693},"status":"passed","title":"treats updated function defaultValue as an empty string"}],"endTime":1639318705388,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMTextarea-test.js","startTime":1639318702358,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMFiberAsync"],"failureMessages":[],"fullName":"ReactDOMFiberAsync renders synchronously by default","location":{"column":3,"line":41},"status":"passed","title":"renders synchronously by default"},{"ancestorTitles":["ReactDOMFiberAsync"],"failureMessages":[],"fullName":"ReactDOMFiberAsync flushSync batches sync updates and flushes them at the end of the batch","location":{"column":3,"line":52},"status":"passed","title":"flushSync batches sync updates and flushes them at the end of the batch"},{"ancestorTitles":["ReactDOMFiberAsync"],"failureMessages":[],"fullName":"ReactDOMFiberAsync flushSync flushes updates even if nested inside another flushSync","location":{"column":3,"line":90},"status":"passed","title":"flushSync flushes updates even if nested inside another flushSync"},{"ancestorTitles":["ReactDOMFiberAsync"],"failureMessages":[],"fullName":"ReactDOMFiberAsync flushSync logs an error if already performing work","location":{"column":3,"line":132},"status":"passed","title":"flushSync logs an error if already performing work"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] does not perform deferred updates synchronously","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not perform deferred updates synchronously"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] top-level updates are concurrent","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] top-level updates are concurrent"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] deep updates (setState) are concurrent","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] deep updates (setState) are concurrent"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] flushSync flushes updates before end of the tick","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] flushSync flushes updates before end of the tick"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] flushControlled flushes updates before yielding to browser","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] flushControlled flushes updates before yielding to browser"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] flushControlled does not flush until end of outermost batchedUpdates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] flushControlled does not flush until end of outermost batchedUpdates"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] flushControlled returns nothing","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] flushControlled returns nothing"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] ignores discrete events on a pending removed element","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] ignores discrete events on a pending removed element"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] ignores discrete events on a pending removed event listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] ignores discrete events on a pending removed event listener"},{"ancestorTitles":["ReactDOMFiberAsync","concurrent mode"],"failureMessages":[],"fullName":"ReactDOMFiberAsync concurrent mode [GATED, SHOULD FAIL] uses the newest discrete events on a pending changed event listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] uses the newest discrete events on a pending changed event listener"},{"ancestorTitles":["ReactDOMFiberAsync"],"failureMessages":[],"fullName":"ReactDOMFiberAsync regression test: does not drop passive effects across roots (#17066)","location":{"column":3,"line":584},"status":"passed","title":"regression test: does not drop passive effects across roots (#17066)"},{"ancestorTitles":["ReactDOMFiberAsync","createBlockingRoot"],"failureMessages":[],"fullName":"ReactDOMFiberAsync createBlockingRoot [GATED, SHOULD FAIL] updates flush without yielding in the next event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] updates flush without yielding in the next event"},{"ancestorTitles":["ReactDOMFiberAsync"],"failureMessages":[],"fullName":"ReactDOMFiberAsync [GATED, SHOULD FAIL] unmounted roots should never clear newer root content from a container","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] unmounted roots should never clear newer root content from a container"}],"endTime":1639318707391,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMFiberAsync-test.js","startTime":1639318705534,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["validateDOMNesting"],"failureMessages":[],"fullName":"validateDOMNesting allows valid nestings","location":{"column":3,"line":37},"status":"passed","title":"allows valid nestings"},{"ancestorTitles":["validateDOMNesting"],"failureMessages":[],"fullName":"validateDOMNesting prevents problematic nestings","location":{"column":3,"line":58},"status":"passed","title":"prevents problematic nestings"}],"endTime":1639318707710,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/validateDOMNesting-test.js","startTime":1639318707458,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should not reuse an instance when it has been unmounted","location":{"column":3,"line":97},"status":"passed","title":"should not reuse an instance when it has been unmounted"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle it should fire onDOMReady when already in onDOMReady","location":{"column":3,"line":119},"status":"passed","title":"it should fire onDOMReady when already in onDOMReady"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle throws when accessing state in componentWillMount","location":{"column":3,"line":167},"status":"passed","title":"throws when accessing state in componentWillMount"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should allow update state inside of componentWillMount","location":{"column":3,"line":184},"status":"passed","title":"should allow update state inside of componentWillMount"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle warns if setting 'this.state = props'","location":{"column":3,"line":201},"status":"passed","title":"warns if setting 'this.state = props'"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should not allow update state inside of getInitialState","location":{"column":3,"line":221},"status":"passed","title":"should not allow update state inside of getInitialState"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should correctly determine if a component is mounted","location":{"column":3,"line":248},"status":"passed","title":"should correctly determine if a component is mounted"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should correctly determine if a null component is mounted","location":{"column":3,"line":275},"status":"passed","title":"should correctly determine if a null component is mounted"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle isMounted should return false when unmounted","location":{"column":3,"line":302},"status":"passed","title":"isMounted should return false when unmounted"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle warns if findDOMNode is used inside render","location":{"column":3,"line":321},"status":"passed","title":"warns if findDOMNode is used inside render"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should carry through each of the phases of setup","location":{"column":3,"line":340},"status":"passed","title":"should carry through each of the phases of setup"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should not throw when updating an auxiliary component","location":{"column":3,"line":455},"status":"passed","title":"should not throw when updating an auxiliary component"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should allow state updates in componentDidMount","location":{"column":3,"line":495},"status":"passed","title":"should allow state updates in componentDidMount"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should call nested legacy lifecycle methods in the right order","location":{"column":3,"line":523},"status":"passed","title":"should call nested legacy lifecycle methods in the right order"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should call nested new lifecycle methods in the right order","location":{"column":3,"line":598},"status":"passed","title":"should call nested new lifecycle methods in the right order"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present","location":{"column":3,"line":675},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present","location":{"column":3,"line":710},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should not invoke new unsafe lifecycles (cWM/cWRP/cWU) if static gDSFP is present","location":{"column":3,"line":749},"status":"passed","title":"should not invoke new unsafe lifecycles (cWM/cWRP/cWU) if static gDSFP is present"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should warn about deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present","location":{"column":3,"line":778},"status":"passed","title":"should warn about deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should warn about deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present","location":{"column":3,"line":884},"status":"passed","title":"should warn about deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle calls effects on module-pattern component","location":{"column":5,"line":987},"status":"passed","title":"calls effects on module-pattern component"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should warn if getDerivedStateFromProps returns undefined","location":{"column":3,"line":1047},"status":"passed","title":"should warn if getDerivedStateFromProps returns undefined"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should warn if state is not initialized before getDerivedStateFromProps","location":{"column":3,"line":1066},"status":"passed","title":"should warn if state is not initialized before getDerivedStateFromProps"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should invoke both deprecated and new lifecycles if both are present","location":{"column":3,"line":1088},"status":"passed","title":"should invoke both deprecated and new lifecycles if both are present"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should not override state with stale values if prevState is spread within getDerivedStateFromProps","location":{"column":3,"line":1137},"status":"passed","title":"should not override state with stale values if prevState is spread within getDerivedStateFromProps"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should pass the return value from getSnapshotBeforeUpdate to componentDidUpdate","location":{"column":3,"line":1190},"status":"passed","title":"should pass the return value from getSnapshotBeforeUpdate to componentDidUpdate"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should pass previous state to shouldComponentUpdate even with getDerivedStateFromProps","location":{"column":3,"line":1259},"status":"passed","title":"should pass previous state to shouldComponentUpdate even with getDerivedStateFromProps"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should call getSnapshotBeforeUpdate before mutations are committed","location":{"column":3,"line":1293},"status":"passed","title":"should call getSnapshotBeforeUpdate before mutations are committed"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should warn if getSnapshotBeforeUpdate returns undefined","location":{"column":3,"line":1332},"status":"passed","title":"should warn if getSnapshotBeforeUpdate returns undefined"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle should warn if getSnapshotBeforeUpdate is defined with no componentDidUpdate","location":{"column":3,"line":1352},"status":"passed","title":"should warn if getSnapshotBeforeUpdate is defined with no componentDidUpdate"},{"ancestorTitles":["ReactComponentLifeCycle"],"failureMessages":[],"fullName":"ReactComponentLifeCycle warns about deprecated unsafe lifecycles","location":{"column":3,"line":1372},"status":"passed","title":"warns about deprecated unsafe lifecycles"},{"ancestorTitles":["ReactComponentLifeCycle","react-lifecycles-compat"],"failureMessages":[],"fullName":"ReactComponentLifeCycle react-lifecycles-compat should not warn for components with polyfilled getDerivedStateFromProps","location":{"column":5,"line":1418},"status":"passed","title":"should not warn for components with polyfilled getDerivedStateFromProps"},{"ancestorTitles":["ReactComponentLifeCycle","react-lifecycles-compat"],"failureMessages":[],"fullName":"ReactComponentLifeCycle react-lifecycles-compat should not warn for components with polyfilled getSnapshotBeforeUpdate","location":{"column":5,"line":1440},"status":"passed","title":"should not warn for components with polyfilled getSnapshotBeforeUpdate"}],"endTime":1639318710289,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactComponentLifeCycle-test.js","startTime":1639318707776,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with text with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with text with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with text with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with text with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with text with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with flanking whitespace with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with text with flanking whitespace with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with flanking whitespace with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with text with flanking whitespace with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with flanking whitespace with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with text with flanking whitespace with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with flanking whitespace with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with text with flanking whitespace with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text with flanking whitespace with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with text with flanking whitespace with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with an empty text child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with an empty text child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with an empty text child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with an empty text child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with an empty text child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with an empty text child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with an empty text child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with an empty text child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with an empty text child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with an empty text child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple empty text children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with multiple empty text children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple empty text children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with multiple empty text children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple empty text children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with multiple empty text children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple empty text children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with multiple empty text children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple empty text children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with multiple empty text children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple whitespace children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with multiple whitespace children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple whitespace children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with multiple whitespace children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple whitespace children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with multiple whitespace children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple whitespace children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with multiple whitespace children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with multiple whitespace children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with multiple whitespace children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text sibling to a node with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with text sibling to a node with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text sibling to a node with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with text sibling to a node with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text sibling to a node with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with text sibling to a node with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text sibling to a node with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with text sibling to a node with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a div with text sibling to a node with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with text sibling to a node with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a non-standard element with text with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a non-standard element with text with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a non-standard element with text with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a non-standard element with text with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a non-standard element with text with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a non-standard element with text with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a non-standard element with text with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a non-standard element with text with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a non-standard element with text with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a non-standard element with text with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a custom element with text with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a custom element with text with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a custom element with text with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a custom element with text with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a custom element with text with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a custom element with text with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a custom element with text with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a custom element with text with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a custom element with text with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a custom element with text with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a leading blank child with a text sibling with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a leading blank child with a text sibling with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a leading blank child with a text sibling with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a leading blank child with a text sibling with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a leading blank child with a text sibling with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a leading blank child with a text sibling with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a leading blank child with a text sibling with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a leading blank child with a text sibling with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a leading blank child with a text sibling with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a leading blank child with a text sibling with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a trailing blank child with a text sibling with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a trailing blank child with a text sibling with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a trailing blank child with a text sibling with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a trailing blank child with a text sibling with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a trailing blank child with a text sibling with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a trailing blank child with a text sibling with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a trailing blank child with a text sibling with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a trailing blank child with a text sibling with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a trailing blank child with a text sibling with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a trailing blank child with a text sibling with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders an element with two text children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an element with two text children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders an element with two text children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an element with two text children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders an element with two text children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an element with two text children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders an element with two text children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an element with two text children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders an element with two text children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an element with two text children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a component returning text node between two text nodes with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a component returning text node between two text nodes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a component returning text node between two text nodes with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a component returning text node between two text nodes with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a component returning text node between two text nodes with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a component returning text node between two text nodes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a component returning text node between two text nodes with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a component returning text node between two text nodes with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a component returning text node between two text nodes with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a component returning text node between two text nodes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a tree with sibling host and text nodes with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a tree with sibling host and text nodes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a tree with sibling host and text nodes with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a tree with sibling host and text nodes with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a tree with sibling host and text nodes with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a tree with sibling host and text nodes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a tree with sibling host and text nodes with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a tree with sibling host and text nodes with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","text children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children text children renders a tree with sibling host and text nodes with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a tree with sibling host and text nodes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders a number as single child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a number as single child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders a number as single child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a number as single child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders a number as single child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a number as single child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders a number as single child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a number as single child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders a number as single child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a number as single child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders zero as single child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders zero as single child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders zero as single child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders zero as single child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders zero as single child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders zero as single child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders zero as single child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders zero as single child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders zero as single child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders zero as single child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders an element with number and text children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an element with number and text children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders an element with number and text children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an element with number and text children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders an element with number and text children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an element with number and text children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders an element with number and text children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an element with number and text children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","number children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children number children renders an element with number and text children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an element with number and text children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null single child as blank with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders null single child as blank with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null single child as blank with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders null single child as blank with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null single child as blank with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders null single child as blank with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null single child as blank with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders null single child as blank with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null single child as blank with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders null single child as blank with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false single child as blank with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders false single child as blank with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false single child as blank with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders false single child as blank with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false single child as blank with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders false single child as blank with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false single child as blank with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders false single child as blank with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false single child as blank with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders false single child as blank with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders undefined single child as blank with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders undefined single child as blank with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders undefined single child as blank with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders undefined single child as blank with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders undefined single child as blank with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders undefined single child as blank with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders undefined single child as blank with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders undefined single child as blank with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders undefined single child as blank with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders undefined single child as blank with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders a null component children as empty with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a null component children as empty with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders a null component children as empty with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a null component children as empty with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders a null component children as empty with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a null component children as empty with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders a null component children as empty with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a null component children as empty with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders a null component children as empty with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a null component children as empty with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null children as blank with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders null children as blank with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null children as blank with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders null children as blank with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null children as blank with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders null children as blank with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null children as blank with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders null children as blank with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null children as blank with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders null children as blank with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false children as blank with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders false children as blank with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false children as blank with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders false children as blank with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false children as blank with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders false children as blank with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false children as blank with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders false children as blank with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders false children as blank with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders false children as blank with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null and false children together as blank with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders null and false children together as blank with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null and false children together as blank with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders null and false children together as blank with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null and false children together as blank with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders null and false children together as blank with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null and false children together as blank with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders null and false children together as blank with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders null and false children together as blank with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders null and false children together as blank with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders only null and false children as blank with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders only null and false children as blank with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders only null and false children as blank with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders only null and false children as blank with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders only null and false children as blank with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders only null and false children as blank with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders only null and false children as blank with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders only null and false children as blank with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","null, false, and undefined children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children null, false, and undefined children renders only null and false children as blank with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders only null and false children as blank with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders an svg element with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an svg element with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders an svg element with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an svg element with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders an svg element with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an svg element with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders an svg element with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an svg element with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders an svg element with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an svg element with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with an attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders svg child element with an attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with an attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders svg child element with an attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with an attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders svg child element with an attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with an attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders svg child element with an attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with an attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders svg child element with an attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a namespace attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders svg child element with a namespace attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a namespace attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders svg child element with a namespace attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a namespace attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders svg child element with a namespace attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a namespace attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders svg child element with a namespace attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a namespace attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders svg child element with a namespace attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a badly cased alias with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders svg child element with a badly cased alias with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a badly cased alias with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders svg child element with a badly cased alias with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a badly cased alias with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders svg child element with a badly cased alias with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a badly cased alias with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders svg child element with a badly cased alias with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg child element with a badly cased alias with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders svg child element with a badly cased alias with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a tabIndex attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders svg element with a tabIndex attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a tabIndex attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders svg element with a tabIndex attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a tabIndex attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders svg element with a tabIndex attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a tabIndex attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders svg element with a tabIndex attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a tabIndex attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders svg element with a tabIndex attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a badly cased tabIndex attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders svg element with a badly cased tabIndex attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a badly cased tabIndex attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders svg element with a badly cased tabIndex attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a badly cased tabIndex attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders svg element with a badly cased tabIndex attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a badly cased tabIndex attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders svg element with a badly cased tabIndex attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a badly cased tabIndex attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders svg element with a badly cased tabIndex attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a mixed case name with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders svg element with a mixed case name with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a mixed case name with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders svg element with a mixed case name with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a mixed case name with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders svg element with a mixed case name with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a mixed case name with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders svg element with a mixed case name with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders svg element with a mixed case name with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders svg element with a mixed case name with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders a math element with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a math element with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders a math element with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a math element with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders a math element with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a math element with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders a math element with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a math element with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","elements with implicit namespaces"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children elements with implicit namespaces renders a math element with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a math element with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders an img with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an img with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders an img with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an img with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders an img with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an img with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders an img with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an img with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders an img with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an img with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a button with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a button with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a button with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a button with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a button with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a button with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a button with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a button with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a button with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a button with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML number with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with dangerouslySetInnerHTML number with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML number with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with dangerouslySetInnerHTML number with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML number with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with dangerouslySetInnerHTML number with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML number with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with dangerouslySetInnerHTML number with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML number with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with dangerouslySetInnerHTML number with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML boolean with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with dangerouslySetInnerHTML boolean with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML boolean with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with dangerouslySetInnerHTML boolean with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML boolean with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with dangerouslySetInnerHTML boolean with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML boolean with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with dangerouslySetInnerHTML boolean with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML boolean with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with dangerouslySetInnerHTML boolean with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML text string with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with dangerouslySetInnerHTML text string with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML text string with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with dangerouslySetInnerHTML text string with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML text string with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with dangerouslySetInnerHTML text string with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML text string with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with dangerouslySetInnerHTML text string with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML text string with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with dangerouslySetInnerHTML text string with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML element string with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with dangerouslySetInnerHTML element string with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML element string with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with dangerouslySetInnerHTML element string with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML element string with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with dangerouslySetInnerHTML element string with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML element string with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with dangerouslySetInnerHTML element string with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML element string with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with dangerouslySetInnerHTML element string with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML object with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with dangerouslySetInnerHTML object with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML object with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with dangerouslySetInnerHTML object with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML object with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with dangerouslySetInnerHTML object with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML object with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with dangerouslySetInnerHTML object with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML object with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with dangerouslySetInnerHTML object with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to null with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to null with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to null with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to null with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to null with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to null with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to null with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to null with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to null with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to null with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to undefined with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to undefined with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to undefined with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to undefined with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to undefined with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to undefined with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to undefined with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to undefined with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a div with dangerouslySetInnerHTML set to undefined with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with dangerouslySetInnerHTML set to undefined with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a noscript with children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a noscript with children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a noscript with children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a noscript with children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a noscript with children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a noscript with children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a noscript with children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a noscript with children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children renders a noscript with children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a noscript with children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content not starting with \\n with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a newline-eating tag with content not starting with \\n with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content not starting with \\n with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a newline-eating tag with content not starting with \\n with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content not starting with \\n with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a newline-eating tag with content not starting with \\n with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content not starting with \\n with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a newline-eating tag with content not starting with \\n with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content not starting with \\n with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a newline-eating tag with content not starting with \\n with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content starting with \\n with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a newline-eating tag with content starting with \\n with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content starting with \\n with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a newline-eating tag with content starting with \\n with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content starting with \\n with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a newline-eating tag with content starting with \\n with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content starting with \\n with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a newline-eating tag with content starting with \\n with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a newline-eating tag with content starting with \\n with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a newline-eating tag with content starting with \\n with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a normal tag with content starting with \\n with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a normal tag with content starting with \\n with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a normal tag with content starting with \\n with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a normal tag with content starting with \\n with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a normal tag with content starting with \\n with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a normal tag with content starting with \\n with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a normal tag with content starting with \\n with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a normal tag with content starting with \\n with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","newline-eating elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children newline-eating elements renders a normal tag with content starting with \\n with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a normal tag with content starting with \\n with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders stateless components with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders stateless components with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders stateless components with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders stateless components with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders stateless components with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders stateless components with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders stateless components with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders stateless components with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders stateless components with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders stateless components with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders ES6 class components with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders ES6 class components with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders ES6 class components with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders ES6 class components with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders ES6 class components with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders ES6 class components with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders ES6 class components with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders ES6 class components with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders ES6 class components with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders ES6 class components with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders factory components with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders factory components with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders factory components with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders factory components with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders factory components with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders factory components with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders factory components with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders factory components with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children different component implementations renders factory components with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders factory components with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders single child hierarchies of components with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders single child hierarchies of components with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders single child hierarchies of components with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders single child hierarchies of components with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders single child hierarchies of components with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders single child hierarchies of components with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders single child hierarchies of components with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders single child hierarchies of components with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders single child hierarchies of components with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders single child hierarchies of components with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders multi-child hierarchies of components with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders multi-child hierarchies of components with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders multi-child hierarchies of components with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders multi-child hierarchies of components with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders multi-child hierarchies of components with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders multi-child hierarchies of components with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders multi-child hierarchies of components with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders multi-child hierarchies of components with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders multi-child hierarchies of components with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders multi-child hierarchies of components with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with a child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with a child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with a child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with a child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with a child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with multiple children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with multiple children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with multiple children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with multiple children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with multiple children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children separated by whitespace with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with multiple children separated by whitespace with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children separated by whitespace with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with multiple children separated by whitespace with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children separated by whitespace with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with multiple children separated by whitespace with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children separated by whitespace with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with multiple children separated by whitespace with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with multiple children separated by whitespace with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with multiple children separated by whitespace with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a single child surrounded by whitespace with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a div with a single child surrounded by whitespace with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a single child surrounded by whitespace with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a div with a single child surrounded by whitespace with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a single child surrounded by whitespace with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a div with a single child surrounded by whitespace with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a single child surrounded by whitespace with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a div with a single child surrounded by whitespace with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a div with a single child surrounded by whitespace with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a div with a single child surrounded by whitespace with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a composite with multiple children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a composite with multiple children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a composite with multiple children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a composite with multiple children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a composite with multiple children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a composite with multiple children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a composite with multiple children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a composite with multiple children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","component hierarchies"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children component hierarchies renders a composite with multiple children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a composite with multiple children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as single child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders >,<, and & as single child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as single child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders >,<, and & as single child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as single child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders >,<, and & as single child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as single child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders >,<, and & as single child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as single child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders >,<, and & as single child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as multiple children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders >,<, and & as multiple children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as multiple children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders >,<, and & as multiple children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as multiple children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders >,<, and & as multiple children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as multiple children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders >,<, and & as multiple children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","escaping >, <, and &"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children escaping >, <, and & renders >,<, and & as multiple children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders >,<, and & as multiple children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with one text child with special characters with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an element with one text child with special characters with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with one text child with special characters with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an element with one text child with special characters with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with one text child with special characters with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an element with one text child with special characters with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with one text child with special characters with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an element with one text child with special characters with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with one text child with special characters with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an element with one text child with special characters with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with two text children with special characters with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an element with two text children with special characters with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with two text children with special characters with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an element with two text children with special characters with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with two text children with special characters with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an element with two text children with special characters with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with two text children with special characters with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an element with two text children with special characters with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with two text children with special characters with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an element with two text children with special characters with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with an attribute value with special characters with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an element with an attribute value with special characters with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with an attribute value with special characters with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an element with an attribute value with special characters with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with an attribute value with special characters with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an element with an attribute value with special characters with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with an attribute value with special characters with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an element with an attribute value with special characters with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","carriage return and null character"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children carriage return and null character renders an element with an attribute value with special characters with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an element with an attribute value with special characters with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a function returning undefined with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a function returning undefined with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a function returning undefined with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a function returning undefined with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a function returning undefined with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a function returning undefined with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a class returning undefined with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a class returning undefined with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a class returning undefined with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a class returning undefined with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a class returning undefined with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a class returning undefined with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a function returning an object with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a function returning an object with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a function returning an object with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a function returning an object with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a function returning an object with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a function returning an object with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a class returning an object with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a class returning an object with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a class returning an object with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a class returning an object with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering a class returning an object with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a class returning an object with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering top-level object with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering top-level object with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering top-level object with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering top-level object with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","components that throw errors"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children components that throw errors throws when rendering top-level object with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering top-level object with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering object with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering object with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering object with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering object with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering object with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering object with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering null with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering null with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering null with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering null with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering null with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering null with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering undefined with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering undefined with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering undefined with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering undefined with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","elements and children","badly-typed elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration elements and children badly-typed elements throws when rendering undefined with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering undefined with client render on top of bad server markup"}],"endTime":1639318734869,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js","startTime":1639318710355,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMRoot"],"failureMessages":[],"fullName":"ReactDOMRoot createRoot is not exposed in stable build","location":{"column":5,"line":30},"status":"passed","title":"createRoot is not exposed in stable build"}],"endTime":1639318735252,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMRoot-test.js","startTime":1639318734944,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMShorthandCSSPropertyCollision"],"failureMessages":[],"fullName":"ReactDOMShorthandCSSPropertyCollision should warn for conflicting CSS shorthand updates","location":{"column":3,"line":22},"status":"passed","title":"should warn for conflicting CSS shorthand updates"}],"endTime":1639318735561,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMShorthandCSSPropertyCollision-test.js","startTime":1639318735320,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMFizzServer"],"failureMessages":[],"fullName":"ReactDOMFizzServer [GATED, SHOULD FAIL] should call renderToReadableStream","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should call renderToReadableStream"}],"endTime":1639318735801,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMFizzServerBrowser-test.js","startTime":1639318735635,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCompositeComponentNestedState-state"],"failureMessages":[],"fullName":"ReactCompositeComponentNestedState-state should provide up to date values for props","location":{"column":3,"line":21},"status":"passed","title":"should provide up to date values for props"}],"endTime":1639318736097,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactCompositeComponentNestedState-test.js","startTime":1639318735867,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync can use act to flush effects","location":{"column":7,"line":175},"status":"passed","title":"can use act to flush effects"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync flushes effects on every call","location":{"column":7,"line":190},"status":"passed","title":"flushes effects on every call"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync should keep flushing effects until they're done","location":{"column":7,"line":226},"status":"passed","title":"should keep flushing effects until they're done"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync should flush effects only on exiting the outermost act","location":{"column":7,"line":244},"status":"passed","title":"should flush effects only on exiting the outermost act"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync warns if a setState is called outside of act(...)","location":{"column":7,"line":264},"status":"passed","title":"warns if a setState is called outside of act(...)"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync","fake timers"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync fake timers lets a ticker update","location":{"column":9,"line":290},"status":"passed","title":"lets a ticker update"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync","fake timers"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync fake timers can use the async version to catch microtasks","location":{"column":9,"line":312},"status":"passed","title":"can use the async version to catch microtasks"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync","fake timers"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync fake timers can handle cascading promises with fake timers","location":{"column":9,"line":334},"status":"passed","title":"can handle cascading promises with fake timers"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync","fake timers"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync fake timers flushes immediate re-renders with act","location":{"column":9,"line":357},"status":"passed","title":"flushes immediate re-renders with act"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync warns if you return a value inside act","location":{"column":7,"line":386},"status":"passed","title":"warns if you return a value inside act"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","sync"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode sync warns if you try to await a sync .act call","location":{"column":7,"line":401},"status":"passed","title":"warns if you try to await a sync .act call"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","asynchronous tests"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode asynchronous tests works with timeouts","location":{"column":7,"line":412},"status":"passed","title":"works with timeouts"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","asynchronous tests"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode asynchronous tests flushes microtasks before exiting","location":{"column":7,"line":436},"status":"passed","title":"flushes microtasks before exiting"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","asynchronous tests"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode asynchronous tests warns if you do not await an act call","location":{"column":7,"line":458},"status":"passed","title":"warns if you do not await an act call"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","asynchronous tests"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode asynchronous tests warns if you try to interleave multiple act calls","location":{"column":7,"line":471},"status":"passed","title":"warns if you try to interleave multiple act calls"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","asynchronous tests"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode asynchronous tests async commits and effects are guaranteed to be flushed","location":{"column":7,"line":490},"status":"passed","title":"async commits and effects are guaranteed to be flushed"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","asynchronous tests"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode asynchronous tests can handle cascading promises","location":{"column":7,"line":515},"status":"passed","title":"can handle cascading promises"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","interaction tracing"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode interaction tracing should correctly trace interactions for sync roots","location":{"column":9,"line":542},"status":"passed","title":"should correctly trace interactions for sync roots"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","error propagation"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode error propagation propagates errors - sync","location":{"column":7,"line":622},"status":"passed","title":"propagates errors - sync"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","error propagation"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode error propagation should propagate errors from effects - sync","location":{"column":7,"line":636},"status":"passed","title":"should propagate errors from effects - sync"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","error propagation"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode error propagation propagates errors - async","location":{"column":7,"line":657},"status":"passed","title":"propagates errors - async"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","error propagation"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode error propagation should cleanup after errors - sync","location":{"column":7,"line":672},"status":"passed","title":"should cleanup after errors - sync"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","error propagation"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode error propagation should cleanup after errors - async","location":{"column":7,"line":697},"status":"passed","title":"should cleanup after errors - async"},{"ancestorTitles":["ReactTestUtils.act()","legacy mode","warn in prod mode"],"failureMessages":[],"fullName":"ReactTestUtils.act() legacy mode warn in prod mode warns if you try to use act() in prod mode","location":{"column":7,"line":819},"status":"passed","title":"warns if you try to use act() in prod mode"},{"ancestorTitles":["ReactTestUtils.act()","unacted effects"],"failureMessages":[],"fullName":"ReactTestUtils.act() unacted effects does not warn in legacy mode","location":{"column":5,"line":108},"status":"passed","title":"does not warn in legacy mode"},{"ancestorTitles":["ReactTestUtils.act()","unacted effects"],"failureMessages":[],"fullName":"ReactTestUtils.act() unacted effects warns in strict mode","location":{"column":5,"line":114},"status":"passed","title":"warns in strict mode"},{"ancestorTitles":["ReactTestUtils.act()","unacted effects"],"failureMessages":[],"fullName":"ReactTestUtils.act() unacted effects [GATED, SHOULD FAIL] warns in blocking mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns in blocking mode"},{"ancestorTitles":["ReactTestUtils.act()","unacted effects"],"failureMessages":[],"fullName":"ReactTestUtils.act() unacted effects [GATED, SHOULD FAIL] warns in concurrent mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns in concurrent mode"}],"endTime":1639318738505,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactTestUtilsAct-test.js","startTime":1639318736163,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactMockedComponent"],"failureMessages":[],"fullName":"ReactMockedComponent should allow a mocked component to be rendered in dev","location":{"column":3,"line":33},"status":"passed","title":"should allow a mocked component to be rendered in dev"},{"ancestorTitles":["ReactMockedComponent"],"failureMessages":[],"fullName":"ReactMockedComponent should allow a mocked component to be updated in dev","location":{"column":3,"line":44},"status":"passed","title":"should allow a mocked component to be updated in dev"},{"ancestorTitles":["ReactMockedComponent"],"failureMessages":[],"fullName":"ReactMockedComponent should allow a mocked component to be rendered in dev (SSR)","location":{"column":3,"line":62},"status":"passed","title":"should allow a mocked component to be rendered in dev (SSR)"}],"endTime":1639318738792,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactMockedComponent-test.js","startTime":1639318738571,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactEventIndependence"],"failureMessages":[],"fullName":"ReactEventIndependence does not crash with other react inside","location":{"column":3,"line":23},"status":"passed","title":"does not crash with other react inside"},{"ancestorTitles":["ReactEventIndependence"],"failureMessages":[],"fullName":"ReactEventIndependence does not crash with other react outside","location":{"column":3,"line":45},"status":"passed","title":"does not crash with other react outside"},{"ancestorTitles":["ReactEventIndependence"],"failureMessages":[],"fullName":"ReactEventIndependence does not when event fired on unmounted tree","location":{"column":3,"line":62},"status":"passed","title":"does not when event fired on unmounted tree"}],"endTime":1639318739207,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactEventIndependence-test.js","startTime":1639318738869,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes removes values null and undefined","location":{"column":5,"line":39},"status":"passed","title":"removes values null and undefined"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes changes values true, false to null, and also warns once","location":{"column":5,"line":44},"status":"passed","title":"changes values true, false to null, and also warns once"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes removes unknown attributes that were rendered but are now missing","location":{"column":5,"line":54},"status":"passed","title":"removes unknown attributes that were rendered but are now missing"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes passes through strings","location":{"column":5,"line":62},"status":"passed","title":"passes through strings"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes coerces numbers to strings","location":{"column":5,"line":66},"status":"passed","title":"coerces numbers to strings"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes coerces NaN to strings and warns","location":{"column":5,"line":73},"status":"passed","title":"coerces NaN to strings and warns"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes coerces objects to strings and warns","location":{"column":5,"line":81},"status":"passed","title":"coerces objects to strings and warns"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes removes symbols and warns","location":{"column":5,"line":92},"status":"passed","title":"removes symbols and warns"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes removes functions and warns","location":{"column":5,"line":101},"status":"passed","title":"removes functions and warns"},{"ancestorTitles":["ReactDOM unknown attribute","unknown attributes"],"failureMessages":[],"fullName":"ReactDOM unknown attribute unknown attributes allows camelCase unknown attributes and warns","location":{"column":5,"line":113},"status":"passed","title":"allows camelCase unknown attributes and warns"}],"endTime":1639318740092,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMAttribute-test.js","startTime":1639318739282,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactMultiChild","reconciliation"],"failureMessages":[],"fullName":"ReactMultiChild reconciliation should update children when possible","location":{"column":5,"line":23},"status":"passed","title":"should update children when possible"},{"ancestorTitles":["ReactMultiChild","reconciliation"],"failureMessages":[],"fullName":"ReactMultiChild reconciliation should replace children with different constructors","location":{"column":5,"line":66},"status":"passed","title":"should replace children with different constructors"},{"ancestorTitles":["ReactMultiChild","reconciliation"],"failureMessages":[],"fullName":"ReactMultiChild reconciliation should NOT replace children with different owners","location":{"column":5,"line":104},"status":"passed","title":"should NOT replace children with different owners"},{"ancestorTitles":["ReactMultiChild","reconciliation"],"failureMessages":[],"fullName":"ReactMultiChild reconciliation should replace children with different keys","location":{"column":5,"line":143},"status":"passed","title":"should replace children with different keys"},{"ancestorTitles":["ReactMultiChild","reconciliation"],"failureMessages":[],"fullName":"ReactMultiChild reconciliation should warn for duplicated array keys with component stack info","location":{"column":5,"line":181},"status":"passed","title":"should warn for duplicated array keys with component stack info"},{"ancestorTitles":["ReactMultiChild","reconciliation"],"failureMessages":[],"fullName":"ReactMultiChild reconciliation should warn for duplicated iterable keys with component stack info","location":{"column":5,"line":220},"status":"passed","title":"should warn for duplicated iterable keys with component stack info"},{"ancestorTitles":["ReactMultiChild"],"failureMessages":[],"fullName":"ReactMultiChild should warn for using maps as children with owner info","location":{"column":3,"line":281},"status":"passed","title":"should warn for using maps as children with owner info"},{"ancestorTitles":["ReactMultiChild"],"failureMessages":[],"fullName":"ReactMultiChild should warn for using generators as children","location":{"column":3,"line":305},"status":"passed","title":"should warn for using generators as children"},{"ancestorTitles":["ReactMultiChild"],"failureMessages":[],"fullName":"ReactMultiChild should not warn for using generators in legacy iterables","location":{"column":3,"line":326},"status":"passed","title":"should not warn for using generators in legacy iterables"},{"ancestorTitles":["ReactMultiChild"],"failureMessages":[],"fullName":"ReactMultiChild should not warn for using generators in modern iterables","location":{"column":3,"line":346},"status":"passed","title":"should not warn for using generators in modern iterables"},{"ancestorTitles":["ReactMultiChild"],"failureMessages":[],"fullName":"ReactMultiChild should reorder bailed-out children","location":{"column":3,"line":366},"status":"passed","title":"should reorder bailed-out children"},{"ancestorTitles":["ReactMultiChild"],"failureMessages":[],"fullName":"ReactMultiChild prepares new children before unmounting old","location":{"column":3,"line":404},"status":"passed","title":"prepares new children before unmounting old"}],"endTime":1639318741178,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactMultiChild-test.js","startTime":1639318740159,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries does not swallow exceptions on mounting without boundaries","location":{"column":3,"line":705},"status":"passed","title":"does not swallow exceptions on mounting without boundaries"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries does not swallow exceptions on updating without boundaries","location":{"column":3,"line":722},"status":"passed","title":"does not swallow exceptions on updating without boundaries"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries does not swallow exceptions on unmounting without boundaries","location":{"column":3,"line":742},"status":"passed","title":"does not swallow exceptions on unmounting without boundaries"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries prevents errors from leaking into other roots","location":{"column":3,"line":750},"status":"passed","title":"prevents errors from leaking into other roots"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries logs a single error when using error boundary","location":{"column":3,"line":787},"status":"passed","title":"logs a single error when using error boundary"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries renders an error state if child throws in render","location":{"column":3,"line":819},"status":"passed","title":"renders an error state if child throws in render"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries renders an error state if child throws in constructor","location":{"column":3,"line":846},"status":"passed","title":"renders an error state if child throws in constructor"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries renders an error state if child throws in componentWillMount","location":{"column":3,"line":871},"status":"passed","title":"renders an error state if child throws in componentWillMount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries renders an error state if context provider throws in componentWillMount","location":{"column":3,"line":897},"status":"passed","title":"renders an error state if context provider throws in componentWillMount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries renders an error state if module-style context provider throws in componentWillMount","location":{"column":5,"line":922},"status":"passed","title":"renders an error state if module-style context provider throws in componentWillMount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries mounts the error message if mounting fails","location":{"column":3,"line":961},"status":"passed","title":"mounts the error message if mounting fails"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries propagates errors on retry on mounting","location":{"column":3,"line":997},"status":"passed","title":"propagates errors on retry on mounting"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries propagates errors inside boundary during componentWillMount","location":{"column":3,"line":1036},"status":"passed","title":"propagates errors inside boundary during componentWillMount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries propagates errors inside boundary while rendering error state","location":{"column":3,"line":1062},"status":"passed","title":"propagates errors inside boundary while rendering error state"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries does not call componentWillUnmount when aborting initial mount","location":{"column":3,"line":1098},"status":"passed","title":"does not call componentWillUnmount when aborting initial mount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries resets callback refs if mounting aborts","location":{"column":3,"line":1136},"status":"passed","title":"resets callback refs if mounting aborts"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries resets object refs if mounting aborts","location":{"column":3,"line":1175},"status":"passed","title":"resets object refs if mounting aborts"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries successfully mounts if no error occurs","location":{"column":3,"line":1210},"status":"passed","title":"successfully mounts if no error occurs"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches if child throws in constructor during update","location":{"column":3,"line":1230},"status":"passed","title":"catches if child throws in constructor during update"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches if child throws in componentWillMount during update","location":{"column":3,"line":1274},"status":"passed","title":"catches if child throws in componentWillMount during update"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches if child throws in componentWillReceiveProps during update","location":{"column":3,"line":1320},"status":"passed","title":"catches if child throws in componentWillReceiveProps during update"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches if child throws in componentWillUpdate during update","location":{"column":3,"line":1362},"status":"passed","title":"catches if child throws in componentWillUpdate during update"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches if child throws in render during update","location":{"column":3,"line":1404},"status":"passed","title":"catches if child throws in render during update"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries keeps refs up-to-date during updates","location":{"column":3,"line":1450},"status":"passed","title":"keeps refs up-to-date during updates"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries recovers from componentWillUnmount errors on update","location":{"column":3,"line":1511},"status":"passed","title":"recovers from componentWillUnmount errors on update"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries recovers from nested componentWillUnmount errors on update","location":{"column":3,"line":1566},"status":"passed","title":"recovers from nested componentWillUnmount errors on update"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries picks the right boundary when handling unmounting errors","location":{"column":3,"line":1625},"status":"passed","title":"picks the right boundary when handling unmounting errors"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries can recover from error state","location":{"column":3,"line":1691},"status":"passed","title":"can recover from error state"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries can update multiple times in error state","location":{"column":3,"line":1738},"status":"passed","title":"can update multiple times in error state"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries doesn't get into inconsistent state during removals","location":{"column":3,"line":1762},"status":"passed","title":"doesn't get into inconsistent state during removals"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries doesn't get into inconsistent state during additions","location":{"column":3,"line":1781},"status":"passed","title":"doesn't get into inconsistent state during additions"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries doesn't get into inconsistent state during reorders","location":{"column":3,"line":1799},"status":"passed","title":"doesn't get into inconsistent state during reorders"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches errors originating downstream","location":{"column":3,"line":1847},"status":"passed","title":"catches errors originating downstream"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches errors in componentDidMount","location":{"column":3,"line":1888},"status":"passed","title":"catches errors in componentDidMount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches errors in componentDidUpdate","location":{"column":3,"line":1946},"status":"passed","title":"catches errors in componentDidUpdate"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches errors in useEffect","location":{"column":3,"line":1984},"status":"passed","title":"catches errors in useEffect"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries catches errors in useLayoutEffect","location":{"column":3,"line":2018},"status":"passed","title":"catches errors in useLayoutEffect"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries propagates errors inside boundary during componentDidMount","location":{"column":3,"line":2045},"status":"passed","title":"propagates errors inside boundary during componentDidMount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries calls static getDerivedStateFromError for each error that is captured","location":{"column":3,"line":2081},"status":"passed","title":"calls static getDerivedStateFromError for each error that is captured"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries discards a bad root if the root component fails","location":{"column":3,"line":2181},"status":"passed","title":"discards a bad root if the root component fails"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries renders empty output if error boundary does not handle the error","location":{"column":3,"line":2212},"status":"passed","title":"renders empty output if error boundary does not handle the error"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries passes first error when two errors happen in commit","location":{"column":3,"line":2242},"status":"passed","title":"passes first error when two errors happen in commit"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries propagates uncaught error inside unbatched initial mount","location":{"column":3,"line":2281},"status":"passed","title":"propagates uncaught error inside unbatched initial mount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries handles errors that occur in before-mutation commit hook","location":{"column":3,"line":2293},"status":"passed","title":"handles errors that occur in before-mutation commit hook"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries should warn if an error boundary with only componentDidCatch does not update state","location":{"column":3,"line":2333},"status":"passed","title":"should warn if an error boundary with only componentDidCatch does not update state"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries should call both componentDidCatch and getDerivedStateFromError if both exist on a component","location":{"column":3,"line":2364},"status":"passed","title":"should call both componentDidCatch and getDerivedStateFromError if both exist on a component"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries should catch errors from invariants in completion phase","location":{"column":3,"line":2397},"status":"passed","title":"should catch errors from invariants in completion phase"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries should catch errors from errors in the throw phase from boundaries","location":{"column":3,"line":2412},"status":"passed","title":"should catch errors from errors in the throw phase from boundaries"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries should protect errors from errors in the stack generation","location":{"column":3,"line":2443},"status":"passed","title":"should protect errors from errors in the stack generation"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries [GATED, SHOULD FAIL] catches errors thrown in componentWillUnmount","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] catches errors thrown in componentWillUnmount"},{"ancestorTitles":["ReactErrorBoundaries"],"failureMessages":[],"fullName":"ReactErrorBoundaries [GATED, SHOULD FAIL] catches errors thrown while detaching refs","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] catches errors thrown while detaching refs"}],"endTime":1639318745515,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactErrorBoundaries-test.internal.js","startTime":1639318741252,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] hydrates a parent even if a child Suspense boundary is blocked","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates a parent even if a child Suspense boundary is blocked"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] calls the hydration callbacks after hydration or deletion","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] calls the hydration callbacks after hydration or deletion"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] calls the onDeleted hydration callback if the parent gets deleted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] calls the onDeleted hydration callback if the parent gets deleted"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] warns and replaces the boundary content in legacy mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns and replaces the boundary content in legacy mode"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] can insert siblings before the dehydrated boundary","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can insert siblings before the dehydrated boundary"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] can delete the dehydrated boundary before it is hydrated","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can delete the dehydrated boundary before it is hydrated"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] blocks updates to hydrate the content first if props have changed","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] blocks updates to hydrate the content first if props have changed"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] blocks updates to hydrate the content first if props changed at idle priority","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] blocks updates to hydrate the content first if props changed at idle priority"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] shows the fallback if props have changed before hydration completes and is still suspended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows the fallback if props have changed before hydration completes and is still suspended"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] shows the fallback of the outer if fallback is missing","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows the fallback of the outer if fallback is missing"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] clears nested suspense boundaries if they did not hydrate yet","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] clears nested suspense boundaries if they did not hydrate yet"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] hydrates first if props changed but we are able to resolve within a timeout","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates first if props changed but we are able to resolve within a timeout"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] warns but works if setState is called before commit in a dehydrated component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns but works if setState is called before commit in a dehydrated component"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] blocks the update to hydrate first if context has changed","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] blocks the update to hydrate first if context has changed"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] shows the fallback if context has changed before hydration completes and is still suspended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows the fallback if context has changed before hydration completes and is still suspended"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] replaces the fallback with client content if it is not rendered by the server","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] replaces the fallback with client content if it is not rendered by the server"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] replaces the fallback within the suspended time if there is a nested suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] replaces the fallback within the suspended time if there is a nested suspense"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] replaces the fallback within the suspended time if there is a nested suspense in a nested suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] replaces the fallback within the suspended time if there is a nested suspense in a nested suspense"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] waits for pending content to come in from the server and then hydrates it","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] waits for pending content to come in from the server and then hydrates it"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] handles an error on the client if the server ends up erroring","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handles an error on the client if the server ends up erroring"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] shows inserted items in a SuspenseList before content is hydrated","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows inserted items in a SuspenseList before content is hydrated"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] shows is able to hydrate boundaries even if others in a list are pending","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows is able to hydrate boundaries even if others in a list are pending"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] shows inserted items before pending in a SuspenseList as fallbacks","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows inserted items before pending in a SuspenseList as fallbacks"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] clears server boundaries when SuspenseList runs out of time hydrating","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] clears server boundaries when SuspenseList runs out of time hydrating"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] clears server boundaries when SuspenseList suspends last row hydrating","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] clears server boundaries when SuspenseList suspends last row hydrating"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] can client render nested boundaries","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can client render nested boundaries"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] can hydrate TWO suspense boundaries","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can hydrate TWO suspense boundaries"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] regenerates if it cannot hydrate before changes to props/context expire","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] regenerates if it cannot hydrate before changes to props/context expire"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] does not invoke an event on a hydrated node until it commits","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not invoke an event on a hydrated node until it commits"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] does not invoke an event on a hydrated event handle until it commits","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not invoke an event on a hydrated event handle until it commits"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] invokes discrete events on nested suspense boundaries in a root (legacy system)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] invokes discrete events on nested suspense boundaries in a root (legacy system)"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] invokes discrete events on nested suspense boundaries in a root (createEventHandle)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] invokes discrete events on nested suspense boundaries in a root (createEventHandle)"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] does not invoke the parent of dehydrated boundary event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not invoke the parent of dehydrated boundary event"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] does not invoke an event on a parent tree when a subtree is dehydrated","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not invoke an event on a parent tree when a subtree is dehydrated"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] blocks only on the last continuous event (legacy system)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] blocks only on the last continuous event (legacy system)"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] finishes normal pri work before continuing to hydrate a retry","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] finishes normal pri work before continuing to hydrate a retry"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] regression test: does not overfire non-bubbling browser events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] regression test: does not overfire non-bubbling browser events"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] hydrates a hidden subtree outside of a Suspense boundary","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates a hidden subtree outside of a Suspense boundary"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] renders a hidden LegacyHidden component inside a Suspense boundary","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] renders a hidden LegacyHidden component inside a Suspense boundary"},{"ancestorTitles":["ReactDOMServerPartialHydration"],"failureMessages":[],"fullName":"ReactDOMServerPartialHydration [GATED, SHOULD FAIL] renders a visible LegacyHidden component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] renders a visible LegacyHidden component"}],"endTime":1639318748503,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerPartialHydration-test.internal.js","startTime":1639318745581,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders basic render with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders basic render with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders basic render with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders basic render with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders basic render with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders basic render with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders basic render with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders basic render with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders basic render with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders basic render with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders lazy state initialization with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders lazy state initialization with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders lazy state initialization with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders lazy state initialization with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders lazy state initialization with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders lazy state initialization with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders lazy state initialization with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders lazy state initialization with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders lazy state initialization with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders lazy state initialization with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState does not trigger a re-renders when updater is invoked outside current render function","location":{"column":5,"line":122},"status":"passed","title":"does not trigger a re-renders when updater is invoked outside current render function"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState throws when rendering if used inside a class component with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if used inside a class component with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState throws when rendering if used inside a class component with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if used inside a class component with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState throws when rendering if used inside a class component with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if used inside a class component with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders multiple times when an updater is called with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders multiple times when an updater is called with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders multiple times when an updater is called with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders multiple times when an updater is called with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders multiple times when an updater is called with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders multiple times when an updater is called with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders multiple times when an updater is called with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders multiple times when an updater is called with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders multiple times when an updater is called with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders multiple times when an updater is called with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders until there are no more new updates with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders until there are no more new updates with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders until there are no more new updates with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders until there are no more new updates with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders until there are no more new updates with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders until there are no more new updates with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders until there are no more new updates with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders until there are no more new updates with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState renders until there are no more new updates with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders until there are no more new updates with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState throws when rendering after too many iterations with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering after too many iterations with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState throws when rendering after too many iterations with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering after too many iterations with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useState"],"failureMessages":[],"fullName":"ReactDOMServerHooks useState throws when rendering after too many iterations with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering after too many iterations with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders with initial state with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with initial state with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders with initial state with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with initial state with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders with initial state with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with initial state with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders with initial state with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with initial state with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders with initial state with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with initial state with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders lazy initialization with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders lazy initialization with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders lazy initialization with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders lazy initialization with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders lazy initialization with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders lazy initialization with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders lazy initialization with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders lazy initialization with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders lazy initialization with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders lazy initialization with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders multiple times when updates happen during the render phase with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders multiple times when updates happen during the render phase with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders multiple times when updates happen during the render phase with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders multiple times when updates happen during the render phase with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders multiple times when updates happen during the render phase with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders multiple times when updates happen during the render phase with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders multiple times when updates happen during the render phase with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders multiple times when updates happen during the render phase with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders multiple times when updates happen during the render phase with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders multiple times when updates happen during the render phase with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders using reducer passed at time of render, not time of dispatch with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders using reducer passed at time of render, not time of dispatch with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders using reducer passed at time of render, not time of dispatch with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders using reducer passed at time of render, not time of dispatch with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders using reducer passed at time of render, not time of dispatch with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders using reducer passed at time of render, not time of dispatch with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders using reducer passed at time of render, not time of dispatch with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders using reducer passed at time of render, not time of dispatch with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useReducer"],"failureMessages":[],"fullName":"ReactDOMServerHooks useReducer renders using reducer passed at time of render, not time of dispatch with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders using reducer passed at time of render, not time of dispatch with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders basic render with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders basic render with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders basic render with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders basic render with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders basic render with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders basic render with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders basic render with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders basic render with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders basic render with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders basic render with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders if no inputs are provided with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders if no inputs are provided with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders if no inputs are provided with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders if no inputs are provided with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders if no inputs are provided with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders if no inputs are provided with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders if no inputs are provided with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders if no inputs are provided with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders if no inputs are provided with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders if no inputs are provided with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders multiple times when updates happen during the render phase with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders multiple times when updates happen during the render phase with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders multiple times when updates happen during the render phase with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders multiple times when updates happen during the render phase with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders multiple times when updates happen during the render phase with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders multiple times when updates happen during the render phase with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders multiple times when updates happen during the render phase with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders multiple times when updates happen during the render phase with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders multiple times when updates happen during the render phase with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders multiple times when updates happen during the render phase with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders should only invoke the memoized function when the inputs change with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should only invoke the memoized function when the inputs change with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders should only invoke the memoized function when the inputs change with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should only invoke the memoized function when the inputs change with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders should only invoke the memoized function when the inputs change with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should only invoke the memoized function when the inputs change with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders should only invoke the memoized function when the inputs change with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should only invoke the memoized function when the inputs change with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders should only invoke the memoized function when the inputs change with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should only invoke the memoized function when the inputs change with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useState inside useMemo with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with a warning for useState inside useMemo with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useState inside useMemo with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with a warning for useState inside useMemo with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useState inside useMemo with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with a warning for useState inside useMemo with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useState inside useMemo with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with a warning for useState inside useMemo with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useState inside useMemo with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with a warning for useState inside useMemo with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo throws when rendering with a warning for useRef inside useReducer with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering with a warning for useRef inside useReducer with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo throws when rendering with a warning for useRef inside useReducer with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering with a warning for useRef inside useReducer with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo throws when rendering with a warning for useRef inside useReducer with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering with a warning for useRef inside useReducer with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useRef inside useState with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with a warning for useRef inside useState with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useRef inside useState with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with a warning for useRef inside useState with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useRef inside useState with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with a warning for useRef inside useState with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useRef inside useState with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with a warning for useRef inside useState with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useMemo"],"failureMessages":[],"fullName":"ReactDOMServerHooks useMemo renders with a warning for useRef inside useState with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with a warning for useRef inside useState with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders basic render with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders basic render with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders basic render with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders basic render with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders basic render with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders basic render with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders basic render with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders basic render with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders basic render with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders basic render with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders multiple times when updates happen during the render phase with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders multiple times when updates happen during the render phase with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders multiple times when updates happen during the render phase with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders multiple times when updates happen during the render phase with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders multiple times when updates happen during the render phase with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders multiple times when updates happen during the render phase with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders multiple times when updates happen during the render phase with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders multiple times when updates happen during the render phase with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders multiple times when updates happen during the render phase with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders multiple times when updates happen during the render phase with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders always return the same reference through multiple renders with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders always return the same reference through multiple renders with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders always return the same reference through multiple renders with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders always return the same reference through multiple renders with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders always return the same reference through multiple renders with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders always return the same reference through multiple renders with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders always return the same reference through multiple renders with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders always return the same reference through multiple renders with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useRef"],"failureMessages":[],"fullName":"ReactDOMServerHooks useRef renders always return the same reference through multiple renders with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders always return the same reference through multiple renders with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useEffect"],"failureMessages":[],"fullName":"ReactDOMServerHooks useEffect renders should ignore effects on the server with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should ignore effects on the server with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useEffect"],"failureMessages":[],"fullName":"ReactDOMServerHooks useEffect renders should ignore effects on the server with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should ignore effects on the server with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useEffect"],"failureMessages":[],"fullName":"ReactDOMServerHooks useEffect renders should ignore effects on the server with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should ignore effects on the server with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useEffect"],"failureMessages":[],"fullName":"ReactDOMServerHooks useEffect renders should ignore effects on the server with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should ignore effects on the server with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useEffect"],"failureMessages":[],"fullName":"ReactDOMServerHooks useEffect renders should ignore effects on the server with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should ignore effects on the server with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useEffect"],"failureMessages":[],"fullName":"ReactDOMServerHooks useEffect verifies yields in order","location":{"column":5,"line":557},"status":"passed","title":"verifies yields in order"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should not invoke the passed callbacks with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should not invoke the passed callbacks with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should not invoke the passed callbacks with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should not invoke the passed callbacks with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should not invoke the passed callbacks with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should not invoke the passed callbacks with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should not invoke the passed callbacks with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should not invoke the passed callbacks with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should not invoke the passed callbacks with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should not invoke the passed callbacks with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should support render time callbacks with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should support render time callbacks with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should support render time callbacks with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should support render time callbacks with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should support render time callbacks with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should support render time callbacks with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should support render time callbacks with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should support render time callbacks with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should support render time callbacks with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should support render time callbacks with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should only change the returned reference when the inputs change with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should only change the returned reference when the inputs change with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should only change the returned reference when the inputs change with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should only change the returned reference when the inputs change with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should only change the returned reference when the inputs change with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should only change the returned reference when the inputs change with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should only change the returned reference when the inputs change with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should only change the returned reference when the inputs change with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useCallback"],"failureMessages":[],"fullName":"ReactDOMServerHooks useCallback renders should only change the returned reference when the inputs change with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should only change the returned reference when the inputs change with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useImperativeHandle"],"failureMessages":[],"fullName":"ReactDOMServerHooks useImperativeHandle should not be invoked on the server","location":{"column":5,"line":625},"status":"passed","title":"should not be invoked on the server"},{"ancestorTitles":["ReactDOMServerHooks","useLayoutEffect"],"failureMessages":[],"fullName":"ReactDOMServerHooks useLayoutEffect should warn when invoked during render","location":{"column":5,"line":645},"status":"passed","title":"should warn when invoked during render"},{"ancestorTitles":["ReactDOMServerHooks","useContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks useContext throws when rendering if used inside a class component with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if used inside a class component with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks useContext throws when rendering if used inside a class component with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if used inside a class component with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks useContext throws when rendering if used inside a class component with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if used inside a class component with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders can use the same context multiple times in the same function with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders can use the same context multiple times in the same function with server string render"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders can use the same context multiple times in the same function with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders can use the same context multiple times in the same function with server stream render"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders can use the same context multiple times in the same function with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders can use the same context multiple times in the same function with clean client render"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders can use the same context multiple times in the same function with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders can use the same context multiple times in the same function with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders can use the same context multiple times in the same function with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders can use the same context multiple times in the same function with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders warns when bitmask is passed to useContext with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders warns when bitmask is passed to useContext with server string render"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders warns when bitmask is passed to useContext with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders warns when bitmask is passed to useContext with server stream render"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders warns when bitmask is passed to useContext with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders warns when bitmask is passed to useContext with clean client render"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders warns when bitmask is passed to useContext with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders warns when bitmask is passed to useContext with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders warns when bitmask is passed to useContext with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders warns when bitmask is passed to useContext with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","useDebugValue"],"failureMessages":[],"fullName":"ReactDOMServerHooks useDebugValue renders is a noop with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders is a noop with server string render"},{"ancestorTitles":["ReactDOMServerHooks","useDebugValue"],"failureMessages":[],"fullName":"ReactDOMServerHooks useDebugValue renders is a noop with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders is a noop with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useDebugValue"],"failureMessages":[],"fullName":"ReactDOMServerHooks useDebugValue renders is a noop with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders is a noop with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","useDebugValue"],"failureMessages":[],"fullName":"ReactDOMServerHooks useDebugValue renders is a noop with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders is a noop with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useDebugValue"],"failureMessages":[],"fullName":"ReactDOMServerHooks useDebugValue renders is a noop with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders is a noop with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders can read the same context multiple times in the same function with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders can read the same context multiple times in the same function with server string render"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders can read the same context multiple times in the same function with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders can read the same context multiple times in the same function with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders can read the same context multiple times in the same function with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders can read the same context multiple times in the same function with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders can read the same context multiple times in the same function with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders can read the same context multiple times in the same function with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders can read the same context multiple times in the same function with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders can read the same context multiple times in the same function with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders with a warning inside useMemo and useReducer with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with a warning inside useMemo and useReducer with server string render"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders with a warning inside useMemo and useReducer with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with a warning inside useMemo and useReducer with server stream render"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders with a warning inside useMemo and useReducer with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with a warning inside useMemo and useReducer with clean client render"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders with a warning inside useMemo and useReducer with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with a warning inside useMemo and useReducer with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerHooks","readContext"],"failureMessages":[],"fullName":"ReactDOMServerHooks readContext renders with a warning inside useMemo and useReducer with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with a warning inside useMemo and useReducer with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerHooks"],"failureMessages":[],"fullName":"ReactDOMServerHooks renders successfully after a component using hooks throws an error","location":{"column":3,"line":872},"status":"passed","title":"renders successfully after a component using hooks throws an error"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] generates unique ids for server string render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] generates unique ids for server string render"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] generates unique ids for server stream render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] generates unique ids for server stream render"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] generates unique ids for client render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] generates unique ids for client render"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] generates unique ids for client render on good server markup","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] generates unique ids for client render on good server markup"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier does not change id even if the component updates during client render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier does not change id even if the component updates during client render"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier identifierPrefix works for server renderer and does not clash","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier identifierPrefix works for server renderer and does not clash"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier identifierPrefix works for multiple reads on a streaming server renderer","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier identifierPrefix works for multiple reads on a streaming server renderer"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when, after hydration, a new component that uses the ID is rendered","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when, after hydration, a new component that uses the ID is rendered"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when, after hydration, a new component that uses the ID is rendered for legacy","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when, after hydration, a new component that uses the ID is rendered for legacy"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: ID is not used during hydration but is used in an update","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: ID is not used during hydration but is used in an update"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: ID is not used during hydration but is used in an update in legacy","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: ID is not used during hydration but is used in an update in legacy"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: flushSync","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: flushSync"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: children with id hydrates before other children if ID updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: children with id hydrates before other children if ID updates"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when part of the DOM tree is server rendered and part is client rendered","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when part of the DOM tree is server rendered and part is client rendered"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warn when there is a hydration error","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warn when there is a hydration error"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when part of the DOM tree is server rendered and part is client rendered","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier: IDs match when part of the DOM tree is server rendered and part is client rendered"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warn when there is a hydration error","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warn when there is a hydration error"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warns when there is a hydration error and we are using ID as a string","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warns when there is a hydration error and we are using ID as a string"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warns when there is a hydration error and we are using ID as a string","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warns when there is a hydration error and we are using ID as a string"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to use the result as a string in a child component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to use the result as a string in a child component"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to use the result as a string","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to use the result as a string"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to use the result as a string in a child component wrapped in a Suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to use the result as a string in a child component wrapped in a Suspense"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to add the result as a number in a child component wrapped in a Suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier warns if you try to add the result as a number in a child component wrapped in a Suspense"},{"ancestorTitles":["ReactDOMServerHooks","useOpaqueIdentifier"],"failureMessages":[],"fullName":"ReactDOMServerHooks useOpaqueIdentifier [GATED, SHOULD FAIL] useOpaqueIdentifier with two opaque identifiers on the same page","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] useOpaqueIdentifier with two opaque identifiers on the same page"}],"endTime":1639318762100,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationHooks-test.js","startTime":1639318748571,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect ES6 Class to ES6 Class","location":{"column":9,"line":71},"status":"passed","title":"should reconnect ES6 Class to ES6 Class"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect Pure Component to ES6 Class","location":{"column":9,"line":77},"status":"passed","title":"should reconnect Pure Component to ES6 Class"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect Bare Element to ES6 Class","location":{"column":9,"line":83},"status":"passed","title":"should reconnect Bare Element to ES6 Class"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect ES6 Class to Pure Component","location":{"column":9,"line":86},"status":"passed","title":"should reconnect ES6 Class to Pure Component"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect Pure Component to Pure Component","location":{"column":9,"line":92},"status":"passed","title":"should reconnect Pure Component to Pure Component"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect Bare Element to Pure Component","location":{"column":9,"line":98},"status":"passed","title":"should reconnect Bare Element to Pure Component"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect ES6 Class to Bare Element","location":{"column":9,"line":101},"status":"passed","title":"should reconnect ES6 Class to Bare Element"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect Pure Component to Bare Element","location":{"column":9,"line":104},"status":"passed","title":"should reconnect Pure Component to Bare Element"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements","reconnecting different component implementations"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements reconnecting different component implementations should reconnect Bare Element to Bare Element","location":{"column":9,"line":107},"status":"passed","title":"should reconnect Bare Element to Bare Element"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements should error reconnecting different element types","location":{"column":7,"line":111},"status":"passed","title":"should error reconnecting different element types"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements should error reconnecting fewer root children","location":{"column":7,"line":114},"status":"passed","title":"should error reconnecting fewer root children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements should error reconnecting missing attributes","location":{"column":7,"line":120},"status":"passed","title":"should error reconnecting missing attributes"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements should error reconnecting added attributes","location":{"column":7,"line":123},"status":"passed","title":"should error reconnecting added attributes"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements should error reconnecting different attribute values","location":{"column":7,"line":126},"status":"passed","title":"should error reconnecting different attribute values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements can explicitly ignore errors reconnecting different element types of children","location":{"column":7,"line":129},"status":"passed","title":"can explicitly ignore errors reconnecting different element types of children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements can explicitly ignore errors reconnecting missing attributes","location":{"column":7,"line":139},"status":"passed","title":"can explicitly ignore errors reconnecting missing attributes"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements can explicitly ignore errors reconnecting added attributes","location":{"column":7,"line":145},"status":"passed","title":"can explicitly ignore errors reconnecting added attributes"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements can explicitly ignore errors reconnecting different attribute values","location":{"column":7,"line":151},"status":"passed","title":"can explicitly ignore errors reconnecting different attribute values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup elements can not deeply ignore errors reconnecting different attribute values","location":{"column":7,"line":157},"status":"passed","title":"can not deeply ignore errors reconnecting different attribute values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles should error reconnecting missing style attribute","location":{"column":7,"line":169},"status":"passed","title":"should error reconnecting missing style attribute"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles should error reconnecting added style attribute","location":{"column":7,"line":172},"status":"passed","title":"should error reconnecting added style attribute"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles should error reconnecting empty style attribute","location":{"column":7,"line":175},"status":"passed","title":"should error reconnecting empty style attribute"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles should error reconnecting added style values","location":{"column":7,"line":181},"status":"passed","title":"should error reconnecting added style values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles should error reconnecting different style values","location":{"column":7,"line":187},"status":"passed","title":"should error reconnecting different style values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles should reconnect number and string versions of a number","location":{"column":7,"line":193},"status":"passed","title":"should reconnect number and string versions of a number"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles should error reconnecting reordered style values","location":{"column":7,"line":199},"status":"passed","title":"should error reconnecting reordered style values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles can explicitly ignore errors reconnecting added style values","location":{"column":7,"line":205},"status":"passed","title":"can explicitly ignore errors reconnecting added style values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup inline styles can explicitly ignore reconnecting different style values","location":{"column":7,"line":211},"status":"passed","title":"can explicitly ignore reconnecting different style values"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","text nodes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup text nodes should error reconnecting different text","location":{"column":7,"line":219},"status":"passed","title":"should error reconnecting different text"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","text nodes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup text nodes should reconnect a div with a number and string version of number","location":{"column":7,"line":222},"status":"passed","title":"should reconnect a div with a number and string version of number"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","text nodes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup text nodes should error reconnecting different numbers","location":{"column":7,"line":225},"status":"passed","title":"should error reconnecting different numbers"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","text nodes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup text nodes should error reconnecting different number from text","location":{"column":7,"line":228},"status":"passed","title":"should error reconnecting different number from text"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","text nodes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup text nodes should error reconnecting different text in two code blocks","location":{"column":7,"line":231},"status":"passed","title":"should error reconnecting different text in two code blocks"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","text nodes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup text nodes can explicitly ignore reconnecting different text","location":{"column":7,"line":243},"status":"passed","title":"can explicitly ignore reconnecting different text"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","text nodes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup text nodes can explicitly ignore reconnecting different text in two code blocks","location":{"column":7,"line":249},"status":"passed","title":"can explicitly ignore reconnecting different text in two code blocks"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting missing children","location":{"column":7,"line":263},"status":"passed","title":"should error reconnecting missing children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting added children","location":{"column":7,"line":271},"status":"passed","title":"should error reconnecting added children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting more children","location":{"column":7,"line":279},"status":"passed","title":"should error reconnecting more children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting fewer children","location":{"column":7,"line":290},"status":"passed","title":"should error reconnecting fewer children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting reordered children","location":{"column":7,"line":301},"status":"passed","title":"should error reconnecting reordered children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting a div with children separated by whitespace on the client","location":{"column":7,"line":313},"status":"passed","title":"should error reconnecting a div with children separated by whitespace on the client"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting a div with children separated by different whitespace on the server","location":{"column":7,"line":323},"status":"passed","title":"should error reconnecting a div with children separated by different whitespace on the server"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children should error reconnecting a div with children separated by different whitespace","location":{"column":7,"line":333},"status":"passed","title":"should error reconnecting a div with children separated by different whitespace"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children can distinguish an empty component from a dom node","location":{"column":7,"line":342},"status":"passed","title":"can distinguish an empty component from a dom node"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children can distinguish an empty component from an empty text component","location":{"column":7,"line":352},"status":"passed","title":"can distinguish an empty component from an empty text component"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children can explicitly ignore reconnecting more children","location":{"column":7,"line":360},"status":"passed","title":"can explicitly ignore reconnecting more children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children can explicitly ignore reconnecting fewer children","location":{"column":7,"line":371},"status":"passed","title":"can explicitly ignore reconnecting fewer children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children can explicitly ignore reconnecting reordered children","location":{"column":7,"line":382},"status":"passed","title":"can explicitly ignore reconnecting reordered children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup","element trees and children"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup element trees and children can not deeply ignore reconnecting reordered children","location":{"column":7,"line":394},"status":"passed","title":"can not deeply ignore reconnecting reordered children"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup should error reconnecting a div with different dangerouslySetInnerHTML","location":{"column":5,"line":412},"status":"passed","title":"should error reconnecting a div with different dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup should error reconnecting a div with different text dangerouslySetInnerHTML","location":{"column":5,"line":418},"status":"passed","title":"should error reconnecting a div with different text dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup should error reconnecting a div with different number dangerouslySetInnerHTML","location":{"column":5,"line":424},"status":"passed","title":"should error reconnecting a div with different number dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup should error reconnecting a div with different object dangerouslySetInnerHTML","location":{"column":5,"line":430},"status":"passed","title":"should error reconnecting a div with different object dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMServerIntegration","reconnecting to server markup"],"failureMessages":[],"fullName":"ReactDOMServerIntegration reconnecting to server markup can explicitly ignore reconnecting a div with different dangerouslySetInnerHTML","location":{"column":5,"line":452},"status":"passed","title":"can explicitly ignore reconnecting a div with different dangerouslySetInnerHTML"}],"endTime":1639318769108,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationReconnecting-test.js","startTime":1639318762170,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a forwardedRef component and its children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a forwardedRef component and its children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a forwardedRef component and its children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a forwardedRef component and its children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a forwardedRef component and its children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a forwardedRef component and its children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a forwardedRef component and its children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a forwardedRef component and its children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a forwardedRef component and its children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a forwardedRef component and its children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a Profiler component and its children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a Profiler component and its children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a Profiler component and its children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a Profiler component and its children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a Profiler component and its children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a Profiler component and its children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a Profiler component and its children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a Profiler component and its children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration renders a Profiler component and its children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a Profiler component and its children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders basic render with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders basic render with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders basic render with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders basic render with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders basic render with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders basic render with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders basic render with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders basic render with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders basic render with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders basic render with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders composition with forwardRef with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders composition with forwardRef with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders composition with forwardRef with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders composition with forwardRef with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders composition with forwardRef with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders composition with forwardRef with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders composition with forwardRef with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders composition with forwardRef with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders composition with forwardRef with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders composition with forwardRef with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders with comparator with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with comparator with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders with comparator with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with comparator with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders with comparator with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with comparator with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders with comparator with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with comparator with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders with comparator with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with comparator with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders comparator functions are not invoked on the server with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders comparator functions are not invoked on the server with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders comparator functions are not invoked on the server with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders comparator functions are not invoked on the server with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders comparator functions are not invoked on the server with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders comparator functions are not invoked on the server with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders comparator functions are not invoked on the server with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders comparator functions are not invoked on the server with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","memoized function components"],"failureMessages":[],"fullName":"ReactDOMServerIntegration memoized function components renders comparator functions are not invoked on the server with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders comparator functions are not invoked on the server with client render on top of bad server markup"}],"endTime":1639318772714,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationSpecialTypes-test.js","startTime":1639318769184,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should reset internal state if removed then readded in an array","location":{"column":3,"line":290},"status":"passed","title":"should reset internal state if removed then readded in an array"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should reset internal state if removed then readded in a legacy iterable","location":{"column":3,"line":332},"status":"passed","title":"should reset internal state if removed then readded in a legacy iterable"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should reset internal state if removed then readded in a modern iterable","location":{"column":3,"line":374},"status":"passed","title":"should reset internal state if removed then readded in a modern iterable"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should create unique identity","location":{"column":3,"line":416},"status":"passed","title":"should create unique identity"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should preserve order if children order has not changed","location":{"column":3,"line":427},"status":"passed","title":"should preserve order if children order has not changed"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should transition from zero to one children correctly","location":{"column":3,"line":445},"status":"passed","title":"should transition from zero to one children correctly"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should transition from one to zero children correctly","location":{"column":3,"line":457},"status":"passed","title":"should transition from one to zero children correctly"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should transition from one child to null children","location":{"column":3,"line":469},"status":"passed","title":"should transition from one child to null children"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should transition from null children to one child","location":{"column":3,"line":480},"status":"passed","title":"should transition from null children to one child"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should transition from zero children to null children","location":{"column":3,"line":491},"status":"passed","title":"should transition from zero children to null children"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should transition from null children to zero children","location":{"column":3,"line":500},"status":"passed","title":"should transition from null children to zero children"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should remove nulled out children at the beginning","location":{"column":3,"line":513},"status":"passed","title":"should remove nulled out children at the beginning"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should remove nulled out children at the end","location":{"column":3,"line":531},"status":"passed","title":"should remove nulled out children at the end"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should reverse the order of two children","location":{"column":3,"line":549},"status":"passed","title":"should reverse the order of two children"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should reverse the order of more than two children","location":{"column":3,"line":567},"status":"passed","title":"should reverse the order of more than two children"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should cycle order correctly","location":{"column":3,"line":587},"status":"passed","title":"should cycle order correctly"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should cycle order correctly in the other direction","location":{"column":3,"line":634},"status":"passed","title":"should cycle order correctly in the other direction"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should remove nulled out children and ignore new null children","location":{"column":3,"line":681},"status":"passed","title":"should remove nulled out children and ignore new null children"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should remove nulled out children and reorder remaining","location":{"column":3,"line":700},"status":"passed","title":"should remove nulled out children and reorder remaining"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should append children to the end","location":{"column":3,"line":721},"status":"passed","title":"should append children to the end"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should append multiple children to the end","location":{"column":3,"line":740},"status":"passed","title":"should append multiple children to the end"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should prepend children to the beginning","location":{"column":3,"line":760},"status":"passed","title":"should prepend children to the beginning"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should prepend multiple children to the beginning","location":{"column":3,"line":779},"status":"passed","title":"should prepend multiple children to the beginning"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should not prepend an empty child to the beginning","location":{"column":3,"line":799},"status":"passed","title":"should not prepend an empty child to the beginning"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should not append an empty child to the end","location":{"column":3,"line":818},"status":"passed","title":"should not append an empty child to the end"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should not insert empty children in the middle","location":{"column":3,"line":837},"status":"passed","title":"should not insert empty children in the middle"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should insert one new child in the middle","location":{"column":3,"line":858},"status":"passed","title":"should insert one new child in the middle"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should insert multiple new truthy children in the middle","location":{"column":3,"line":877},"status":"passed","title":"should insert multiple new truthy children in the middle"},{"ancestorTitles":["ReactMultiChildReconcile"],"failureMessages":[],"fullName":"ReactMultiChildReconcile should insert non-empty children in middle where nulls were","location":{"column":3,"line":898},"status":"passed","title":"should insert non-empty children in middle where nulls were"}],"endTime":1639318773511,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactMultiChildReconcile-test.js","startTime":1639318772780,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMInvalidARIAHook","aria-* props"],"failureMessages":[],"fullName":"ReactDOMInvalidARIAHook aria-* props should allow valid aria-* props","location":{"column":5,"line":28},"status":"passed","title":"should allow valid aria-* props"},{"ancestorTitles":["ReactDOMInvalidARIAHook","aria-* props"],"failureMessages":[],"fullName":"ReactDOMInvalidARIAHook aria-* props should warn for one invalid aria-* prop","location":{"column":5,"line":31},"status":"passed","title":"should warn for one invalid aria-* prop"},{"ancestorTitles":["ReactDOMInvalidARIAHook","aria-* props"],"failureMessages":[],"fullName":"ReactDOMInvalidARIAHook aria-* props should warn for many invalid aria-* props","location":{"column":5,"line":37},"status":"passed","title":"should warn for many invalid aria-* props"},{"ancestorTitles":["ReactDOMInvalidARIAHook","aria-* props"],"failureMessages":[],"fullName":"ReactDOMInvalidARIAHook aria-* props should warn for an improperly cased aria-* prop","location":{"column":5,"line":48},"status":"passed","title":"should warn for an improperly cased aria-* prop"},{"ancestorTitles":["ReactDOMInvalidARIAHook","aria-* props"],"failureMessages":[],"fullName":"ReactDOMInvalidARIAHook aria-* props should warn for use of recognized camel case aria attributes","location":{"column":5,"line":56},"status":"passed","title":"should warn for use of recognized camel case aria attributes"},{"ancestorTitles":["ReactDOMInvalidARIAHook","aria-* props"],"failureMessages":[],"fullName":"ReactDOMInvalidARIAHook aria-* props should warn for use of unrecognized camel case aria attributes","location":{"column":5,"line":64},"status":"passed","title":"should warn for use of unrecognized camel case aria attributes"}],"endTime":1639318774124,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMInvalidARIAHook-test.js","startTime":1639318773579,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should render stateless component","location":{"column":3,"line":30},"status":"passed","title":"should render stateless component"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should update stateless component","location":{"column":3,"line":37},"status":"passed","title":"should update stateless component"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should unmount stateless component","location":{"column":3,"line":52},"status":"passed","title":"should unmount stateless component"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should pass context thru stateless component","location":{"column":3,"line":62},"status":"passed","title":"should pass context thru stateless component"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should warn for getDerivedStateFromProps on a function component","location":{"column":3,"line":101},"status":"passed","title":"should warn for getDerivedStateFromProps on a function component"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should warn for childContextTypes on a function component","location":{"column":3,"line":117},"status":"passed","title":"should warn for childContextTypes on a function component"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should throw when stateless component returns undefined","location":{"column":3,"line":139},"status":"passed","title":"should throw when stateless component returns undefined"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should throw on string refs in pure functions","location":{"column":3,"line":153},"status":"passed","title":"should throw on string refs in pure functions"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should warn when given a string ref","location":{"column":3,"line":174},"status":"passed","title":"should warn when given a string ref"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should warn when given a function ref","location":{"column":3,"line":207},"status":"passed","title":"should warn when given a function ref"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent deduplicates ref warnings based on element or owner","location":{"column":3,"line":245},"status":"passed","title":"deduplicates ref warnings based on element or owner"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should warn when giving a function ref with context","location":{"column":3,"line":313},"status":"passed","title":"should warn when giving a function ref with context"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should provide a null ref","location":{"column":3,"line":346},"status":"passed","title":"should provide a null ref"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should use correct name in key warning","location":{"column":3,"line":355},"status":"passed","title":"should use correct name in key warning"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should support default props and prop types","location":{"column":3,"line":368},"status":"passed","title":"should support default props and prop types"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should receive context","location":{"column":3,"line":382},"status":"passed","title":"should receive context"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should work with arrow functions","location":{"column":3,"line":407},"status":"passed","title":"should work with arrow functions"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should allow simple functions to return null","location":{"column":3,"line":418},"status":"passed","title":"should allow simple functions to return null"},{"ancestorTitles":["ReactFunctionComponent"],"failureMessages":[],"fullName":"ReactFunctionComponent should allow simple functions to return false","location":{"column":3,"line":425},"status":"passed","title":"should allow simple functions to return false"}],"endTime":1639318775682,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactFunctionComponent-test.js","startTime":1639318774190,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should not produce child DOM nodes for null and false","location":{"column":3,"line":48},"status":"passed","title":"should not produce child DOM nodes for null and false"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should still throw when rendering to undefined","location":{"column":3,"line":70},"status":"passed","title":"should still throw when rendering to undefined"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should be able to switch between rendering null and a normal tag","location":{"column":3,"line":83},"status":"passed","title":"should be able to switch between rendering null and a normal tag"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should be able to switch in a list of children","location":{"column":3,"line":107},"status":"passed","title":"should be able to switch in a list of children"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should distinguish between a script placeholder and an actual script tag","location":{"column":3,"line":138},"status":"passed","title":"should distinguish between a script placeholder and an actual script tag"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should have findDOMNode return null when multiple layers of composite components render to the same null placeholder","location":{"column":3,"line":166},"status":"passed","title":"should have findDOMNode return null when multiple layers of composite components render to the same null placeholder"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent works when switching components","location":{"column":3,"line":210},"status":"passed","title":"works when switching components"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent can render null at the top level","location":{"column":3,"line":257},"status":"passed","title":"can render null at the top level"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent does not break when updating during mount","location":{"column":3,"line":263},"status":"passed","title":"does not break when updating during mount"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent preserves the dom node during updates","location":{"column":3,"line":301},"status":"passed","title":"preserves the dom node during updates"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should warn about React.forwardRef that returns undefined","location":{"column":3,"line":320},"status":"passed","title":"should warn about React.forwardRef that returns undefined"},{"ancestorTitles":["ReactEmptyComponent"],"failureMessages":[],"fullName":"ReactEmptyComponent should warn about React.memo that returns undefined","location":{"column":3,"line":331},"status":"passed","title":"should warn about React.memo that returns undefined"}],"endTime":1639318776736,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactEmptyComponent-test.js","startTime":1639318775749,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser ampersand is escaped inside attributes","location":{"column":3,"line":22},"status":"passed","title":"ampersand is escaped inside attributes"},{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser double quote is escaped inside attributes","location":{"column":3,"line":27},"status":"passed","title":"double quote is escaped inside attributes"},{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser single quote is escaped inside attributes","location":{"column":3,"line":32},"status":"passed","title":"single quote is escaped inside attributes"},{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser greater than entity is escaped inside attributes","location":{"column":3,"line":37},"status":"passed","title":"greater than entity is escaped inside attributes"},{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser lower than entity is escaped inside attributes","location":{"column":3,"line":42},"status":"passed","title":"lower than entity is escaped inside attributes"},{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser number is escaped to string inside attributes","location":{"column":3,"line":47},"status":"passed","title":"number is escaped to string inside attributes"},{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser object is passed to a string inside attributes","location":{"column":3,"line":52},"status":"passed","title":"object is passed to a string inside attributes"},{"ancestorTitles":["quoteAttributeValueForBrowser"],"failureMessages":[],"fullName":"quoteAttributeValueForBrowser script tag is escaped inside attributes","location":{"column":3,"line":65},"status":"passed","title":"script tag is escaped inside attributes"}],"endTime":1639318777102,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/quoteAttributeValueForBrowser-test.js","startTime":1639318776802,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support searching from the document root","location":{"column":5,"line":59},"status":"passed","title":"should support searching from the document root"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support searching from the container","location":{"column":5,"line":78},"status":"passed","title":"should support searching from the container"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support searching from a previous match if the match had a data-testname","location":{"column":5,"line":97},"status":"passed","title":"should support searching from a previous match if the match had a data-testname"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should not support searching from a previous match if the match did not have a data-testname","location":{"column":5,"line":127},"status":"passed","title":"should not support searching from a previous match if the match did not have a data-testname"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support an multiple component types in the selector array","location":{"column":5,"line":156},"status":"passed","title":"should support an multiple component types in the selector array"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should find multiple matches","location":{"column":5,"line":209},"status":"passed","title":"should find multiple matches"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should ignore nested matches","location":{"column":5,"line":246},"status":"passed","title":"should ignore nested matches"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should enforce the specific order of selectors","location":{"column":5,"line":265},"status":"passed","title":"should enforce the specific order of selectors"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should not search within hidden subtrees","location":{"column":5,"line":289},"status":"passed","title":"should not search within hidden subtrees"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support filtering by display text","location":{"column":5,"line":318},"status":"passed","title":"should support filtering by display text"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support filtering by explicit accessibiliy role","location":{"column":5,"line":340},"status":"passed","title":"should support filtering by explicit accessibiliy role"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support filtering by explicit secondary accessibiliy role","location":{"column":5,"line":364},"status":"passed","title":"should support filtering by explicit secondary accessibiliy role"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support filtering by implicit accessibiliy role","location":{"column":5,"line":388},"status":"passed","title":"should support filtering by implicit accessibiliy role"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support filtering by implicit accessibiliy role with attributes qualifications","location":{"column":5,"line":410},"status":"passed","title":"should support filtering by implicit accessibiliy role with attributes qualifications"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should support searching ahead with the has() selector","location":{"column":5,"line":432},"status":"passed","title":"should support searching ahead with the has() selector"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should throw if no container can be found","location":{"column":5,"line":467},"status":"passed","title":"should throw if no container can be found"},{"ancestorTitles":["ReactDOMTestSelectors","findAllNodes"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findAllNodes should throw if an invalid host root is specified","location":{"column":5,"line":473},"status":"passed","title":"should throw if an invalid host root is specified"},{"ancestorTitles":["ReactDOMTestSelectors","getFindAllNodesFailureDescription"],"failureMessages":[],"fullName":"ReactDOMTestSelectors getFindAllNodesFailureDescription should describe findAllNodes failures caused by the component type selector","location":{"column":5,"line":488},"status":"passed","title":"should describe findAllNodes failures caused by the component type selector"},{"ancestorTitles":["ReactDOMTestSelectors","getFindAllNodesFailureDescription"],"failureMessages":[],"fullName":"ReactDOMTestSelectors getFindAllNodesFailureDescription should return null if findAllNodes was able to find a match","location":{"column":5,"line":517},"status":"passed","title":"should return null if findAllNodes was able to find a match"},{"ancestorTitles":["ReactDOMTestSelectors","findBoundingRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findBoundingRects should return a single rect for a component that returns a single root host element","location":{"column":5,"line":552},"status":"passed","title":"should return a single rect for a component that returns a single root host element"},{"ancestorTitles":["ReactDOMTestSelectors","findBoundingRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findBoundingRects should return a multiple rects for multiple matches","location":{"column":5,"line":585},"status":"passed","title":"should return a multiple rects for multiple matches"},{"ancestorTitles":["ReactDOMTestSelectors","findBoundingRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findBoundingRects should return a multiple rects for single match that returns a fragment","location":{"column":5,"line":634},"status":"passed","title":"should return a multiple rects for single match that returns a fragment"},{"ancestorTitles":["ReactDOMTestSelectors","findBoundingRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findBoundingRects should merge overlapping rects","location":{"column":5,"line":683},"status":"passed","title":"should merge overlapping rects"},{"ancestorTitles":["ReactDOMTestSelectors","findBoundingRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findBoundingRects should merge some types of adjacent rects (if they are the same in one dimension)","location":{"column":5,"line":737},"status":"passed","title":"should merge some types of adjacent rects (if they are the same in one dimension)"},{"ancestorTitles":["ReactDOMTestSelectors","findBoundingRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors findBoundingRects should not search within hidden subtrees","location":{"column":5,"line":836},"status":"passed","title":"should not search within hidden subtrees"},{"ancestorTitles":["ReactDOMTestSelectors","focusWithin"],"failureMessages":[],"fullName":"ReactDOMTestSelectors focusWithin should return false if the specified component path has no matches","location":{"column":5,"line":892},"status":"passed","title":"should return false if the specified component path has no matches"},{"ancestorTitles":["ReactDOMTestSelectors","focusWithin"],"failureMessages":[],"fullName":"ReactDOMTestSelectors focusWithin should return false if there are no focusable elements within the matched subtree","location":{"column":5,"line":912},"status":"passed","title":"should return false if there are no focusable elements within the matched subtree"},{"ancestorTitles":["ReactDOMTestSelectors","focusWithin"],"failureMessages":[],"fullName":"ReactDOMTestSelectors focusWithin should return false if the only focusable elements are disabled","location":{"column":5,"line":929},"status":"passed","title":"should return false if the only focusable elements are disabled"},{"ancestorTitles":["ReactDOMTestSelectors","focusWithin"],"failureMessages":[],"fullName":"ReactDOMTestSelectors focusWithin should return false if the only focusable elements are hidden","location":{"column":5,"line":946},"status":"passed","title":"should return false if the only focusable elements are hidden"},{"ancestorTitles":["ReactDOMTestSelectors","focusWithin"],"failureMessages":[],"fullName":"ReactDOMTestSelectors focusWithin should successfully focus the first focusable element within the tree","location":{"column":5,"line":959},"status":"passed","title":"should successfully focus the first focusable element within the tree"},{"ancestorTitles":["ReactDOMTestSelectors","focusWithin"],"failureMessages":[],"fullName":"ReactDOMTestSelectors focusWithin should successfully focus the first focusable element even if application logic interferes","location":{"column":5,"line":1013},"status":"passed","title":"should successfully focus the first focusable element even if application logic interferes"},{"ancestorTitles":["ReactDOMTestSelectors","focusWithin"],"failureMessages":[],"fullName":"ReactDOMTestSelectors focusWithin should not focus within hidden subtrees","location":{"column":5,"line":1042},"status":"passed","title":"should not focus within hidden subtrees"},{"ancestorTitles":["ReactDOMTestSelectors","observeVisibleRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors observeVisibleRects should notify a listener when the underlying instance intersection changes","location":{"column":5,"line":1165},"status":"passed","title":"should notify a listener when the underlying instance intersection changes"},{"ancestorTitles":["ReactDOMTestSelectors","observeVisibleRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors observeVisibleRects should notify a listener of multiple targets when the underlying instance intersection changes","location":{"column":5,"line":1201},"status":"passed","title":"should notify a listener of multiple targets when the underlying instance intersection changes"},{"ancestorTitles":["ReactDOMTestSelectors","observeVisibleRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors observeVisibleRects should stop listening when its disconnected","location":{"column":5,"line":1277},"status":"passed","title":"should stop listening when its disconnected"},{"ancestorTitles":["ReactDOMTestSelectors","observeVisibleRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors observeVisibleRects should update which targets its listening to after a commit","location":{"column":7,"line":283},"status":"passed","title":"should update which targets its listening to after a commit"},{"ancestorTitles":["ReactDOMTestSelectors","observeVisibleRects"],"failureMessages":[],"fullName":"ReactDOMTestSelectors observeVisibleRects should not observe components within hidden subtrees","location":{"column":5,"line":1390},"status":"passed","title":"should not observe components within hidden subtrees"}],"endTime":1639318779828,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMTestSelectors-test.internal.js","startTime":1639318777169,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactMount","unmountComponentAtNode"],"failureMessages":[],"fullName":"ReactMount unmountComponentAtNode throws when given a non-node","location":{"column":5,"line":30},"status":"passed","title":"throws when given a non-node"},{"ancestorTitles":["ReactMount","unmountComponentAtNode"],"failureMessages":[],"fullName":"ReactMount unmountComponentAtNode returns false on non-React containers","location":{"column":5,"line":39},"status":"passed","title":"returns false on non-React containers"},{"ancestorTitles":["ReactMount","unmountComponentAtNode"],"failureMessages":[],"fullName":"ReactMount unmountComponentAtNode returns true on React containers","location":{"column":5,"line":46},"status":"passed","title":"returns true on React containers"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount warns when given a factory","location":{"column":3,"line":55},"status":"passed","title":"warns when given a factory"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should render different components in same root","location":{"column":3,"line":72},"status":"passed","title":"should render different components in same root"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should unmount and remount if the key changes","location":{"column":3,"line":83},"status":"passed","title":"should unmount and remount if the key changes"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should reuse markup if rendering to the same target twice","location":{"column":3,"line":118},"status":"passed","title":"should reuse markup if rendering to the same target twice"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should warn if mounting into left padded rendered markup","location":{"column":3,"line":126},"status":"passed","title":"should warn if mounting into left padded rendered markup"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should warn if mounting into right padded rendered markup","location":{"column":3,"line":138},"status":"passed","title":"should warn if mounting into right padded rendered markup"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should not warn if mounting into non-empty node","location":{"column":3,"line":147},"status":"passed","title":"should not warn if mounting into non-empty node"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should warn when mounting into document.body","location":{"column":3,"line":154},"status":"passed","title":"should warn when mounting into document.body"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should account for escaping on a checksum mismatch","location":{"column":3,"line":166},"status":"passed","title":"should account for escaping on a checksum mismatch"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should warn if render removes React-rendered children","location":{"column":3,"line":184},"status":"passed","title":"should warn if render removes React-rendered children"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should warn if the unmounted node was rendered by another copy of React","location":{"column":3,"line":213},"status":"passed","title":"should warn if the unmounted node was rendered by another copy of React"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount passes the correct callback context","location":{"column":3,"line":244},"status":"passed","title":"passes the correct callback context"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount initial mount is sync inside batchedUpdates, but task work is deferred until the end of the batch","location":{"column":3,"line":284},"status":"passed","title":"initial mount is sync inside batchedUpdates, but task work is deferred until the end of the batch"},{"ancestorTitles":["ReactMount","mount point is a comment node"],"failureMessages":[],"fullName":"ReactMount mount point is a comment node renders at a comment node","location":{"column":5,"line":330},"status":"passed","title":"renders at a comment node"}],"endTime":1639318781339,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactMount-test.js","startTime":1639318779896,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and an onChange with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an input with a value and an onChange with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and an onChange with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an input with a value and an onChange with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and an onChange with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an input with a value and an onChange with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and an onChange with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an input with a value and an onChange with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and an onChange with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an input with a value and an onChange with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an input with a value and readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an input with a value and readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an input with a value and readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an input with a value and readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an input with a value and readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and no onChange/readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an input with a value and no onChange/readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and no onChange/readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an input with a value and no onChange/readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and no onChange/readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an input with a value and no onChange/readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and no onChange/readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an input with a value and no onChange/readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a value and no onChange/readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an input with a value and no onChange/readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a defaultValue with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an input with a defaultValue with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a defaultValue with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an input with a defaultValue with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a defaultValue with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an input with a defaultValue with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a defaultValue with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an input with a defaultValue with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input with a defaultValue with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an input with a defaultValue with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an input value overriding defaultValue with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an input value overriding defaultValue with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an input value overriding defaultValue with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an input value overriding defaultValue with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an input value overriding defaultValue with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue no matter the prop order with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an input value overriding defaultValue no matter the prop order with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue no matter the prop order with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an input value overriding defaultValue no matter the prop order with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue no matter the prop order with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an input value overriding defaultValue no matter the prop order with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue no matter the prop order with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an input value overriding defaultValue no matter the prop order with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationInput"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationInput renders an input value overriding defaultValue no matter the prop order with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an input value overriding defaultValue no matter the prop order with client render on top of bad server markup"}],"endTime":1639318783924,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationInput-test.js","startTime":1639318781407,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should invoke the correct legacy lifecycle hooks","location":{"column":3,"line":36},"status":"passed","title":"should invoke the correct legacy lifecycle hooks"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should invoke the correct new lifecycle hooks","location":{"column":3,"line":68},"status":"passed","title":"should invoke the correct new lifecycle hooks"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should not invoke unsafe cWM if static gDSFP is present","location":{"column":3,"line":104},"status":"passed","title":"should not invoke unsafe cWM if static gDSFP is present"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should update instance.state with value returned from getDerivedStateFromProps","location":{"column":3,"line":121},"status":"passed","title":"should update instance.state with value returned from getDerivedStateFromProps"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should warn if getDerivedStateFromProps returns undefined","location":{"column":3,"line":174},"status":"passed","title":"should warn if getDerivedStateFromProps returns undefined"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should warn if state is not initialized before getDerivedStateFromProps","location":{"column":3,"line":192},"status":"passed","title":"should warn if state is not initialized before getDerivedStateFromProps"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should invoke both deprecated and new lifecycles if both are present","location":{"column":3,"line":213},"status":"passed","title":"should invoke both deprecated and new lifecycles if both are present"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles tracks state updates across components","location":{"column":3,"line":234},"status":"passed","title":"tracks state updates across components"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should not invoke cWM if static gDSFP is present","location":{"column":3,"line":268},"status":"passed","title":"should not invoke cWM if static gDSFP is present"},{"ancestorTitles":["ReactDOMServerLifecycles"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles should warn about deprecated lifecycle hooks","location":{"column":3,"line":287},"status":"passed","title":"should warn about deprecated lifecycle hooks"},{"ancestorTitles":["ReactDOMServerLifecycles","react-lifecycles-compat"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles react-lifecycles-compat should not warn for components with polyfilled getDerivedStateFromProps","location":{"column":5,"line":308},"status":"passed","title":"should not warn for components with polyfilled getDerivedStateFromProps"},{"ancestorTitles":["ReactDOMServerLifecycles","react-lifecycles-compat"],"failureMessages":[],"fullName":"ReactDOMServerLifecycles react-lifecycles-compat should not warn for components with polyfilled getSnapshotBeforeUpdate","location":{"column":5,"line":330},"status":"passed","title":"should not warn for components with polyfilled getSnapshotBeforeUpdate"}],"endTime":1639318784412,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerLifecycles-test.js","startTime":1639318783998,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegrationProgress"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationProgress renders a progress in an indeterminate state with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a progress in an indeterminate state with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationProgress"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationProgress renders a progress in an indeterminate state with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a progress in an indeterminate state with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationProgress"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationProgress renders a progress in an indeterminate state with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a progress in an indeterminate state with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationProgress"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationProgress renders a progress in an indeterminate state with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a progress in an indeterminate state with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationProgress"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationProgress renders a progress in an indeterminate state with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a progress in an indeterminate state with client render on top of bad server markup"}],"endTime":1639318785107,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMserverIntegrationProgress-test.js","startTime":1639318784485,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMEventListener","Propagation"],"failureMessages":[],"fullName":"ReactDOMEventListener Propagation should propagate events one level down","location":{"column":5,"line":25},"status":"passed","title":"should propagate events one level down"},{"ancestorTitles":["ReactDOMEventListener","Propagation"],"failureMessages":[],"fullName":"ReactDOMEventListener Propagation should propagate events two levels down","location":{"column":5,"line":56},"status":"passed","title":"should propagate events two levels down"},{"ancestorTitles":["ReactDOMEventListener","Propagation"],"failureMessages":[],"fullName":"ReactDOMEventListener Propagation should not get confused by disappearing elements","location":{"column":5,"line":96},"status":"passed","title":"should not get confused by disappearing elements"},{"ancestorTitles":["ReactDOMEventListener","Propagation"],"failureMessages":[],"fullName":"ReactDOMEventListener Propagation should batch between handlers from different roots","location":{"column":5,"line":134},"status":"passed","title":"should batch between handlers from different roots"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should not fire duplicate events for a React DOM tree","location":{"column":3,"line":191},"status":"passed","title":"should not fire duplicate events for a React DOM tree"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should not fire form events twice","location":{"column":3,"line":231},"status":"passed","title":"should not fire form events twice"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should not receive submit events if native, interim DOM handler prevents it","location":{"column":3,"line":286},"status":"passed","title":"should not receive submit events if native, interim DOM handler prevents it"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should dispatch loadstart only for media elements","location":{"column":3,"line":328},"status":"passed","title":"should dispatch loadstart only for media elements"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should not attempt to listen to unnecessary events on the top level","location":{"column":3,"line":366},"status":"passed","title":"should not attempt to listen to unnecessary events on the top level"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should dispatch load for embed elements","location":{"column":3,"line":478},"status":"passed","title":"should dispatch load for embed elements"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should delegate media events even without a direct listener","location":{"column":3,"line":507},"status":"passed","title":"should delegate media events even without a direct listener"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should delegate dialog events even without a direct listener","location":{"column":3,"line":533},"status":"passed","title":"should delegate dialog events even without a direct listener"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should bubble non-native bubbling toggle events","location":{"column":3,"line":566},"status":"passed","title":"should bubble non-native bubbling toggle events"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should bubble non-native bubbling cancel/close events","location":{"column":3,"line":589},"status":"passed","title":"should bubble non-native bubbling cancel/close events"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should bubble non-native bubbling media events events","location":{"column":3,"line":619},"status":"passed","title":"should bubble non-native bubbling media events events"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should bubble non-native bubbling invalid events","location":{"column":3,"line":642},"status":"passed","title":"should bubble non-native bubbling invalid events"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should handle non-bubbling capture events correctly","location":{"column":3,"line":665},"status":"passed","title":"should handle non-bubbling capture events correctly"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should not emulate bubbling of scroll events","location":{"column":3,"line":712},"status":"passed","title":"should not emulate bubbling of scroll events"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should not emulate bubbling of scroll events (no own handler)","location":{"column":3,"line":762},"status":"passed","title":"should not emulate bubbling of scroll events (no own handler)"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should subscribe to scroll during updates","location":{"column":3,"line":803},"status":"passed","title":"should subscribe to scroll during updates"},{"ancestorTitles":["ReactDOMEventListener"],"failureMessages":[],"fullName":"ReactDOMEventListener should subscribe to scroll during hydration","location":{"column":3,"line":859},"status":"passed","title":"should subscribe to scroll during hydration"}],"endTime":1639318786843,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMEventListener-test.js","startTime":1639318785174,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child with context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child with context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child with context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child with context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child with context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders stateless child with context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders stateless child with context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders stateless child with context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders stateless child with context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders stateless child with context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child without context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child without context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child without context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child without context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child without context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child without context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child without context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child without context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child without context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child without context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child without context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders stateless child without context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child without context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders stateless child without context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child without context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders stateless child without context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child without context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders stateless child without context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child without context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders stateless child without context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with wrong context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child with wrong context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with wrong context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child with wrong context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with wrong context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child with wrong context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with wrong context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child with wrong context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders class child with wrong context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child with wrong context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with wrong context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders stateless child with wrong context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with wrong context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders stateless child with wrong context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with wrong context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders stateless child with wrong context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with wrong context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders stateless child with wrong context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders stateless child with wrong context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders stateless child with wrong context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with context passed through to a grandchild with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with context passed through to a grandchild with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with context passed through to a grandchild with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with context passed through to a grandchild with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with context passed through to a grandchild with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with context passed through to a grandchild with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with context passed through to a grandchild with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with context passed through to a grandchild with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with context passed through to a grandchild with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with context passed through to a grandchild with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context overriding a parent context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a child context overriding a parent context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context overriding a parent context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a child context overriding a parent context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context overriding a parent context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a child context overriding a parent context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context overriding a parent context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a child context overriding a parent context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context overriding a parent context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a child context overriding a parent context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context merged with a parent context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a child context merged with a parent context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context merged with a parent context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a child context merged with a parent context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context merged with a parent context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a child context merged with a parent context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context merged with a parent context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a child context merged with a parent context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders a child context merged with a parent context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a child context merged with a parent context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with a call to componentWillMount before getChildContext with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with a call to componentWillMount before getChildContext with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with a call to componentWillMount before getChildContext with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with a call to componentWillMount before getChildContext with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with a call to componentWillMount before getChildContext with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with a call to componentWillMount before getChildContext with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with a call to componentWillMount before getChildContext with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with a call to componentWillMount before getChildContext with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders with a call to componentWillMount before getChildContext with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with a call to componentWillMount before getChildContext with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders if getChildContext exists but childContextTypes is missing with a warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders if getChildContext exists but childContextTypes is missing with a warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders if getChildContext exists but childContextTypes is missing with a warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders if getChildContext exists but childContextTypes is missing with a warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders if getChildContext exists but childContextTypes is missing with a warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders if getChildContext exists but childContextTypes is missing with a warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders if getChildContext exists but childContextTypes is missing with a warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders if getChildContext exists but childContextTypes is missing with a warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context renders if getChildContext exists but childContextTypes is missing with a warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders if getChildContext exists but childContextTypes is missing with a warning with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context throws when rendering if getChildContext returns a value not in childContextTypes with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if getChildContext returns a value not in childContextTypes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context throws when rendering if getChildContext returns a value not in childContextTypes with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if getChildContext returns a value not in childContextTypes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context throws when rendering if getChildContext returns a value not in childContextTypes with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering if getChildContext returns a value not in childContextTypes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","legacy context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration legacy context warns when childContextTypes is not defined","location":{"column":5,"line":295},"status":"passed","title":"warns when childContextTypes is not defined"}],"endTime":1639318792160,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationLegacyContext-test.js","startTime":1639318786917,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactChildReconciler"],"failureMessages":[],"fullName":"ReactChildReconciler does not treat functions as iterables","location":{"column":3,"line":58},"status":"passed","title":"does not treat functions as iterables"},{"ancestorTitles":["ReactChildReconciler"],"failureMessages":[],"fullName":"ReactChildReconciler warns for duplicated array keys","location":{"column":3,"line":73},"status":"passed","title":"warns for duplicated array keys"},{"ancestorTitles":["ReactChildReconciler"],"failureMessages":[],"fullName":"ReactChildReconciler warns for duplicated array keys with component stack info","location":{"column":3,"line":88},"status":"passed","title":"warns for duplicated array keys with component stack info"},{"ancestorTitles":["ReactChildReconciler"],"failureMessages":[],"fullName":"ReactChildReconciler warns for duplicated iterable keys","location":{"column":3,"line":120},"status":"passed","title":"warns for duplicated iterable keys"},{"ancestorTitles":["ReactChildReconciler"],"failureMessages":[],"fullName":"ReactChildReconciler warns for duplicated iterable keys with component stack info","location":{"column":3,"line":135},"status":"passed","title":"warns for duplicated iterable keys with component stack info"}],"endTime":1639318792764,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactChildReconciler-test.js","startTime":1639318792228,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactErrorLoggingRecovery"],"failureMessages":[],"fullName":"ReactErrorLoggingRecovery should recover from errors in console.error","location":{"column":3,"line":54},"status":"passed","title":"should recover from errors in console.error"}],"endTime":1639318794114,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactErrorLoggingRecovery-test.js","startTime":1639318792837,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should throw on invalid render targets","location":{"column":3,"line":27},"status":"passed","title":"should throw on invalid render targets"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should throw when supplying a ref outside of render method","location":{"column":3,"line":39},"status":"passed","title":"should throw when supplying a ref outside of render method"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should throw (in dev) when children are mutated during render","location":{"column":3,"line":46},"status":"passed","title":"should throw (in dev) when children are mutated during render"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should throw (in dev) when children are mutated during update","location":{"column":3,"line":72},"status":"passed","title":"should throw (in dev) when children are mutated during update"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should support refs on owned components","location":{"column":3,"line":105},"status":"passed","title":"should support refs on owned components"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should not have refs on unmounted components","location":{"column":3,"line":139},"status":"passed","title":"should not have refs on unmounted components"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should support callback-style refs","location":{"column":3,"line":163},"status":"passed","title":"should support callback-style refs"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should support object-style refs","location":{"column":3,"line":203},"status":"passed","title":"should support object-style refs"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should support new-style refs with mixed-up owners","location":{"column":3,"line":246},"status":"passed","title":"should support new-style refs with mixed-up owners"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent should call refs at the correct time","location":{"column":3,"line":288},"status":"passed","title":"should call refs at the correct time"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent fires the callback after a component is rendered","location":{"column":3,"line":384},"status":"passed","title":"fires the callback after a component is rendered"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent throws usefully when rendering badly-typed elements","location":{"column":3,"line":395},"status":"passed","title":"throws usefully when rendering badly-typed elements"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent includes owner name in the error about badly-typed elements","location":{"column":3,"line":423},"status":"passed","title":"includes owner name in the error about badly-typed elements"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent throws if a plain object is used as a child","location":{"column":3,"line":458},"status":"passed","title":"throws if a plain object is used as a child"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent throws if a plain object even if it is in an owner","location":{"column":3,"line":474},"status":"passed","title":"throws if a plain object even if it is in an owner"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent throws if a plain object is used as a child when using SSR","location":{"column":3,"line":495},"status":"passed","title":"throws if a plain object is used as a child when using SSR"},{"ancestorTitles":["ReactComponent"],"failureMessages":[],"fullName":"ReactComponent throws if a plain object even if it is in an owner when using SSR","location":{"column":3,"line":511},"status":"passed","title":"throws if a plain object even if it is in an owner when using SSR"},{"ancestorTitles":["ReactComponent","with new features"],"failureMessages":[],"fullName":"ReactComponent with new features warns on function as a return value from a function","location":{"column":5,"line":533},"status":"passed","title":"warns on function as a return value from a function"},{"ancestorTitles":["ReactComponent","with new features"],"failureMessages":[],"fullName":"ReactComponent with new features warns on function as a return value from a class","location":{"column":5,"line":546},"status":"passed","title":"warns on function as a return value from a class"},{"ancestorTitles":["ReactComponent","with new features"],"failureMessages":[],"fullName":"ReactComponent with new features warns on function as a child to host component","location":{"column":5,"line":561},"status":"passed","title":"warns on function as a child to host component"},{"ancestorTitles":["ReactComponent","with new features"],"failureMessages":[],"fullName":"ReactComponent with new features does not warn for function-as-a-child that gets resolved","location":{"column":5,"line":580},"status":"passed","title":"does not warn for function-as-a-child that gets resolved"},{"ancestorTitles":["ReactComponent","with new features"],"failureMessages":[],"fullName":"ReactComponent with new features deduplicates function type warnings based on component type","location":{"column":5,"line":592},"status":"passed","title":"deduplicates function type warnings based on component type"}],"endTime":1639318795903,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactComponent-test.js","startTime":1639318794182,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should allow key property to express identity","location":{"column":3,"line":24},"status":"passed","title":"should allow key property to express identity"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should use composite identity","location":{"column":3,"line":42},"status":"passed","title":"should use composite identity"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should allow any character as a key, in a detached parent","location":{"column":3,"line":84},"status":"passed","title":"should allow any character as a key, in a detached parent"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should allow any character as a key, in an attached parent","location":{"column":3,"line":89},"status":"passed","title":"should allow any character as a key, in an attached parent"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should not allow scripts in keys to execute","location":{"column":3,"line":100},"status":"passed","title":"should not allow scripts in keys to execute"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should let restructured components retain their uniqueness","location":{"column":3,"line":115},"status":"passed","title":"should let restructured components retain their uniqueness"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should let nested restructures retain their uniqueness","location":{"column":3,"line":148},"status":"passed","title":"should let nested restructures retain their uniqueness"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should let text nodes retain their uniqueness","location":{"column":3,"line":183},"status":"passed","title":"should let text nodes retain their uniqueness"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should retain key during updates in composite components","location":{"column":3,"line":211},"status":"passed","title":"should retain key during updates in composite components"},{"ancestorTitles":["ReactIdentity"],"failureMessages":[],"fullName":"ReactIdentity should not allow implicit and explicit keys to collide","location":{"column":3,"line":253},"status":"passed","title":"should not allow implicit and explicit keys to collide"}],"endTime":1639318796805,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactIdentity-test.js","startTime":1639318795969,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onAnimationEnd","location":{"column":5,"line":49},"status":"passed","title":"onAnimationEnd"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onAnimationIteration","location":{"column":5,"line":66},"status":"passed","title":"onAnimationIteration"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onAnimationStart","location":{"column":5,"line":83},"status":"passed","title":"onAnimationStart"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onAuxClick","location":{"column":5,"line":100},"status":"passed","title":"onAuxClick"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onBlur","location":{"column":5,"line":117},"status":"passed","title":"onBlur"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onClick","location":{"column":7,"line":283},"status":"passed","title":"onClick"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onContextMenu","location":{"column":5,"line":149},"status":"passed","title":"onContextMenu"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onCopy","location":{"column":5,"line":166},"status":"passed","title":"onCopy"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onCut","location":{"column":5,"line":183},"status":"passed","title":"onCut"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDoubleClick","location":{"column":5,"line":200},"status":"passed","title":"onDoubleClick"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDrag","location":{"column":5,"line":217},"status":"passed","title":"onDrag"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDragEnd","location":{"column":5,"line":234},"status":"passed","title":"onDragEnd"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDragEnter","location":{"column":5,"line":251},"status":"passed","title":"onDragEnter"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDragExit","location":{"column":5,"line":268},"status":"passed","title":"onDragExit"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDragLeave","location":{"column":5,"line":285},"status":"passed","title":"onDragLeave"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDragOver","location":{"column":5,"line":302},"status":"passed","title":"onDragOver"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDragStart","location":{"column":5,"line":319},"status":"passed","title":"onDragStart"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onDrop","location":{"column":5,"line":336},"status":"passed","title":"onDrop"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onFocus","location":{"column":5,"line":353},"status":"passed","title":"onFocus"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onGotPointerCapture","location":{"column":5,"line":369},"status":"passed","title":"onGotPointerCapture"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onKeyDown","location":{"column":5,"line":386},"status":"passed","title":"onKeyDown"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onKeyPress","location":{"column":5,"line":403},"status":"passed","title":"onKeyPress"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onKeyUp","location":{"column":5,"line":421},"status":"passed","title":"onKeyUp"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onLostPointerCapture","location":{"column":5,"line":438},"status":"passed","title":"onLostPointerCapture"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onMouseDown","location":{"column":5,"line":455},"status":"passed","title":"onMouseDown"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onMouseOut","location":{"column":5,"line":472},"status":"passed","title":"onMouseOut"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onMouseOver","location":{"column":5,"line":489},"status":"passed","title":"onMouseOver"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onMouseUp","location":{"column":5,"line":506},"status":"passed","title":"onMouseUp"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onPaste","location":{"column":5,"line":523},"status":"passed","title":"onPaste"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onPointerCancel","location":{"column":5,"line":540},"status":"passed","title":"onPointerCancel"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onPointerDown","location":{"column":5,"line":557},"status":"passed","title":"onPointerDown"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onPointerMove","location":{"column":5,"line":574},"status":"passed","title":"onPointerMove"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onPointerOut","location":{"column":5,"line":591},"status":"passed","title":"onPointerOut"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onPointerOver","location":{"column":5,"line":608},"status":"passed","title":"onPointerOver"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onPointerUp","location":{"column":5,"line":625},"status":"passed","title":"onPointerUp"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onReset","location":{"column":5,"line":642},"status":"passed","title":"onReset"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onSubmit","location":{"column":5,"line":658},"status":"passed","title":"onSubmit"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onTouchCancel","location":{"column":5,"line":674},"status":"passed","title":"onTouchCancel"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onTouchEnd","location":{"column":5,"line":691},"status":"passed","title":"onTouchEnd"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onTouchMove","location":{"column":5,"line":708},"status":"passed","title":"onTouchMove"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onTouchStart","location":{"column":5,"line":725},"status":"passed","title":"onTouchStart"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onTransitionEnd","location":{"column":5,"line":742},"status":"passed","title":"onTransitionEnd"},{"ancestorTitles":["ReactDOMEventListener","bubbling events"],"failureMessages":[],"fullName":"ReactDOMEventListener bubbling events onWheel","location":{"column":5,"line":759},"status":"passed","title":"onWheel"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onAbort","location":{"column":5,"line":778},"status":"passed","title":"onAbort"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onCancel","location":{"column":5,"line":794},"status":"passed","title":"onCancel"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onCanPlay","location":{"column":5,"line":810},"status":"passed","title":"onCanPlay"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onCanPlayThrough","location":{"column":5,"line":826},"status":"passed","title":"onCanPlayThrough"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onClose","location":{"column":5,"line":842},"status":"passed","title":"onClose"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onDurationChange","location":{"column":5,"line":858},"status":"passed","title":"onDurationChange"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onEmptied","location":{"column":5,"line":874},"status":"passed","title":"onEmptied"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onEncrypted","location":{"column":5,"line":890},"status":"passed","title":"onEncrypted"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onEnded","location":{"column":5,"line":906},"status":"passed","title":"onEnded"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onError","location":{"column":5,"line":922},"status":"passed","title":"onError"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onInvalid","location":{"column":5,"line":938},"status":"passed","title":"onInvalid"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onLoad","location":{"column":5,"line":954},"status":"passed","title":"onLoad"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onLoadedData","location":{"column":5,"line":970},"status":"passed","title":"onLoadedData"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onLoadedMetadata","location":{"column":5,"line":986},"status":"passed","title":"onLoadedMetadata"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onLoadStart","location":{"column":5,"line":1002},"status":"passed","title":"onLoadStart"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onPause","location":{"column":5,"line":1018},"status":"passed","title":"onPause"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onPlay","location":{"column":5,"line":1034},"status":"passed","title":"onPlay"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onPlaying","location":{"column":5,"line":1050},"status":"passed","title":"onPlaying"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onProgress","location":{"column":5,"line":1066},"status":"passed","title":"onProgress"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onRateChange","location":{"column":5,"line":1082},"status":"passed","title":"onRateChange"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onSeeked","location":{"column":5,"line":1098},"status":"passed","title":"onSeeked"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onSeeking","location":{"column":5,"line":1114},"status":"passed","title":"onSeeking"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onStalled","location":{"column":5,"line":1130},"status":"passed","title":"onStalled"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onSuspend","location":{"column":5,"line":1146},"status":"passed","title":"onSuspend"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onTimeUpdate","location":{"column":5,"line":1162},"status":"passed","title":"onTimeUpdate"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onToggle","location":{"column":5,"line":1178},"status":"passed","title":"onToggle"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onVolumeChange","location":{"column":5,"line":1194},"status":"passed","title":"onVolumeChange"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that bubble in React onWaiting","location":{"column":5,"line":1210},"status":"passed","title":"onWaiting"},{"ancestorTitles":["ReactDOMEventListener","non-bubbling events that do not bubble in React"],"failureMessages":[],"fullName":"ReactDOMEventListener non-bubbling events that do not bubble in React onScroll","location":{"column":5,"line":1228},"status":"passed","title":"onScroll"},{"ancestorTitles":["ReactDOMEventListener","enter/leave events"],"failureMessages":[],"fullName":"ReactDOMEventListener enter/leave events onMouseEnter and onMouseLeave","location":{"column":5,"line":1250},"status":"passed","title":"onMouseEnter and onMouseLeave"},{"ancestorTitles":["ReactDOMEventListener","enter/leave events"],"failureMessages":[],"fullName":"ReactDOMEventListener enter/leave events onPointerEnter and onPointerLeave","location":{"column":5,"line":1323},"status":"passed","title":"onPointerEnter and onPointerLeave"},{"ancestorTitles":["ReactDOMEventListener","polyfilled events"],"failureMessages":[],"fullName":"ReactDOMEventListener polyfilled events onBeforeInput","location":{"column":5,"line":1407},"status":"passed","title":"onBeforeInput"},{"ancestorTitles":["ReactDOMEventListener","polyfilled events"],"failureMessages":[],"fullName":"ReactDOMEventListener polyfilled events onChange","location":{"column":5,"line":1470},"status":"passed","title":"onChange"},{"ancestorTitles":["ReactDOMEventListener","polyfilled events"],"failureMessages":[],"fullName":"ReactDOMEventListener polyfilled events onCompositionStart","location":{"column":5,"line":1529},"status":"passed","title":"onCompositionStart"},{"ancestorTitles":["ReactDOMEventListener","polyfilled events"],"failureMessages":[],"fullName":"ReactDOMEventListener polyfilled events onCompositionEnd","location":{"column":5,"line":1591},"status":"passed","title":"onCompositionEnd"},{"ancestorTitles":["ReactDOMEventListener","polyfilled events"],"failureMessages":[],"fullName":"ReactDOMEventListener polyfilled events onCompositionUpdate","location":{"column":5,"line":1653},"status":"passed","title":"onCompositionUpdate"},{"ancestorTitles":["ReactDOMEventListener","polyfilled events"],"failureMessages":[],"fullName":"ReactDOMEventListener polyfilled events onSelect","location":{"column":5,"line":1715},"status":"passed","title":"onSelect"}],"endTime":1639318809856,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMEventPropagation-test.js","startTime":1639318796879,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"should warn in legacy mode","location":{"column":1,"line":31},"status":"passed","title":"should warn in legacy mode"},{"ancestorTitles":[],"failureMessages":[],"fullName":"does not warn if Scheduler is mocked","location":{"column":1,"line":44},"status":"passed","title":"does not warn if Scheduler is mocked"}],"endTime":1639318810248,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactUnmockedSchedulerWarning-test.internal.js","startTime":1639318809931,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMHooks"],"failureMessages":[],"fullName":"ReactDOMHooks can ReactDOM.render() from useEffect","location":{"column":3,"line":34},"status":"passed","title":"can ReactDOM.render() from useEffect"},{"ancestorTitles":["ReactDOMHooks"],"failureMessages":[],"fullName":"ReactDOMHooks should not bail out when an update is scheduled from within an event handler","location":{"column":3,"line":75},"status":"passed","title":"should not bail out when an update is scheduled from within an event handler"},{"ancestorTitles":["ReactDOMHooks"],"failureMessages":[],"fullName":"ReactDOMHooks [GATED, SHOULD FAIL] should not bail out when an update is scheduled from within an event handler in Concurrent Mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not bail out when an update is scheduled from within an event handler in Concurrent Mode"}],"endTime":1639318810686,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMHooks-test.js","startTime":1639318810322,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactServerRenderingBrowser"],"failureMessages":[],"fullName":"ReactServerRenderingBrowser provides the same top-level API as react-dom/server","location":{"column":3,"line":27},"status":"passed","title":"provides the same top-level API as react-dom/server"},{"ancestorTitles":["ReactServerRenderingBrowser"],"failureMessages":[],"fullName":"ReactServerRenderingBrowser returns the same results as react-dom/server","location":{"column":3,"line":33},"status":"passed","title":"returns the same results as react-dom/server"},{"ancestorTitles":["ReactServerRenderingBrowser"],"failureMessages":[],"fullName":"ReactServerRenderingBrowser throws meaningfully for server-only APIs","location":{"column":3,"line":55},"status":"passed","title":"throws meaningfully for server-only APIs"}],"endTime":1639318811019,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactServerRenderingBrowser-test.js","startTime":1639318810747,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with one child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a strict mode with one child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with one child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a strict mode with one child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with one child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a strict mode with one child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with one child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a strict mode with one child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with one child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a strict mode with one child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with several children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a strict mode with several children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with several children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a strict mode with several children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with several children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a strict mode with several children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with several children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a strict mode with several children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a strict mode with several children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a strict mode with several children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a nested strict mode with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a nested strict mode with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a nested strict mode with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a nested strict mode with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a nested strict mode with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a nested strict mode with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a nested strict mode with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a nested strict mode with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders a nested strict mode with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a nested strict mode with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders an empty strict mode with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an empty strict mode with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders an empty strict mode with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an empty strict mode with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders an empty strict mode with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an empty strict mode with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders an empty strict mode with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an empty strict mode with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.StrictMode"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.StrictMode renders an empty strict mode with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an empty strict mode with client render on top of bad server markup"}],"endTime":1639318812762,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationModes-test.js","startTime":1639318811085,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with one child with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a fragment with one child with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with one child with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a fragment with one child with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with one child with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a fragment with one child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with one child with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a fragment with one child with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with one child with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a fragment with one child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with several children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a fragment with several children with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with several children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a fragment with several children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with several children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a fragment with several children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with several children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a fragment with several children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a fragment with several children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a fragment with several children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a nested fragment with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a nested fragment with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a nested fragment with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a nested fragment with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a nested fragment with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a nested fragment with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a nested fragment with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a nested fragment with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders a nested fragment with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a nested fragment with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders an empty fragment with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders an empty fragment with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders an empty fragment with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders an empty fragment with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders an empty fragment with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders an empty fragment with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders an empty fragment with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders an empty fragment with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","React.Fragment"],"failureMessages":[],"fullName":"ReactDOMServerIntegration React.Fragment renders an empty fragment with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders an empty fragment with client render on top of bad server markup"}],"endTime":1639318814511,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationFragment-test.js","startTime":1639318812835,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should support module pattern components","location":{"column":5,"line":137},"status":"passed","title":"should support module pattern components"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should support rendering to different child types over time","location":{"column":3,"line":159},"status":"passed","title":"should support rendering to different child types over time"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should not thrash a server rendered layout with client side one","location":{"column":3,"line":173},"status":"passed","title":"should not thrash a server rendered layout with client side one"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should react to state changes from callbacks","location":{"column":3,"line":210},"status":"passed","title":"should react to state changes from callbacks"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should rewire refs when rendering to different child types","location":{"column":3,"line":225},"status":"passed","title":"should rewire refs when rendering to different child types"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should not cache old DOM nodes when switching constructors","location":{"column":3,"line":235},"status":"passed","title":"should not cache old DOM nodes when switching constructors"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should use default values for undefined props","location":{"column":3,"line":259},"status":"passed","title":"should use default values for undefined props"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should not mutate passed-in props object","location":{"column":3,"line":282},"status":"passed","title":"should not mutate passed-in props object"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn about `forceUpdate` on not-yet-mounted components","location":{"column":3,"line":301},"status":"passed","title":"should warn about `forceUpdate` on not-yet-mounted components"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn about `setState` on not-yet-mounted components","location":{"column":3,"line":325},"status":"passed","title":"should warn about `setState` on not-yet-mounted components"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn about `forceUpdate` on unmounted components","location":{"column":3,"line":349},"status":"passed","title":"should warn about `forceUpdate` on unmounted components"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn about `setState` on unmounted components","location":{"column":3,"line":379},"status":"passed","title":"should warn about `setState` on unmounted components"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should silently allow `setState`, not call cb on unmounting components","location":{"column":3,"line":426},"status":"passed","title":"should silently allow `setState`, not call cb on unmounting components"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn when rendering a class with a render method that does not extend React.Component","location":{"column":3,"line":454},"status":"passed","title":"should warn when rendering a class with a render method that does not extend React.Component"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn about `setState` in render","location":{"column":3,"line":477},"status":"passed","title":"should warn about `setState` in render"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should cleanup even if render() fatals","location":{"column":3,"line":523},"status":"passed","title":"should cleanup even if render() fatals"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should call componentWillUnmount before unmounting","location":{"column":3,"line":541},"status":"passed","title":"should call componentWillUnmount before unmounting"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn when shouldComponentUpdate() returns undefined","location":{"column":3,"line":571},"status":"passed","title":"should warn when shouldComponentUpdate() returns undefined"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn when componentDidUnmount method is defined","location":{"column":3,"line":592},"status":"passed","title":"should warn when componentDidUnmount method is defined"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn when componentDidReceiveProps method is defined","location":{"column":3,"line":608},"status":"passed","title":"should warn when componentDidReceiveProps method is defined"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn when defaultProps was defined as an instance property","location":{"column":3,"line":626},"status":"passed","title":"should warn when defaultProps was defined as an instance property"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should pass context to children when not owner","location":{"column":3,"line":644},"status":"passed","title":"should pass context to children when not owner"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should skip update when rerendering element in container","location":{"column":3,"line":685},"status":"passed","title":"should skip update when rerendering element in container"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should pass context when re-rendered for static child","location":{"column":3,"line":709},"status":"passed","title":"should pass context when re-rendered for static child"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should pass context when re-rendered for static child within a composite component","location":{"column":3,"line":769},"status":"passed","title":"should pass context when re-rendered for static child within a composite component"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should pass context transitively","location":{"column":3,"line":822},"status":"passed","title":"should pass context transitively"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should pass context when re-rendered","location":{"column":3,"line":883},"status":"passed","title":"should pass context when re-rendered"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent unmasked context propagates through updates","location":{"column":3,"line":937},"status":"passed","title":"unmasked context propagates through updates"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should trigger componentWillReceiveProps for context changes","location":{"column":3,"line":1000},"status":"passed","title":"should trigger componentWillReceiveProps for context changes"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should disallow nested render calls","location":{"column":3,"line":1112},"status":"passed","title":"should disallow nested render calls"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent only renders once if updated in componentWillReceiveProps","location":{"column":3,"line":1134},"status":"passed","title":"only renders once if updated in componentWillReceiveProps"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent only renders once if updated in componentWillReceiveProps when batching","location":{"column":3,"line":1162},"status":"passed","title":"only renders once if updated in componentWillReceiveProps when batching"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should update refs if shouldComponentUpdate gives false","location":{"column":3,"line":1192},"status":"passed","title":"should update refs if shouldComponentUpdate gives false"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should allow access to findDOMNode in componentWillUnmount","location":{"column":3,"line":1243},"status":"passed","title":"should allow access to findDOMNode in componentWillUnmount"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent context should be passed down from the parent","location":{"column":3,"line":1270},"status":"passed","title":"context should be passed down from the parent"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should replace state","location":{"column":3,"line":1306},"status":"passed","title":"should replace state"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should support objects with prototypes as state","location":{"column":3,"line":1322},"status":"passed","title":"should support objects with prototypes as state"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should not warn about unmounting during unmounting","location":{"column":3,"line":1372},"status":"passed","title":"should not warn about unmounting during unmounting"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn when mutated props are passed","location":{"column":3,"line":1405},"status":"passed","title":"should warn when mutated props are passed"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should only call componentWillUnmount once","location":{"column":3,"line":1425},"status":"passed","title":"should only call componentWillUnmount once"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent prepares new child before unmounting old","location":{"column":3,"line":1466},"status":"passed","title":"prepares new child before unmounting old"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent respects a shallow shouldComponentUpdate implementation","location":{"column":3,"line":1507},"status":"passed","title":"respects a shallow shouldComponentUpdate implementation"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent does not do a deep comparison for a shallow shouldComponentUpdate implementation","location":{"column":3,"line":1576},"status":"passed","title":"does not do a deep comparison for a shallow shouldComponentUpdate implementation"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should call setState callback with no arguments","location":{"column":3,"line":1622},"status":"passed","title":"should call setState callback with no arguments"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent this.state should be updated on setState callback inside componentWillMount","location":{"column":3,"line":1637},"status":"passed","title":"this.state should be updated on setState callback inside componentWillMount"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should call the setState callback even if shouldComponentUpdate = false","location":{"column":3,"line":1665},"status":"passed","title":"should call the setState callback even if shouldComponentUpdate = false"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should return a meaningful warning when constructor is returned","location":{"column":3,"line":1704},"status":"passed","title":"should return a meaningful warning when constructor is returned"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn about reassigning this.props while rendering","location":{"column":3,"line":1730},"status":"passed","title":"should warn about reassigning this.props while rendering"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should return error if render is not defined","location":{"column":3,"line":1749},"status":"passed","title":"should return error if render is not defined"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should support classes shadowing isReactComponent","location":{"column":3,"line":1768},"status":"passed","title":"should support classes shadowing isReactComponent"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should not warn on updating function component from componentWillMount","location":{"column":3,"line":1780},"status":"passed","title":"should not warn on updating function component from componentWillMount"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should not warn on updating function component from componentWillUpdate","location":{"column":3,"line":1806},"status":"passed","title":"should not warn on updating function component from componentWillUpdate"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should not warn on updating function component from componentWillReceiveProps","location":{"column":3,"line":1833},"status":"passed","title":"should not warn on updating function component from componentWillReceiveProps"},{"ancestorTitles":["ReactCompositeComponent"],"failureMessages":[],"fullName":"ReactCompositeComponent should warn on updating function component from render","location":{"column":3,"line":1860},"status":"passed","title":"should warn on updating function component from render"}],"endTime":1639318819176,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactCompositeComponent-test.js","startTime":1639318814577,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should handle className","location":{"column":5,"line":28},"status":"passed","title":"should handle className"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should gracefully handle various style value types","location":{"column":5,"line":40},"status":"passed","title":"should gracefully handle various style value types"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not update styles when mutating a proxy style object","location":{"column":5,"line":67},"status":"passed","title":"should not update styles when mutating a proxy style object"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should throw when mutating style objects","location":{"column":5,"line":129},"status":"passed","title":"should throw when mutating style objects"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should warn for unknown prop","location":{"column":5,"line":146},"status":"passed","title":"should warn for unknown prop"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should group multiple unknown prop warnings together","location":{"column":5,"line":158},"status":"passed","title":"should group multiple unknown prop warnings together"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should warn for onDblClick prop","location":{"column":5,"line":170},"status":"passed","title":"should warn for onDblClick prop"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should warn for unknown string event handlers","location":{"column":5,"line":179},"status":"passed","title":"should warn for unknown string event handlers"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should warn for unknown function event handlers","location":{"column":5,"line":204},"status":"passed","title":"should warn for unknown function event handlers"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should warn for badly cased React attributes","location":{"column":5,"line":229},"status":"passed","title":"should warn for badly cased React attributes"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not warn for \"0\" as a unitless style value","location":{"column":5,"line":237},"status":"passed","title":"should not warn for \"0\" as a unitless style value"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should warn nicely about NaN in style","location":{"column":5,"line":247},"status":"passed","title":"should warn nicely about NaN in style"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should update styles if initially null","location":{"column":5,"line":257},"status":"passed","title":"should update styles if initially null"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should update styles if updated to null multiple times","location":{"column":5,"line":270},"status":"passed","title":"should update styles if updated to null multiple times"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should allow named slot projection on both web components and regular DOM elements","location":{"column":5,"line":291},"status":"passed","title":"should allow named slot projection on both web components and regular DOM elements"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should skip reserved props on web components","location":{"column":5,"line":308},"status":"passed","title":"should skip reserved props on web components"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should skip dangerouslySetInnerHTML on web components","location":{"column":5,"line":344},"status":"passed","title":"should skip dangerouslySetInnerHTML on web components"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should render null and undefined as empty but print other falsy values","location":{"column":5,"line":364},"status":"passed","title":"should render null and undefined as empty but print other falsy values"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should remove attributes","location":{"column":5,"line":401},"status":"passed","title":"should remove attributes"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should remove properties","location":{"column":5,"line":410},"status":"passed","title":"should remove properties"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not set null/undefined attributes","location":{"column":5,"line":419},"status":"passed","title":"should not set null/undefined attributes"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should apply React-specific aliases to HTML elements","location":{"column":5,"line":549},"status":"passed","title":"should apply React-specific aliases to HTML elements"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should apply React-specific aliases to SVG elements","location":{"column":5,"line":582},"status":"passed","title":"should apply React-specific aliases to SVG elements"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should properly update custom attributes on custom elements","location":{"column":5,"line":615},"status":"passed","title":"should properly update custom attributes on custom elements"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not apply React-specific aliases to custom elements","location":{"column":5,"line":624},"status":"passed","title":"should not apply React-specific aliases to custom elements"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should clear a single style prop when changing `style`","location":{"column":5,"line":643},"status":"passed","title":"should clear a single style prop when changing `style`"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should reject attribute key injection attack on markup for regular DOM (SSR)","location":{"column":5,"line":656},"status":"passed","title":"should reject attribute key injection attack on markup for regular DOM (SSR)"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should reject attribute key injection attack on markup for custom elements (SSR)","location":{"column":5,"line":680},"status":"passed","title":"should reject attribute key injection attack on markup for custom elements (SSR)"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should reject attribute key injection attack on mount for regular DOM","location":{"column":5,"line":704},"status":"passed","title":"should reject attribute key injection attack on mount for regular DOM"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should reject attribute key injection attack on mount for custom elements","location":{"column":5,"line":734},"status":"passed","title":"should reject attribute key injection attack on mount for custom elements"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should reject attribute key injection attack on update for regular DOM","location":{"column":5,"line":764},"status":"passed","title":"should reject attribute key injection attack on update for regular DOM"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should reject attribute key injection attack on update for custom elements","location":{"column":5,"line":795},"status":"passed","title":"should reject attribute key injection attack on update for custom elements"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should update arbitrary attributes for tags containing dashes","location":{"column":5,"line":826},"status":"passed","title":"should update arbitrary attributes for tags containing dashes"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should clear all the styles when removing `style`","location":{"column":5,"line":838},"status":"passed","title":"should clear all the styles when removing `style`"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should update styles when `style` changes from null to object","location":{"column":5,"line":850},"status":"passed","title":"should update styles when `style` changes from null to object"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not reset innerHTML for when children is null","location":{"column":5,"line":861},"status":"passed","title":"should not reset innerHTML for when children is null"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should reset innerHTML when switching from a direct text child to an empty child","location":{"column":5,"line":871},"status":"passed","title":"should reset innerHTML when switching from a direct text child to an empty child"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should empty element when removing innerHTML","location":{"column":5,"line":883},"status":"passed","title":"should empty element when removing innerHTML"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should transition from string content to innerHTML","location":{"column":5,"line":895},"status":"passed","title":"should transition from string content to innerHTML"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should transition from innerHTML to string content","location":{"column":5,"line":907},"status":"passed","title":"should transition from innerHTML to string content"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should transition from innerHTML to children in nested el","location":{"column":5,"line":919},"status":"passed","title":"should transition from innerHTML to children in nested el"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should transition from children to innerHTML in nested el","location":{"column":5,"line":940},"status":"passed","title":"should transition from children to innerHTML in nested el"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not incur unnecessary DOM mutations for attributes","location":{"column":5,"line":961},"status":"passed","title":"should not incur unnecessary DOM mutations for attributes"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not incur unnecessary DOM mutations for string properties","location":{"column":5,"line":999},"status":"passed","title":"should not incur unnecessary DOM mutations for string properties"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not incur unnecessary DOM mutations for boolean properties","location":{"column":5,"line":1032},"status":"passed","title":"should not incur unnecessary DOM mutations for boolean properties"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should ignore attribute list for elements with the \"is\" attribute","location":{"column":5,"line":1061},"status":"passed","title":"should ignore attribute list for elements with the \"is\" attribute"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should warn about non-string \"is\" attribute","location":{"column":5,"line":1067},"status":"passed","title":"should warn about non-string \"is\" attribute"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM should not update when switching between null/undefined","location":{"column":5,"line":1077},"status":"passed","title":"should not update when switching between null/undefined"},{"ancestorTitles":["ReactDOMComponent","updateDOM"],"failureMessages":[],"fullName":"ReactDOMComponent updateDOM handles multiple child updates without interference","location":{"column":5,"line":1092},"status":"passed","title":"handles multiple child updates without interference"},{"ancestorTitles":["ReactDOMComponent","createOpenTagMarkup"],"failureMessages":[],"fullName":"ReactDOMComponent createOpenTagMarkup should generate the correct markup with className","location":{"column":5,"line":1149},"status":"passed","title":"should generate the correct markup with className"},{"ancestorTitles":["ReactDOMComponent","createOpenTagMarkup"],"failureMessages":[],"fullName":"ReactDOMComponent createOpenTagMarkup should escape style names and values","location":{"column":5,"line":1155},"status":"passed","title":"should escape style names and values"},{"ancestorTitles":["ReactDOMComponent","createContentMarkup"],"failureMessages":[],"fullName":"ReactDOMComponent createContentMarkup should handle dangerouslySetInnerHTML","location":{"column":5,"line":1179},"status":"passed","title":"should handle dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should work error event on <source> element","location":{"column":5,"line":1200},"status":"passed","title":"should work error event on <source> element"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should not duplicate uppercased selfclosing tags","location":{"column":5,"line":1224},"status":"passed","title":"should not duplicate uppercased selfclosing tags"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should warn on upper case HTML tags, not SVG nor custom tags","location":{"column":5,"line":1243},"status":"passed","title":"should warn on upper case HTML tags, not SVG nor custom tags"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should warn on props reserved for future use","location":{"column":5,"line":1258},"status":"passed","title":"should warn on props reserved for future use"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should warn if the tag is unrecognized","location":{"column":5,"line":1267},"status":"passed","title":"should warn if the tag is unrecognized"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should throw on children for void elements","location":{"column":5,"line":1303},"status":"passed","title":"should throw on children for void elements"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should throw on dangerouslySetInnerHTML for void elements","location":{"column":5,"line":1313},"status":"passed","title":"should throw on dangerouslySetInnerHTML for void elements"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should treat menuitem as a void element but still create the closing tag","location":{"column":5,"line":1326},"status":"passed","title":"should treat menuitem as a void element but still create the closing tag"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should validate against multiple children props","location":{"column":5,"line":1353},"status":"passed","title":"should validate against multiple children props"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should validate against use of innerHTML","location":{"column":5,"line":1361},"status":"passed","title":"should validate against use of innerHTML"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should validate against use of innerHTML without case sensitivity","location":{"column":5,"line":1367},"status":"passed","title":"should validate against use of innerHTML without case sensitivity"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should validate use of dangerouslySetInnerHTML","location":{"column":5,"line":1373},"status":"passed","title":"should validate use of dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should validate use of dangerouslySetInnerHTML","location":{"column":5,"line":1382},"status":"passed","title":"should validate use of dangerouslySetInnerHTML"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should allow {__html: null}","location":{"column":5,"line":1391},"status":"passed","title":"should allow {__html: null}"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should warn about contentEditable and children","location":{"column":5,"line":1397},"status":"passed","title":"should warn about contentEditable and children"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should respect suppressContentEditableWarning","location":{"column":5,"line":1408},"status":"passed","title":"should respect suppressContentEditableWarning"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should validate against invalid styles","location":{"column":5,"line":1416},"status":"passed","title":"should validate against invalid styles"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should throw for children on void elements","location":{"column":5,"line":1426},"status":"passed","title":"should throw for children on void elements"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should support custom elements which extend native elements","location":{"column":5,"line":1442},"status":"passed","title":"should support custom elements which extend native elements"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should work load and error events on <image> element in SVG","location":{"column":5,"line":1451},"status":"passed","title":"should work load and error events on <image> element in SVG"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should receive a load event on <link> elements","location":{"column":5,"line":1481},"status":"passed","title":"should receive a load event on <link> elements"},{"ancestorTitles":["ReactDOMComponent","mountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent mountComponent should receive an error event on <link> elements","location":{"column":5,"line":1499},"status":"passed","title":"should receive an error event on <link> elements"},{"ancestorTitles":["ReactDOMComponent","updateComponent"],"failureMessages":[],"fullName":"ReactDOMComponent updateComponent should warn against children for void elements","location":{"column":5,"line":1525},"status":"passed","title":"should warn against children for void elements"},{"ancestorTitles":["ReactDOMComponent","updateComponent"],"failureMessages":[],"fullName":"ReactDOMComponent updateComponent should warn against dangerouslySetInnerHTML for void elements","location":{"column":5,"line":1536},"status":"passed","title":"should warn against dangerouslySetInnerHTML for void elements"},{"ancestorTitles":["ReactDOMComponent","updateComponent"],"failureMessages":[],"fullName":"ReactDOMComponent updateComponent should validate against multiple children props","location":{"column":5,"line":1550},"status":"passed","title":"should validate against multiple children props"},{"ancestorTitles":["ReactDOMComponent","updateComponent"],"failureMessages":[],"fullName":"ReactDOMComponent updateComponent should warn about contentEditable and children","location":{"column":5,"line":1563},"status":"passed","title":"should warn about contentEditable and children"},{"ancestorTitles":["ReactDOMComponent","updateComponent"],"failureMessages":[],"fullName":"ReactDOMComponent updateComponent should validate against invalid styles","location":{"column":5,"line":1574},"status":"passed","title":"should validate against invalid styles"},{"ancestorTitles":["ReactDOMComponent","updateComponent"],"failureMessages":[],"fullName":"ReactDOMComponent updateComponent should report component containing invalid styles","location":{"column":5,"line":1586},"status":"passed","title":"should report component containing invalid styles"},{"ancestorTitles":["ReactDOMComponent","updateComponent"],"failureMessages":[],"fullName":"ReactDOMComponent updateComponent should properly escape text content and attributes values","location":{"column":5,"line":1602},"status":"passed","title":"should properly escape text content and attributes values"},{"ancestorTitles":["ReactDOMComponent","unmountComponent"],"failureMessages":[],"fullName":"ReactDOMComponent unmountComponent unmounts children before unsetting DOM node info","location":{"column":5,"line":1625},"status":"passed","title":"unmounts children before unsetting DOM node info"},{"ancestorTitles":["ReactDOMComponent","tag sanitization"],"failureMessages":[],"fullName":"ReactDOMComponent tag sanitization should throw when an invalid tag name is used server-side","location":{"column":5,"line":1649},"status":"passed","title":"should throw when an invalid tag name is used server-side"},{"ancestorTitles":["ReactDOMComponent","tag sanitization"],"failureMessages":[],"fullName":"ReactDOMComponent tag sanitization should throw when an attack vector is used server-side","location":{"column":5,"line":1656},"status":"passed","title":"should throw when an attack vector is used server-side"},{"ancestorTitles":["ReactDOMComponent","tag sanitization"],"failureMessages":[],"fullName":"ReactDOMComponent tag sanitization should throw when an invalid tag name is used","location":{"column":5,"line":1663},"status":"passed","title":"should throw when an invalid tag name is used"},{"ancestorTitles":["ReactDOMComponent","tag sanitization"],"failureMessages":[],"fullName":"ReactDOMComponent tag sanitization should throw when an attack vector is used","location":{"column":5,"line":1668},"status":"passed","title":"should throw when an attack vector is used"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation warns on invalid nesting","location":{"column":5,"line":1675},"status":"passed","title":"warns on invalid nesting"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation warns on invalid nesting at root","location":{"column":5,"line":1691},"status":"passed","title":"warns on invalid nesting at root"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation warns nicely for table rows","location":{"column":5,"line":1710},"status":"passed","title":"warns nicely for table rows"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives useful context in warnings","location":{"column":5,"line":1749},"status":"passed","title":"gives useful context in warnings"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives useful context in warnings 2","location":{"column":5,"line":1776},"status":"passed","title":"gives useful context in warnings 2"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives useful context in warnings 3","location":{"column":5,"line":1817},"status":"passed","title":"gives useful context in warnings 3"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives useful context in warnings 4","location":{"column":5,"line":1852},"status":"passed","title":"gives useful context in warnings 4"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives useful context in warnings 5","location":{"column":5,"line":1874},"status":"passed","title":"gives useful context in warnings 5"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about incorrect casing on properties (ssr)","location":{"column":5,"line":1923},"status":"passed","title":"should warn about incorrect casing on properties (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about incorrect casing on event handlers (ssr)","location":{"column":5,"line":1931},"status":"passed","title":"should warn about incorrect casing on event handlers (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about incorrect casing on properties","location":{"column":5,"line":1953},"status":"passed","title":"should warn about incorrect casing on properties"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about incorrect casing on event handlers","location":{"column":5,"line":1961},"status":"passed","title":"should warn about incorrect casing on event handlers"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about class","location":{"column":5,"line":1974},"status":"passed","title":"should warn about class"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about class (ssr)","location":{"column":5,"line":1982},"status":"passed","title":"should warn about class (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about props that are no longer supported","location":{"column":5,"line":1990},"status":"passed","title":"should warn about props that are no longer supported"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about props that are no longer supported without case sensitivity","location":{"column":5,"line":2005},"status":"passed","title":"should warn about props that are no longer supported without case sensitivity"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about props that are no longer supported (ssr)","location":{"column":5,"line":2019},"status":"passed","title":"should warn about props that are no longer supported (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should warn about props that are no longer supported without case sensitivity (ssr)","location":{"column":5,"line":2033},"status":"passed","title":"should warn about props that are no longer supported without case sensitivity (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives source code refs for unknown prop warning","location":{"column":5,"line":2047},"status":"passed","title":"gives source code refs for unknown prop warning"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives source code refs for unknown prop warning (ssr)","location":{"column":5,"line":2061},"status":"passed","title":"gives source code refs for unknown prop warning (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives source code refs for unknown prop warning for update render","location":{"column":5,"line":2080},"status":"passed","title":"gives source code refs for unknown prop warning for update render"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives source code refs for unknown prop warning for exact elements","location":{"column":5,"line":2091},"status":"passed","title":"gives source code refs for unknown prop warning for exact elements"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives source code refs for unknown prop warning for exact elements (ssr)","location":{"column":5,"line":2108},"status":"passed","title":"gives source code refs for unknown prop warning for exact elements (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives source code refs for unknown prop warning for exact elements in composition","location":{"column":5,"line":2127},"status":"passed","title":"gives source code refs for unknown prop warning for exact elements in composition"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation gives source code refs for unknown prop warning for exact elements in composition (ssr)","location":{"column":5,"line":2175},"status":"passed","title":"gives source code refs for unknown prop warning for exact elements in composition (ssr)"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should suggest property name if available","location":{"column":5,"line":2225},"status":"passed","title":"should suggest property name if available"},{"ancestorTitles":["ReactDOMComponent","nesting validation"],"failureMessages":[],"fullName":"ReactDOMComponent nesting validation should suggest property name if available (ssr)","location":{"column":5,"line":2243},"status":"passed","title":"should suggest property name if available (ssr)"},{"ancestorTitles":["ReactDOMComponent","whitespace"],"failureMessages":[],"fullName":"ReactDOMComponent whitespace renders innerHTML and preserves whitespace","location":{"column":5,"line":2262},"status":"passed","title":"renders innerHTML and preserves whitespace"},{"ancestorTitles":["ReactDOMComponent","whitespace"],"failureMessages":[],"fullName":"ReactDOMComponent whitespace render and then updates innerHTML and preserves whitespace","location":{"column":5,"line":2271},"status":"passed","title":"render and then updates innerHTML and preserves whitespace"},{"ancestorTitles":["ReactDOMComponent","Attributes with aliases"],"failureMessages":[],"fullName":"ReactDOMComponent Attributes with aliases sets aliased attributes on HTML attributes","location":{"column":5,"line":2286},"status":"passed","title":"sets aliased attributes on HTML attributes"},{"ancestorTitles":["ReactDOMComponent","Attributes with aliases"],"failureMessages":[],"fullName":"ReactDOMComponent Attributes with aliases sets incorrectly cased aliased attributes on HTML attributes with a warning","location":{"column":5,"line":2297},"status":"passed","title":"sets incorrectly cased aliased attributes on HTML attributes with a warning"},{"ancestorTitles":["ReactDOMComponent","Attributes with aliases"],"failureMessages":[],"fullName":"ReactDOMComponent Attributes with aliases sets aliased attributes on SVG elements with a warning","location":{"column":5,"line":2308},"status":"passed","title":"sets aliased attributes on SVG elements with a warning"},{"ancestorTitles":["ReactDOMComponent","Attributes with aliases"],"failureMessages":[],"fullName":"ReactDOMComponent Attributes with aliases sets aliased attributes on custom elements","location":{"column":5,"line":2324},"status":"passed","title":"sets aliased attributes on custom elements"},{"ancestorTitles":["ReactDOMComponent","Attributes with aliases"],"failureMessages":[],"fullName":"ReactDOMComponent Attributes with aliases aliased attributes on custom elements with bad casing","location":{"column":5,"line":2332},"status":"passed","title":"aliased attributes on custom elements with bad casing"},{"ancestorTitles":["ReactDOMComponent","Attributes with aliases"],"failureMessages":[],"fullName":"ReactDOMComponent Attributes with aliases updates aliased attributes on custom elements","location":{"column":5,"line":2340},"status":"passed","title":"updates aliased attributes on custom elements"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes allows assignment of custom attributes with string values","location":{"column":5,"line":2350},"status":"passed","title":"allows assignment of custom attributes with string values"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes removes custom attributes","location":{"column":5,"line":2356},"status":"passed","title":"removes custom attributes"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes does not assign a boolean custom attributes as a string","location":{"column":5,"line":2367},"status":"passed","title":"does not assign a boolean custom attributes as a string"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes does not assign an implicit boolean custom attributes","location":{"column":5,"line":2380},"status":"passed","title":"does not assign an implicit boolean custom attributes"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes assigns a numeric custom attributes as a string","location":{"column":5,"line":2394},"status":"passed","title":"assigns a numeric custom attributes as a string"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes will not assign a function custom attributes","location":{"column":5,"line":2400},"status":"passed","title":"will not assign a function custom attributes"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes will assign an object custom attributes","location":{"column":5,"line":2409},"status":"passed","title":"will assign an object custom attributes"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes allows cased data attributes","location":{"column":5,"line":2414},"status":"passed","title":"allows cased data attributes"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes allows cased custom attributes","location":{"column":5,"line":2429},"status":"passed","title":"allows cased custom attributes"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes warns on NaN attributes","location":{"column":5,"line":2444},"status":"passed","title":"warns on NaN attributes"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes removes a property when it becomes invalid","location":{"column":5,"line":2456},"status":"passed","title":"removes a property when it becomes invalid"},{"ancestorTitles":["ReactDOMComponent","Custom attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Custom attributes warns on bad casing of known HTML attributes","location":{"column":5,"line":2466},"status":"passed","title":"warns on bad casing of known HTML attributes"},{"ancestorTitles":["ReactDOMComponent","Object stringification"],"failureMessages":[],"fullName":"ReactDOMComponent Object stringification allows objects on known properties","location":{"column":5,"line":2479},"status":"passed","title":"allows objects on known properties"},{"ancestorTitles":["ReactDOMComponent","Object stringification"],"failureMessages":[],"fullName":"ReactDOMComponent Object stringification should pass objects as attributes if they define toString","location":{"column":5,"line":2484},"status":"passed","title":"should pass objects as attributes if they define toString"},{"ancestorTitles":["ReactDOMComponent","Object stringification"],"failureMessages":[],"fullName":"ReactDOMComponent Object stringification passes objects on known SVG attributes if they do not define toString","location":{"column":5,"line":2502},"status":"passed","title":"passes objects on known SVG attributes if they do not define toString"},{"ancestorTitles":["ReactDOMComponent","Object stringification"],"failureMessages":[],"fullName":"ReactDOMComponent Object stringification passes objects on custom attributes if they do not define toString","location":{"column":5,"line":2512},"status":"passed","title":"passes objects on custom attributes if they do not define toString"},{"ancestorTitles":["ReactDOMComponent","Object stringification"],"failureMessages":[],"fullName":"ReactDOMComponent Object stringification allows objects that inherit a custom toString method","location":{"column":5,"line":2522},"status":"passed","title":"allows objects that inherit a custom toString method"},{"ancestorTitles":["ReactDOMComponent","Object stringification"],"failureMessages":[],"fullName":"ReactDOMComponent Object stringification assigns ajaxify (an important internal FB attribute)","location":{"column":5,"line":2530},"status":"passed","title":"assigns ajaxify (an important internal FB attribute)"},{"ancestorTitles":["ReactDOMComponent","String boolean attributes"],"failureMessages":[],"fullName":"ReactDOMComponent String boolean attributes does not assign string boolean attributes for custom attributes","location":{"column":5,"line":2539},"status":"passed","title":"does not assign string boolean attributes for custom attributes"},{"ancestorTitles":["ReactDOMComponent","String boolean attributes"],"failureMessages":[],"fullName":"ReactDOMComponent String boolean attributes stringifies the boolean true for allowed attributes","location":{"column":5,"line":2552},"status":"passed","title":"stringifies the boolean true for allowed attributes"},{"ancestorTitles":["ReactDOMComponent","String boolean attributes"],"failureMessages":[],"fullName":"ReactDOMComponent String boolean attributes stringifies the boolean false for allowed attributes","location":{"column":5,"line":2558},"status":"passed","title":"stringifies the boolean false for allowed attributes"},{"ancestorTitles":["ReactDOMComponent","String boolean attributes"],"failureMessages":[],"fullName":"ReactDOMComponent String boolean attributes stringifies implicit booleans for allowed attributes","location":{"column":5,"line":2564},"status":"passed","title":"stringifies implicit booleans for allowed attributes"},{"ancestorTitles":["ReactDOMComponent","Boolean attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Boolean attributes warns on the ambiguous string value \"false\"","location":{"column":5,"line":2573},"status":"passed","title":"warns on the ambiguous string value \"false\""},{"ancestorTitles":["ReactDOMComponent","Boolean attributes"],"failureMessages":[],"fullName":"ReactDOMComponent Boolean attributes warns on the potentially-ambiguous string value \"true\"","location":{"column":5,"line":2586},"status":"passed","title":"warns on the potentially-ambiguous string value \"true\""},{"ancestorTitles":["ReactDOMComponent","Hyphenated SVG elements"],"failureMessages":[],"fullName":"ReactDOMComponent Hyphenated SVG elements the font-face element is not a custom element","location":{"column":5,"line":2601},"status":"passed","title":"the font-face element is not a custom element"},{"ancestorTitles":["ReactDOMComponent","Hyphenated SVG elements"],"failureMessages":[],"fullName":"ReactDOMComponent Hyphenated SVG elements the font-face element does not allow unknown boolean values","location":{"column":5,"line":2618},"status":"passed","title":"the font-face element does not allow unknown boolean values"},{"ancestorTitles":["ReactDOMComponent","Custom elements"],"failureMessages":[],"fullName":"ReactDOMComponent Custom elements does not strip unknown boolean attributes","location":{"column":5,"line":2643},"status":"passed","title":"does not strip unknown boolean attributes"},{"ancestorTitles":["ReactDOMComponent","Custom elements"],"failureMessages":[],"fullName":"ReactDOMComponent Custom elements does not strip the on* attributes","location":{"column":5,"line":2656},"status":"passed","title":"does not strip the on* attributes"},{"ancestorTitles":["ReactDOMComponent"],"failureMessages":[],"fullName":"ReactDOMComponent receives events in specific order","location":{"column":3,"line":2670},"status":"passed","title":"receives events in specific order"},{"ancestorTitles":["ReactDOMComponent","iOS Tap Highlight"],"failureMessages":[],"fullName":"ReactDOMComponent iOS Tap Highlight adds onclick handler to elements with onClick prop","location":{"column":5,"line":2735},"status":"passed","title":"adds onclick handler to elements with onClick prop"},{"ancestorTitles":["ReactDOMComponent","iOS Tap Highlight"],"failureMessages":[],"fullName":"ReactDOMComponent iOS Tap Highlight adds onclick handler to a portal root","location":{"column":5,"line":2747},"status":"passed","title":"adds onclick handler to a portal root"},{"ancestorTitles":["ReactDOMComponent","iOS Tap Highlight"],"failureMessages":[],"fullName":"ReactDOMComponent iOS Tap Highlight does not add onclick handler to the React root","location":{"column":5,"line":2762},"status":"passed","title":"does not add onclick handler to the React root"}],"endTime":1639318830288,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMComponent-test.js","startTime":1639318819245,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDeprecationWarnings"],"failureMessages":[],"fullName":"ReactDeprecationWarnings should warn when given defaultProps","location":{"column":3,"line":37},"status":"passed","title":"should warn when given defaultProps"},{"ancestorTitles":["ReactDeprecationWarnings"],"failureMessages":[],"fullName":"ReactDeprecationWarnings should warn when given string refs","location":{"column":3,"line":54},"status":"passed","title":"should warn when given string refs"},{"ancestorTitles":["ReactDeprecationWarnings"],"failureMessages":[],"fullName":"ReactDeprecationWarnings should not warn when owner and self are the same for string refs","location":{"column":3,"line":77},"status":"passed","title":"should not warn when owner and self are the same for string refs"},{"ancestorTitles":["ReactDeprecationWarnings"],"failureMessages":[],"fullName":"ReactDeprecationWarnings should warn when owner and self are different for string refs","location":{"column":3,"line":94},"status":"passed","title":"should warn when owner and self are different for string refs"},{"ancestorTitles":["ReactDeprecationWarnings"],"failureMessages":[],"fullName":"ReactDeprecationWarnings should warn when owner and self are different for string refs","location":{"column":5,"line":118},"status":"passed","title":"should warn when owner and self are different for string refs"}],"endTime":1639318830850,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDeprecationWarnings-test.internal.js","startTime":1639318830357,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","refs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration refs should not run ref code on server","location":{"column":5,"line":48},"status":"passed","title":"should not run ref code on server"},{"ancestorTitles":["ReactDOMServerIntegration","refs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration refs should run ref code on client","location":{"column":5,"line":59},"status":"passed","title":"should run ref code on client"},{"ancestorTitles":["ReactDOMServerIntegration","refs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration refs should send the correct element to ref functions on client","location":{"column":5,"line":70},"status":"passed","title":"should send the correct element to ref functions on client"},{"ancestorTitles":["ReactDOMServerIntegration","refs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration refs should have string refs on client when rendered over server markup","location":{"column":5,"line":82},"status":"passed","title":"should have string refs on client when rendered over server markup"},{"ancestorTitles":["ReactDOMServerIntegration"],"failureMessages":[],"fullName":"ReactDOMServerIntegration should forward refs","location":{"column":3,"line":103},"status":"passed","title":"should forward refs"}],"endTime":1639318831716,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationRefs-test.js","startTime":1639318830917,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactLegacyContextDisabled warns for legacy context","location":{"column":3,"line":41},"status":"passed","title":"warns for legacy context"},{"ancestorTitles":["ReactLegacyContextDisabled"],"failureMessages":[],"fullName":"ReactLegacyContextDisabled renders a tree with modern context","location":{"column":3,"line":148},"status":"passed","title":"renders a tree with modern context"}],"endTime":1639318832115,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactLegacyContextDisabled-test.internal.js","startTime":1639318831783,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMIframe"],"failureMessages":[],"fullName":"ReactDOMIframe should trigger load events","location":{"column":3,"line":21},"status":"passed","title":"should trigger load events"}],"endTime":1639318832392,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMIframe-test.js","startTime":1639318832182,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should have the correct mounting behavior (old hydrate API)","location":{"column":3,"line":28},"status":"passed","title":"should have the correct mounting behavior (old hydrate API)"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should have the correct mounting behavior (new hydrate API)","location":{"column":3,"line":121},"status":"passed","title":"should have the correct mounting behavior (new hydrate API)"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should emit autofocus on the server but not focus() when hydrating","location":{"column":3,"line":207},"status":"passed","title":"should emit autofocus on the server but not focus() when hydrating"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should not focus on either server or client with autofocus={false}","location":{"column":3,"line":224},"status":"passed","title":"should not focus on either server or client with autofocus={false}"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should not focus on either server or client with autofocus={false} even if there is a markup mismatch","location":{"column":3,"line":240},"status":"passed","title":"should not focus on either server or client with autofocus={false} even if there is a markup mismatch"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should warn when the style property differs","location":{"column":3,"line":258},"status":"passed","title":"should warn when the style property differs"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should not warn when the style property differs on whitespace or order in IE","location":{"column":3,"line":280},"status":"passed","title":"should not warn when the style property differs on whitespace or order in IE"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should warn when the style property differs on whitespace in non-IE browsers","location":{"column":3,"line":307},"status":"passed","title":"should warn when the style property differs on whitespace in non-IE browsers"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should throw rendering portals on the server","location":{"column":3,"line":327},"status":"passed","title":"should throw rendering portals on the server"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should be able to render and hydrate Mode components","location":{"column":3,"line":339},"status":"passed","title":"should be able to render and hydrate Mode components"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should be able to render and hydrate forwardRef components","location":{"column":3,"line":369},"status":"passed","title":"should be able to render and hydrate forwardRef components"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should be able to render and hydrate Profiler components","location":{"column":3,"line":390},"status":"passed","title":"should be able to render and hydrate Profiler components"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should ignore noscript content on the client and not warn about mismatches","location":{"column":3,"line":416},"status":"passed","title":"should ignore noscript content on the client and not warn about mismatches"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should be able to use lazy components after hydrating","location":{"column":3,"line":445},"status":"passed","title":"should be able to use lazy components after hydrating"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration [GATED, SHOULD FAIL] does not re-enter hydration after committing the first one","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not re-enter hydration after committing the first one"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration Suspense + hydration in legacy mode","location":{"column":3,"line":510},"status":"passed","title":"Suspense + hydration in legacy mode"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration Suspense + hydration in legacy mode with no fallback","location":{"column":3,"line":534},"status":"passed","title":"Suspense + hydration in legacy mode with no fallback"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should not warn if dangerouslySetInnerHtml=undefined","location":{"column":3,"line":553},"status":"passed","title":"should not warn if dangerouslySetInnerHtml=undefined"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should warn if innerHTML mismatches with dangerouslySetInnerHTML=undefined and children on the client","location":{"column":3,"line":568},"status":"passed","title":"should warn if innerHTML mismatches with dangerouslySetInnerHTML=undefined and children on the client"},{"ancestorTitles":["ReactDOMServerHydration"],"failureMessages":[],"fullName":"ReactDOMServerHydration should warn if innerHTML mismatches with dangerouslySetInnerHTML=undefined on the client","location":{"column":3,"line":589},"status":"passed","title":"should warn if innerHTML mismatches with dangerouslySetInnerHTML=undefined on the client"}],"endTime":1639318834100,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactServerRenderingHydration-test.js","startTime":1639318832469,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and an onChange with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select with a value and an onChange with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and an onChange with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select with a value and an onChange with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and an onChange with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select with a value and an onChange with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and an onChange with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select with a value and an onChange with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and an onChange with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select with a value and an onChange with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select with a value and readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select with a value and readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select with a value and readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select with a value and readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select with a value and readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and an onChange with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select with a multiple values and an onChange with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and an onChange with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select with a multiple values and an onChange with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and an onChange with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select with a multiple values and an onChange with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and an onChange with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select with a multiple values and an onChange with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and an onChange with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select with a multiple values and an onChange with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select with a multiple values and readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select with a multiple values and readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select with a multiple values and readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select with a multiple values and readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a multiple values and readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select with a multiple values and readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and no onChange/readOnly with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select with a value and no onChange/readOnly with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and no onChange/readOnly with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select with a value and no onChange/readOnly with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and no onChange/readOnly with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select with a value and no onChange/readOnly with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and no onChange/readOnly with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select with a value and no onChange/readOnly with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a value and no onChange/readOnly with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select with a value and no onChange/readOnly with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a defaultValue with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select with a defaultValue with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a defaultValue with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select with a defaultValue with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a defaultValue with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select with a defaultValue with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a defaultValue with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select with a defaultValue with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with a defaultValue with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select with a defaultValue with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select value overriding defaultValue with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select value overriding defaultValue with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select value overriding defaultValue with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select value overriding defaultValue with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select value overriding defaultValue with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with options that use dangerouslySetInnerHTML with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select with options that use dangerouslySetInnerHTML with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with options that use dangerouslySetInnerHTML with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select with options that use dangerouslySetInnerHTML with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with options that use dangerouslySetInnerHTML with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select with options that use dangerouslySetInnerHTML with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with options that use dangerouslySetInnerHTML with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select with options that use dangerouslySetInnerHTML with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select with options that use dangerouslySetInnerHTML with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select with options that use dangerouslySetInnerHTML with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect throws when rendering a select with option that uses dangerouslySetInnerHTML and 0 as child with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a select with option that uses dangerouslySetInnerHTML and 0 as child with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect throws when rendering a select with option that uses dangerouslySetInnerHTML and 0 as child with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a select with option that uses dangerouslySetInnerHTML and 0 as child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect throws when rendering a select with option that uses dangerouslySetInnerHTML and 0 as child with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a select with option that uses dangerouslySetInnerHTML and 0 as child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect throws when rendering a select with option that uses dangerouslySetInnerHTML and empty string as child with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a select with option that uses dangerouslySetInnerHTML and empty string as child with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect throws when rendering a select with option that uses dangerouslySetInnerHTML and empty string as child with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a select with option that uses dangerouslySetInnerHTML and empty string as child with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect throws when rendering a select with option that uses dangerouslySetInnerHTML and empty string as child with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a select with option that uses dangerouslySetInnerHTML and empty string as child with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue no matter the prop order with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select value overriding defaultValue no matter the prop order with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue no matter the prop order with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select value overriding defaultValue no matter the prop order with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue no matter the prop order with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select value overriding defaultValue no matter the prop order with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue no matter the prop order with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select value overriding defaultValue no matter the prop order with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select value overriding defaultValue no matter the prop order with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select value overriding defaultValue no matter the prop order with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select option with flattened children with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select option with flattened children with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select option with flattened children with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select option with flattened children with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select option with flattened children with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children and a warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a select option with flattened children and a warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children and a warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a select option with flattened children and a warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children and a warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a select option with flattened children and a warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children and a warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a select option with flattened children and a warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegrationSelect"],"failureMessages":[],"fullName":"ReactDOMServerIntegrationSelect renders a select option with flattened children and a warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a select option with flattened children and a warning with client render on top of bad server markup"}],"endTime":1639318839038,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationSelect-test.js","startTime":1639318834166,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMFizzServer"],"failureMessages":[],"fullName":"ReactDOMFizzServer [GATED, SHOULD FAIL] should call pipeToNodeWritable","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should call pipeToNodeWritable"}],"endTime":1639318839252,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMFizzServerNode-test.js","startTime":1639318839106,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should set values as properties by default","location":{"column":5,"line":26},"status":"passed","title":"should set values as properties by default"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should set values as attributes if necessary","location":{"column":5,"line":32},"status":"passed","title":"should set values as attributes if necessary"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should set values as namespace attributes if necessary","location":{"column":5,"line":39},"status":"passed","title":"should set values as namespace attributes if necessary"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should set values as boolean properties","location":{"column":5,"line":53},"status":"passed","title":"should set values as boolean properties"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should convert attribute values to string first","location":{"column":5,"line":69},"status":"passed","title":"should convert attribute values to string first"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should not remove empty attributes for special input properties","location":{"column":5,"line":83},"status":"passed","title":"should not remove empty attributes for special input properties"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should not remove empty attributes for special option properties","location":{"column":5,"line":94},"status":"passed","title":"should not remove empty attributes for special option properties"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should remove for falsey boolean properties","location":{"column":5,"line":108},"status":"passed","title":"should remove for falsey boolean properties"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should remove when setting custom attr to null","location":{"column":5,"line":114},"status":"passed","title":"should remove when setting custom attr to null"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should set className to empty string instead of null","location":{"column":5,"line":122},"status":"passed","title":"should set className to empty string instead of null"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should remove property properly for boolean properties","location":{"column":5,"line":133},"status":"passed","title":"should remove property properly for boolean properties"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should always assign the value attribute for non-inputs","location":{"column":5,"line":141},"status":"passed","title":"should always assign the value attribute for non-inputs"},{"ancestorTitles":["DOMPropertyOperations","setValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations setValueForProperty should return the progress to intermediate state on null value","location":{"column":5,"line":150},"status":"passed","title":"should return the progress to intermediate state on null value"},{"ancestorTitles":["DOMPropertyOperations","deleteValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations deleteValueForProperty should remove attributes for normal properties","location":{"column":5,"line":161},"status":"passed","title":"should remove attributes for normal properties"},{"ancestorTitles":["DOMPropertyOperations","deleteValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations deleteValueForProperty should not remove attributes for special properties","location":{"column":5,"line":169},"status":"passed","title":"should not remove attributes for special properties"},{"ancestorTitles":["DOMPropertyOperations","deleteValueForProperty"],"failureMessages":[],"fullName":"DOMPropertyOperations deleteValueForProperty should not remove attributes for custom component tag","location":{"column":5,"line":197},"status":"passed","title":"should not remove attributes for custom component tag"}],"endTime":1639318840503,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/DOMPropertyOperations-test.js","startTime":1639318839329,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["when different React version is used with string ref"],"failureMessages":[],"fullName":"when different React version is used with string ref throws the \"Refs must have owner\" warning","location":{"column":3,"line":24},"status":"passed","title":"throws the \"Refs must have owner\" warning"}],"endTime":1639318840810,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/multiple-copies-of-react-test.js","startTime":1639318840577,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child with context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child with context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child with context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child with context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child with context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders stateless child with context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders stateless child with context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders stateless child with context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders stateless child with context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders stateless child with context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with default context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child with default context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with default context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child with default context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with default context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child with default context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with default context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child with default context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders class child with default context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child with default context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with wrong context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders stateless child with wrong context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with wrong context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders stateless child with wrong context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with wrong context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders stateless child with wrong context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with wrong context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders stateless child with wrong context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders stateless child with wrong context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders stateless child with wrong context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders with context passed through to a grandchild with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with context passed through to a grandchild with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders with context passed through to a grandchild with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with context passed through to a grandchild with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders with context passed through to a grandchild with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with context passed through to a grandchild with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders with context passed through to a grandchild with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with context passed through to a grandchild with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders with context passed through to a grandchild with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with context passed through to a grandchild with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders a child context overriding a parent context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a child context overriding a parent context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders a child context overriding a parent context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a child context overriding a parent context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders a child context overriding a parent context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a child context overriding a parent context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders a child context overriding a parent context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a child context overriding a parent context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders a child context overriding a parent context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a child context overriding a parent context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders readContext() in different components with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders readContext() in different components with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders readContext() in different components with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders readContext() in different components with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders readContext() in different components with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders readContext() in different components with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders readContext() in different components with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders readContext() in different components with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders readContext() in different components with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders readContext() in different components with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders multiple contexts with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders multiple contexts with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders multiple contexts with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders multiple contexts with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders multiple contexts with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders multiple contexts with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders multiple contexts with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders multiple contexts with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders multiple contexts with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders multiple contexts with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders nested context unwinding with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders nested context unwinding with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders nested context unwinding with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders nested context unwinding with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders nested context unwinding with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders nested context unwinding with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders nested context unwinding with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders nested context unwinding with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders nested context unwinding with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders nested context unwinding with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context as consumer in DEV with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should warn with an error message when using Context as consumer in DEV with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context as consumer in DEV with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should warn with an error message when using Context as consumer in DEV with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context as consumer in DEV with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should warn with an error message when using Context as consumer in DEV with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context as consumer in DEV with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should warn with an error message when using Context as consumer in DEV with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context as consumer in DEV with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should warn with an error message when using Context as consumer in DEV with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should not warn when using Consumer from React < 16.6 with newer renderer with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should not warn when using Consumer from React < 16.6 with newer renderer with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should not warn when using Consumer from React < 16.6 with newer renderer with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should not warn when using Consumer from React < 16.6 with newer renderer with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should not warn when using Consumer from React < 16.6 with newer renderer with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should not warn when using Consumer from React < 16.6 with newer renderer with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should not warn when using Consumer from React < 16.6 with newer renderer with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should not warn when using Consumer from React < 16.6 with newer renderer with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should not warn when using Consumer from React < 16.6 with newer renderer with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should not warn when using Consumer from React < 16.6 with newer renderer with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using nested context consumers in DEV with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should warn with an error message when using nested context consumers in DEV with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using nested context consumers in DEV with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should warn with an error message when using nested context consumers in DEV with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using nested context consumers in DEV with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should warn with an error message when using nested context consumers in DEV with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using nested context consumers in DEV with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should warn with an error message when using nested context consumers in DEV with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using nested context consumers in DEV with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should warn with an error message when using nested context consumers in DEV with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context.Consumer.Provider DEV with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders should warn with an error message when using Context.Consumer.Provider DEV with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context.Consumer.Provider DEV with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders should warn with an error message when using Context.Consumer.Provider DEV with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context.Consumer.Provider DEV with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders should warn with an error message when using Context.Consumer.Provider DEV with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context.Consumer.Provider DEV with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders should warn with an error message when using Context.Consumer.Provider DEV with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context renders should warn with an error message when using Context.Consumer.Provider DEV with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders should warn with an error message when using Context.Consumer.Provider DEV with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context does not pollute parallel node streams","location":{"column":5,"line":398},"status":"passed","title":"does not pollute parallel node streams"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context does not pollute parallel node streams when many are used","location":{"column":5,"line":431},"status":"passed","title":"does not pollute parallel node streams when many are used"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context does not pollute later renders when stream destroyed","location":{"column":5,"line":490},"status":"passed","title":"does not pollute later renders when stream destroyed"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context frees context value reference when stream destroyed","location":{"column":5,"line":532},"status":"passed","title":"frees context value reference when stream destroyed"},{"ancestorTitles":["ReactDOMServerIntegration","context"],"failureMessages":[],"fullName":"ReactDOMServerIntegration context does not pollute sync renders after an error","location":{"column":5,"line":558},"status":"passed","title":"does not pollute sync renders after an error"}],"endTime":1639318846738,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationNewContext-test.js","startTime":1639318840876,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple numbers with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders simple numbers with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple numbers with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders simple numbers with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple numbers with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders simple numbers with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple numbers with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders simple numbers with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple numbers with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders simple numbers with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple strings with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders simple strings with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple strings with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders simple strings with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple strings with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders simple strings with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple strings with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders simple strings with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders simple strings with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders simple strings with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with true value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no string prop with true value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with true value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no string prop with true value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with true value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no string prop with true value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with true value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no string prop with true value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with true value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no string prop with true value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with false value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no string prop with false value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with false value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no string prop with false value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with false value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no string prop with false value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with false value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no string prop with false value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with false value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no string prop with false value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no string prop with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no string prop with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no string prop with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no string prop with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no string prop with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with function value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no string prop with function value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with function value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no string prop with function value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with function value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no string prop with function value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with function value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no string prop with function value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with function value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no string prop with function value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with symbol value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no string prop with symbol value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with symbol value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no string prop with symbol value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with symbol value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no string prop with symbol value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with symbol value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no string prop with symbol value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","string properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping string properties renders no string prop with symbol value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no string prop with symbol value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with true value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with true value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with true value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with true value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with true value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with true value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with true value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with true value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with true value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with true value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with false value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with false value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with false value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with false value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with false value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with false value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with false value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with false value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with false value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with false value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with self value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with self value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with self value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with self value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with self value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with self value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with self value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with self value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with self value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with self value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with \"\" value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with \"\" value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with \"\" value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with \"\" value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with \"\" value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with \"\" value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with \"\" value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with \"\" value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with \"\" value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with \"\" value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with string value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with string value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with string value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with string value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with string value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with string value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with string value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with string value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with string value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with string value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with array value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with array value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with array value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with array value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with array value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with array value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with array value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with array value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with array value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with array value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with object value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with object value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with object value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with object value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with object value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with object value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with object value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with object value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with object value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with object value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with non-zero number value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with non-zero number value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with non-zero number value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with non-zero number value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with non-zero number value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with non-zero number value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with non-zero number value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with non-zero number value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with non-zero number value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with non-zero number value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with zero value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders boolean prop with zero value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with zero value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders boolean prop with zero value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with zero value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders boolean prop with zero value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with zero value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders boolean prop with zero value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders boolean prop with zero value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders boolean prop with zero value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no boolean prop with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no boolean prop with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no boolean prop with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no boolean prop with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no boolean prop with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with function value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no boolean prop with function value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with function value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no boolean prop with function value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with function value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no boolean prop with function value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with function value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no boolean prop with function value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with function value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no boolean prop with function value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with symbol value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no boolean prop with symbol value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with symbol value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no boolean prop with symbol value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with symbol value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no boolean prop with symbol value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with symbol value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no boolean prop with symbol value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","boolean properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping boolean properties renders no boolean prop with symbol value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no boolean prop with symbol value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with true value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders download prop with true value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with true value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders download prop with true value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with true value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders download prop with true value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with true value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders download prop with true value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with true value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders download prop with true value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with false value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders download prop with false value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with false value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders download prop with false value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with false value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders download prop with false value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with false value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders download prop with false value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with false value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders download prop with false value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders download prop with string value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders download prop with string value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders download prop with string value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders download prop with string value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders download prop with string value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"false\" value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders download prop with string \"false\" value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"false\" value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders download prop with string \"false\" value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"false\" value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders download prop with string \"false\" value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"false\" value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders download prop with string \"false\" value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"false\" value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders download prop with string \"false\" value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"true\" value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders download prop with string \"true\" value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"true\" value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders download prop with string \"true\" value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"true\" value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders download prop with string \"true\" value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"true\" value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders download prop with string \"true\" value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with string \"true\" value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders download prop with string \"true\" value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with number 0 value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders download prop with number 0 value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with number 0 value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders download prop with number 0 value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with number 0 value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders download prop with number 0 value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with number 0 value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders download prop with number 0 value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders download prop with number 0 value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders download prop with number 0 value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no download prop with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no download prop with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no download prop with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no download prop with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no download prop with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with undefined value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no download prop with undefined value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with undefined value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no download prop with undefined value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with undefined value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no download prop with undefined value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with undefined value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no download prop with undefined value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with undefined value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no download prop with undefined value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with function value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no download prop with function value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with function value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no download prop with function value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with function value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no download prop with function value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with function value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no download prop with function value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with function value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no download prop with function value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with symbol value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no download prop with symbol value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with symbol value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no download prop with symbol value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with symbol value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no download prop with symbol value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with symbol value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no download prop with symbol value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","download property (combined boolean/string attribute)"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping download property (combined boolean/string attribute) renders no download prop with symbol value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no download prop with symbol value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with string value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders className prop with string value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with string value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders className prop with string value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with string value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders className prop with string value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with string value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders className prop with string value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with string value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders className prop with string value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with empty string value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders className prop with empty string value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with empty string value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders className prop with empty string value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with empty string value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders className prop with empty string value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with empty string value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders className prop with empty string value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop with empty string value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders className prop with empty string value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with true value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no className prop with true value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with true value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no className prop with true value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with true value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no className prop with true value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with true value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no className prop with true value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with true value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no className prop with true value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with false value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no className prop with false value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with false value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no className prop with false value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with false value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no className prop with false value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with false value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no className prop with false value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with false value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no className prop with false value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no className prop with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no className prop with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no className prop with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no className prop with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders no className prop with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no className prop with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders badly cased className with a warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders badly cased className with a warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders badly cased className with a warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders badly cased className with a warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders badly cased className with a warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders badly cased className with a warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders badly cased className with a warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders badly cased className with a warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders badly cased className with a warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders badly cased className with a warning with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given the alias with a warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders className prop when given the alias with a warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given the alias with a warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders className prop when given the alias with a warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given the alias with a warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders className prop when given the alias with a warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given the alias with a warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders className prop when given the alias with a warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given the alias with a warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders className prop when given the alias with a warning with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given a badly cased alias with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders className prop when given a badly cased alias with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given a badly cased alias with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders className prop when given a badly cased alias with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given a badly cased alias with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders className prop when given a badly cased alias with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given a badly cased alias with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders className prop when given a badly cased alias with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","className property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping className property renders className prop when given a badly cased alias with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders className prop when given a badly cased alias with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with string value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders htmlFor with string value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with string value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders htmlFor with string value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with string value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders htmlFor with string value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with string value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders htmlFor with string value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with string value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders htmlFor with string value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no badly cased htmlfor with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no badly cased htmlfor with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no badly cased htmlfor with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no badly cased htmlfor with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no badly cased htmlfor with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no badly cased htmlfor with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no badly cased htmlfor with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no badly cased htmlfor with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no badly cased htmlfor with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no badly cased htmlfor with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with an empty string with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders htmlFor with an empty string with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with an empty string with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders htmlFor with an empty string with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with an empty string with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders htmlFor with an empty string with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with an empty string with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders htmlFor with an empty string with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders htmlFor with an empty string with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders htmlFor with an empty string with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with true value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no htmlFor prop with true value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with true value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no htmlFor prop with true value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with true value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no htmlFor prop with true value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with true value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no htmlFor prop with true value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with true value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no htmlFor prop with true value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with false value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no htmlFor prop with false value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with false value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no htmlFor prop with false value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with false value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no htmlFor prop with false value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with false value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no htmlFor prop with false value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with false value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no htmlFor prop with false value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no htmlFor prop with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no htmlFor prop with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no htmlFor prop with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no htmlFor prop with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","htmlFor property"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping htmlFor property renders no htmlFor prop with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no htmlFor prop with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders positive numeric property with positive value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders positive numeric property with positive value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders positive numeric property with positive value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders positive numeric property with positive value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders positive numeric property with positive value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders positive numeric property with positive value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders positive numeric property with positive value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders positive numeric property with positive value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders positive numeric property with positive value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders positive numeric property with positive value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders numeric property with zero value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders numeric property with zero value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders numeric property with zero value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders numeric property with zero value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders numeric property with zero value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders numeric property with zero value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders numeric property with zero value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders numeric property with zero value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders numeric property with zero value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders numeric property with zero value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric property with zero value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no positive numeric property with zero value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric property with zero value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no positive numeric property with zero value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric property with zero value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no positive numeric property with zero value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric property with zero value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no positive numeric property with zero value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric property with zero value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no positive numeric property with zero value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with function value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no numeric prop with function value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with function value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no numeric prop with function value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with function value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no numeric prop with function value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with function value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no numeric prop with function value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with function value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no numeric prop with function value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with symbol value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no numeric prop with symbol value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with symbol value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no numeric prop with symbol value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with symbol value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no numeric prop with symbol value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with symbol value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no numeric prop with symbol value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no numeric prop with symbol value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no numeric prop with symbol value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with function value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no positive numeric prop with function value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with function value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no positive numeric prop with function value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with function value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no positive numeric prop with function value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with function value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no positive numeric prop with function value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with function value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no positive numeric prop with function value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with symbol value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no positive numeric prop with symbol value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with symbol value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no positive numeric prop with symbol value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with symbol value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no positive numeric prop with symbol value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with symbol value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no positive numeric prop with symbol value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","numeric properties"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping numeric properties renders no positive numeric prop with symbol value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no positive numeric prop with symbol value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no ref attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no ref attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no ref attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no ref attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no ref attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no ref attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no ref attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no ref attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no ref attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no ref attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no children attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no children attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no children attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no children attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no children attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no children attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no children attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no children attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no children attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no children attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no key attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no key attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no key attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no key attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no key attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no key attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no key attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no key attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no key attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no key attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no dangerouslySetInnerHTML attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no dangerouslySetInnerHTML attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no dangerouslySetInnerHTML attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no dangerouslySetInnerHTML attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no dangerouslySetInnerHTML attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no dangerouslySetInnerHTML attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no dangerouslySetInnerHTML attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no dangerouslySetInnerHTML attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no dangerouslySetInnerHTML attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no dangerouslySetInnerHTML attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressContentEditableWarning attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no suppressContentEditableWarning attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressContentEditableWarning attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no suppressContentEditableWarning attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressContentEditableWarning attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no suppressContentEditableWarning attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressContentEditableWarning attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no suppressContentEditableWarning attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressContentEditableWarning attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no suppressContentEditableWarning attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressHydrationWarning attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no suppressHydrationWarning attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressHydrationWarning attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no suppressHydrationWarning attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressHydrationWarning attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no suppressHydrationWarning attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressHydrationWarning attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no suppressHydrationWarning attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","props with special meaning in React"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping props with special meaning in React renders no suppressHydrationWarning attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no suppressHydrationWarning attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders simple styles with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders simple styles with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders simple styles with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders simple styles with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders simple styles with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders simple styles with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders simple styles with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders simple styles with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders simple styles with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders simple styles with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders relevant styles with px with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders relevant styles with px with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders relevant styles with px with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders relevant styles with px with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders relevant styles with px with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders relevant styles with px with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders relevant styles with px with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders relevant styles with px with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders relevant styles with px with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders relevant styles with px with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders custom properties with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders custom properties with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders custom properties with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders custom properties with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders custom properties with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders custom properties with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders custom properties with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders custom properties with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders custom properties with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders custom properties with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders camel cased custom properties with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders camel cased custom properties with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders camel cased custom properties with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders camel cased custom properties with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders camel cased custom properties with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders camel cased custom properties with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders camel cased custom properties with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders camel cased custom properties with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders camel cased custom properties with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders camel cased custom properties with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no undefined styles with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no undefined styles with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no undefined styles with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no undefined styles with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no undefined styles with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no undefined styles with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no undefined styles with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no undefined styles with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no undefined styles with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no undefined styles with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no null styles with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no null styles with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no null styles with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no null styles with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no null styles with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no null styles with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no null styles with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no null styles with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no null styles with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no null styles with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no empty styles with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no empty styles with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no empty styles with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no empty styles with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no empty styles with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no empty styles with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no empty styles with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no empty styles with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders no empty styles with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no empty styles with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders unitless-number rules with prefixes with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unitless-number rules with prefixes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders unitless-number rules with prefixes with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unitless-number rules with prefixes with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders unitless-number rules with prefixes with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unitless-number rules with prefixes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders unitless-number rules with prefixes with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unitless-number rules with prefixes with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","inline styles"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping inline styles renders unitless-number rules with prefixes with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unitless-number rules with prefixes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders simple strings with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders simple strings with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders simple strings with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders simple strings with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders simple strings with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders simple strings with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders simple strings with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders simple strings with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders simple strings with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders simple strings with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders aria string prop with false value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders aria string prop with false value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders aria string prop with false value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders aria string prop with false value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders aria string prop with false value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders aria string prop with false value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders aria string prop with false value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders aria string prop with false value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders aria string prop with false value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders aria string prop with false value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders no aria prop with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no aria prop with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders no aria prop with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no aria prop with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders no aria prop with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no aria prop with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders no aria prop with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no aria prop with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders no aria prop with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no aria prop with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders \"aria\" attribute with a warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders \"aria\" attribute with a warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders \"aria\" attribute with a warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders \"aria\" attribute with a warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders \"aria\" attribute with a warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders \"aria\" attribute with a warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders \"aria\" attribute with a warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders \"aria\" attribute with a warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","aria attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping aria attributes renders \"aria\" attribute with a warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders \"aria\" attribute with a warning with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased aliased HTML attribute with a warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders badly cased aliased HTML attribute with a warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased aliased HTML attribute with a warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders badly cased aliased HTML attribute with a warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased aliased HTML attribute with a warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders badly cased aliased HTML attribute with a warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased aliased HTML attribute with a warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders badly cased aliased HTML attribute with a warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased aliased HTML attribute with a warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders badly cased aliased HTML attribute with a warning with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased SVG attribute with a warning with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders badly cased SVG attribute with a warning with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased SVG attribute with a warning with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders badly cased SVG attribute with a warning with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased SVG attribute with a warning with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders badly cased SVG attribute with a warning with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased SVG attribute with a warning with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders badly cased SVG attribute with a warning with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders badly cased SVG attribute with a warning with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders badly cased SVG attribute with a warning with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased aliased SVG attribute alias with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no badly cased aliased SVG attribute alias with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased aliased SVG attribute alias with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no badly cased aliased SVG attribute alias with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased aliased SVG attribute alias with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no badly cased aliased SVG attribute alias with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased aliased SVG attribute alias with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no badly cased aliased SVG attribute alias with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased aliased SVG attribute alias with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no badly cased aliased SVG attribute alias with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased original SVG attribute that is aliased with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no badly cased original SVG attribute that is aliased with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased original SVG attribute that is aliased with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no badly cased original SVG attribute that is aliased with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased original SVG attribute that is aliased with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no badly cased original SVG attribute that is aliased with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased original SVG attribute that is aliased with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no badly cased original SVG attribute that is aliased with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","cased attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping cased attributes renders no badly cased original SVG attribute that is aliased with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no badly cased original SVG attribute that is aliased with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown attributes with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown attributes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown attributes with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown attributes with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown attributes with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown attributes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown attributes with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown attributes with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown attributes with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown attributes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown data- attributes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown data- attributes with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown data- attributes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown data- attributes with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown data- attributes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders badly cased reserved attributes with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders badly cased reserved attributes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders badly cased reserved attributes with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders badly cased reserved attributes with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders badly cased reserved attributes with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders badly cased reserved attributes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders badly cased reserved attributes with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders badly cased reserved attributes with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders badly cased reserved attributes with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders badly cased reserved attributes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders \"data\" attribute with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders \"data\" attribute with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders \"data\" attribute with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders \"data\" attribute with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders \"data\" attribute with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders \"data\" attribute with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders \"data\" attribute with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders \"data\" attribute with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders \"data\" attribute with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders \"data\" attribute with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no unknown data- attributes with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no unknown data- attributes with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no unknown data- attributes with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no unknown data- attributes with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no unknown data- attributes with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with casing with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown data- attributes with casing with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with casing with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown data- attributes with casing with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with casing with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown data- attributes with casing with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with casing with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown data- attributes with casing with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with casing with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown data- attributes with casing with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean true with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown data- attributes with boolean true with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean true with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown data- attributes with boolean true with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean true with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown data- attributes with boolean true with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean true with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown data- attributes with boolean true with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean true with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown data- attributes with boolean true with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean false with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown data- attributes with boolean false with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean false with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown data- attributes with boolean false with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean false with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown data- attributes with boolean false with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean false with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown data- attributes with boolean false with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders unknown data- attributes with boolean false with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown data- attributes with boolean false with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with casing and null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no unknown data- attributes with casing and null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with casing and null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no unknown data- attributes with casing and null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with casing and null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no unknown data- attributes with casing and null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with casing and null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no unknown data- attributes with casing and null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders no unknown data- attributes with casing and null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no unknown data- attributes with casing and null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders custom attributes for non-standard elements with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders custom attributes for non-standard elements with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders custom attributes for non-standard elements with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders custom attributes for non-standard elements with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders custom attributes for non-standard elements with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders custom attributes for non-standard elements with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders custom attributes for non-standard elements with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders custom attributes for non-standard elements with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders custom attributes for non-standard elements with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders custom attributes for non-standard elements with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders SVG tags with dashes in them with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders SVG tags with dashes in them with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders SVG tags with dashes in them with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders SVG tags with dashes in them with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders SVG tags with dashes in them with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders SVG tags with dashes in them with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders SVG tags with dashes in them with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders SVG tags with dashes in them with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders SVG tags with dashes in them with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders SVG tags with dashes in them with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders cased custom attributes with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders cased custom attributes with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders cased custom attributes with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders cased custom attributes with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders cased custom attributes with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders cased custom attributes with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders cased custom attributes with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders cased custom attributes with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping","unknown attributes"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping unknown attributes renders cased custom attributes with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders cased custom attributes with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no HTML events with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no HTML events with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no HTML events with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no HTML events with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no HTML events with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no HTML events with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no HTML events with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no HTML events with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no HTML events with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no HTML events with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no unknown events with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no unknown events with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no unknown events with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no unknown events with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no unknown events with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no unknown events with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no unknown events with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no unknown events with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders no unknown events with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no unknown events with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders custom attribute named `on` with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders custom attribute named `on` with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders custom attribute named `on` with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders custom attribute named `on` with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders custom attribute named `on` with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders custom attribute named `on` with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders custom attribute named `on` with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders custom attribute named `on` with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","property to attribute mapping"],"failureMessages":[],"fullName":"ReactDOMServerIntegration property to attribute mapping renders custom attribute named `on` with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders custom attribute named `on` with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders class for custom elements with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class for custom elements with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders class for custom elements with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class for custom elements with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders class for custom elements with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class for custom elements with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders class for custom elements with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class for custom elements with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders class for custom elements with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class for custom elements with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders className for custom elements with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders className for custom elements with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders className for custom elements with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders className for custom elements with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders className for custom elements with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders className for custom elements with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders className for custom elements with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders className for custom elements with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders className for custom elements with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders className for custom elements with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders htmlFor attribute on custom elements with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders htmlFor attribute on custom elements with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders htmlFor attribute on custom elements with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders htmlFor attribute on custom elements with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders htmlFor attribute on custom elements with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders htmlFor attribute on custom elements with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders htmlFor attribute on custom elements with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders htmlFor attribute on custom elements with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders htmlFor attribute on custom elements with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders htmlFor attribute on custom elements with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders for attribute on custom elements with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders for attribute on custom elements with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders for attribute on custom elements with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders for attribute on custom elements with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders for attribute on custom elements with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders for attribute on custom elements with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders for attribute on custom elements with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders for attribute on custom elements with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders for attribute on custom elements with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders for attribute on custom elements with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown attributes for custom elements with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown attributes for custom elements with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown attributes for custom elements with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown attributes for custom elements with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown attributes for custom elements with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown `on*` attributes for custom elements with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown `on*` attributes for custom elements with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown `on*` attributes for custom elements with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown `on*` attributes for custom elements with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown `on*` attributes for custom elements with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown `on*` attributes for custom elements with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown `on*` attributes for custom elements with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown `on*` attributes for custom elements with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown `on*` attributes for custom elements with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown `on*` attributes for custom elements with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `true` attributes as strings with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown boolean `true` attributes as strings with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `true` attributes as strings with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown boolean `true` attributes as strings with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `true` attributes as strings with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown boolean `true` attributes as strings with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `true` attributes as strings with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown boolean `true` attributes as strings with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `true` attributes as strings with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown boolean `true` attributes as strings with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `false` attributes as strings with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown boolean `false` attributes as strings with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `false` attributes as strings with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown boolean `false` attributes as strings with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `false` attributes as strings with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown boolean `false` attributes as strings with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `false` attributes as strings with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown boolean `false` attributes as strings with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown boolean `false` attributes as strings with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown boolean `false` attributes as strings with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no unknown attributes for custom elements with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no unknown attributes for custom elements with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no unknown attributes for custom elements with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no unknown attributes for custom elements with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no unknown attributes for custom elements with null value with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements using is with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders unknown attributes for custom elements using is with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements using is with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders unknown attributes for custom elements using is with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements using is with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders unknown attributes for custom elements using is with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements using is with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders unknown attributes for custom elements using is with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders unknown attributes for custom elements using is with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders unknown attributes for custom elements using is with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements using is with null value with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders no unknown attributes for custom elements using is with null value with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements using is with null value with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders no unknown attributes for custom elements using is with null value with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements using is with null value with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders no unknown attributes for custom elements using is with null value with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements using is with null value with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders no unknown attributes for custom elements using is with null value with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","custom elements"],"failureMessages":[],"fullName":"ReactDOMServerIntegration custom elements renders no unknown attributes for custom elements using is with null value with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders no unknown attributes for custom elements using is with null value with client render on top of bad server markup"}],"endTime":1639318885022,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationAttributes-test.js","startTime":1639318846805,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["reactiverefs"],"failureMessages":[],"fullName":"reactiverefs Should increase refs with an increase in divs","location":{"column":3,"line":133},"status":"passed","title":"Should increase refs with an increase in divs"},{"ancestorTitles":["factory components"],"failureMessages":[],"fullName":"factory components Should correctly get the ref","location":{"column":5,"line":161},"status":"passed","title":"Should correctly get the ref"},{"ancestorTitles":["ref swapping"],"failureMessages":[],"fullName":"ref swapping Allow refs to hop around children correctly","location":{"column":3,"line":231},"status":"passed","title":"Allow refs to hop around children correctly"},{"ancestorTitles":["ref swapping"],"failureMessages":[],"fullName":"ref swapping always has a value for this.refs","location":{"column":3,"line":271},"status":"passed","title":"always has a value for this.refs"},{"ancestorTitles":["ref swapping"],"failureMessages":[],"fullName":"ref swapping ref called correctly for stateless component","location":{"column":3,"line":282},"status":"passed","title":"ref called correctly for stateless component"},{"ancestorTitles":["ref swapping"],"failureMessages":[],"fullName":"ref swapping coerces numbers to strings","location":{"column":3,"line":306},"status":"passed","title":"coerces numbers to strings"},{"ancestorTitles":["ref swapping"],"failureMessages":[],"fullName":"ref swapping provides an error for invalid refs","location":{"column":3,"line":316},"status":"passed","title":"provides an error for invalid refs"},{"ancestorTitles":["root level refs"],"failureMessages":[],"fullName":"root level refs attaches and detaches root refs","location":{"column":3,"line":357},"status":"passed","title":"attaches and detaches root refs"},{"ancestorTitles":["creating element with ref in constructor"],"failureMessages":[],"fullName":"creating element with ref in constructor throws an error","location":{"column":3,"line":450},"status":"passed","title":"throws an error"},{"ancestorTitles":["strings refs across renderers"],"failureMessages":[],"fullName":"strings refs across renderers does not break","location":{"column":3,"line":467},"status":"passed","title":"does not break"}],"endTime":1639318885887,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/refs-test.js","startTime":1639318885090,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMSelection"],"failureMessages":[],"fullName":"ReactDOMSelection returns correctly for base case","location":{"column":3,"line":126},"status":"passed","title":"returns correctly for base case"},{"ancestorTitles":["ReactDOMSelection"],"failureMessages":[],"fullName":"ReactDOMSelection returns correctly for fuzz test","location":{"column":3,"line":138},"status":"passed","title":"returns correctly for fuzz test"}],"endTime":1639318886609,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMSelection-test.internal.js","startTime":1639318885955,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMSVG"],"failureMessages":[],"fullName":"ReactDOMSVG creates initial namespaced markup","location":{"column":3,"line":23},"status":"passed","title":"creates initial namespaced markup"},{"ancestorTitles":["ReactDOMSVG"],"failureMessages":[],"fullName":"ReactDOMSVG creates elements with SVG namespace inside SVG tag during mount","location":{"column":3,"line":32},"status":"passed","title":"creates elements with SVG namespace inside SVG tag during mount"},{"ancestorTitles":["ReactDOMSVG"],"failureMessages":[],"fullName":"ReactDOMSVG creates elements with SVG namespace inside SVG tag during update","location":{"column":3,"line":113},"status":"passed","title":"creates elements with SVG namespace inside SVG tag during update"},{"ancestorTitles":["ReactDOMSVG"],"failureMessages":[],"fullName":"ReactDOMSVG can render SVG into a non-React SVG tree","location":{"column":3,"line":196},"status":"passed","title":"can render SVG into a non-React SVG tree"},{"ancestorTitles":["ReactDOMSVG"],"failureMessages":[],"fullName":"ReactDOMSVG can render HTML into a foreignObject in non-React SVG tree","location":{"column":3,"line":212},"status":"passed","title":"can render HTML into a foreignObject in non-React SVG tree"}],"endTime":1639318886966,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMSVG-test.js","startTime":1639318886679,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child with context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child with context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child with context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child with context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child with context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child without context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child without context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child without context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child without context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child without context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child without context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child without context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child without context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child without context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child without context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with wrong context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders class child with wrong context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with wrong context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders class child with wrong context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with wrong context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders class child with wrong context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with wrong context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders class child with wrong context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders class child with wrong context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders class child with wrong context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders with context passed through to a grandchild with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders with context passed through to a grandchild with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders with context passed through to a grandchild with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders with context passed through to a grandchild with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders with context passed through to a grandchild with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders with context passed through to a grandchild with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders with context passed through to a grandchild with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders with context passed through to a grandchild with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders with context passed through to a grandchild with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders with context passed through to a grandchild with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders a child context overriding a parent context with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a child context overriding a parent context with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders a child context overriding a parent context with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a child context overriding a parent context with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders a child context overriding a parent context with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a child context overriding a parent context with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders a child context overriding a parent context with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a child context overriding a parent context with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders a child context overriding a parent context with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a child context overriding a parent context with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders multiple contexts with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders multiple contexts with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders multiple contexts with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders multiple contexts with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders multiple contexts with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders multiple contexts with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders multiple contexts with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders multiple contexts with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders multiple contexts with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders multiple contexts with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders nested context unwinding with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders nested context unwinding with server string render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders nested context unwinding with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders nested context unwinding with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders nested context unwinding with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders nested context unwinding with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders nested context unwinding with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders nested context unwinding with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration","class contextType"],"failureMessages":[],"fullName":"ReactDOMServerIntegration class contextType renders nested context unwinding with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders nested context unwinding with client render on top of bad server markup"}],"endTime":1639318890023,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationClassContextType-test.js","startTime":1639318887032,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTreeTraversal","Two phase traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Two phase traversal should not traverse when target is outside component boundary","location":{"column":5,"line":97},"status":"passed","title":"should not traverse when target is outside component boundary"},{"ancestorTitles":["ReactTreeTraversal","Two phase traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Two phase traversal should traverse two phase across component boundary","location":{"column":5,"line":105},"status":"passed","title":"should traverse two phase across component boundary"},{"ancestorTitles":["ReactTreeTraversal","Two phase traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Two phase traversal should traverse two phase at shallowest node","location":{"column":5,"line":126},"status":"passed","title":"should traverse two phase at shallowest node"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should not traverse when enter/leaving outside DOM","location":{"column":5,"line":141},"status":"passed","title":"should not traverse when enter/leaving outside DOM"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should not traverse if enter/leave the same node","location":{"column":5,"line":153},"status":"passed","title":"should not traverse if enter/leave the same node"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should traverse enter/leave to sibling - avoids parent","location":{"column":5,"line":168},"status":"passed","title":"should traverse enter/leave to sibling - avoids parent"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should traverse enter/leave to parent - avoids parent","location":{"column":5,"line":189},"status":"passed","title":"should traverse enter/leave to parent - avoids parent"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should enter from the window","location":{"column":5,"line":209},"status":"passed","title":"should enter from the window"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should enter from the window to the shallowest","location":{"column":5,"line":229},"status":"passed","title":"should enter from the window to the shallowest"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should leave to the window","location":{"column":5,"line":245},"status":"passed","title":"should leave to the window"},{"ancestorTitles":["ReactTreeTraversal","Enter leave traversal"],"failureMessages":[],"fullName":"ReactTreeTraversal Enter leave traversal should leave to the window from the shallowest","location":{"column":5,"line":265},"status":"passed","title":"should leave to the window from the shallowest"}],"endTime":1639318890387,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactTreeTraversal-test.js","startTime":1639318890090,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent updates a mounted text component in place","location":{"column":3,"line":32},"status":"passed","title":"updates a mounted text component in place"},{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent can be toggled in and out of the markup","location":{"column":3,"line":66},"status":"passed","title":"can be toggled in and out of the markup"},{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent can reconcile text merged by Node.normalize() alongside other elements","location":{"column":3,"line":112},"status":"pending","title":"can reconcile text merged by Node.normalize() alongside other elements"},{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent can reconcile text merged by Node.normalize()","location":{"column":3,"line":140},"status":"pending","title":"can reconcile text merged by Node.normalize()"},{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent can reconcile text from pre-rendered markup","location":{"column":3,"line":164},"status":"passed","title":"can reconcile text from pre-rendered markup"},{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent can reconcile text arbitrarily split into multiple nodes","location":{"column":3,"line":193},"status":"pending","title":"can reconcile text arbitrarily split into multiple nodes"},{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent can reconcile text arbitrarily split into multiple nodes on some substitutions only","location":{"column":3,"line":225},"status":"pending","title":"can reconcile text arbitrarily split into multiple nodes on some substitutions only"},{"ancestorTitles":["ReactDOMTextComponent"],"failureMessages":[],"fullName":"ReactDOMTextComponent can unmount normalized text nodes","location":{"column":3,"line":273},"status":"pending","title":"can unmount normalized text nodes"}],"endTime":1639318890731,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMTextComponent-test.js","startTime":1639318890455,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render strings as children","location":{"column":3,"line":29},"status":"passed","title":"should render strings as children"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render numbers as children","location":{"column":3,"line":36},"status":"passed","title":"should render numbers as children"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should be called a callback argument","location":{"column":3,"line":44},"status":"passed","title":"should be called a callback argument"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should call a callback argument when the same element is re-rendered","location":{"column":3,"line":56},"status":"passed","title":"should call a callback argument when the same element is re-rendered"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render a component returning strings directly from render","location":{"column":3,"line":77},"status":"passed","title":"should render a component returning strings directly from render"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render a component returning numbers directly from render","location":{"column":3,"line":84},"status":"passed","title":"should render a component returning numbers directly from render"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber finds the DOM Text node of a string child","location":{"column":3,"line":92},"status":"passed","title":"finds the DOM Text node of a string child"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber finds the first child when a component returns a fragment","location":{"column":3,"line":111},"status":"passed","title":"finds the first child when a component returns a fragment"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber finds the first child even when fragment is nested","location":{"column":3,"line":128},"status":"passed","title":"finds the first child even when fragment is nested"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber finds the first child even when first child renders null","location":{"column":3,"line":156},"status":"passed","title":"finds the first child even when first child renders null"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber renders an empty fragment","location":{"column":3,"line":179},"status":"passed","title":"renders an empty fragment"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render one portal","location":{"column":3,"line":234},"status":"passed","title":"should render one portal"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should support unstable_createPortal alias","location":{"column":5,"line":251},"status":"passed","title":"should support unstable_createPortal alias"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render many portals","location":{"column":3,"line":277},"status":"passed","title":"should render many portals"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render nested portals","location":{"column":3,"line":377},"status":"passed","title":"should render nested portals"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should reconcile portal children","location":{"column":3,"line":420},"status":"passed","title":"should reconcile portal children"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should unmount empty portal component wherever it appears","location":{"column":3,"line":466},"status":"passed","title":"should unmount empty portal component wherever it appears"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should keep track of namespace across portals (simple)","location":{"column":3,"line":500},"status":"passed","title":"should keep track of namespace across portals (simple)"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should keep track of namespace across portals (medium)","location":{"column":3,"line":528},"status":"passed","title":"should keep track of namespace across portals (medium)"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should keep track of namespace across portals (complex)","location":{"column":3,"line":592},"status":"passed","title":"should keep track of namespace across portals (complex)"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should unwind namespaces on uncaught errors","location":{"column":3,"line":666},"status":"passed","title":"should unwind namespaces on uncaught errors"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should unwind namespaces on caught errors","location":{"column":3,"line":681},"status":"passed","title":"should unwind namespaces on caught errors"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should unwind namespaces on caught errors in a portal","location":{"column":3,"line":714},"status":"passed","title":"should unwind namespaces on caught errors in a portal"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should pass portal context when rendering subtree elsewhere","location":{"column":3,"line":748},"status":"passed","title":"should pass portal context when rendering subtree elsewhere"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should update portal context if it changes due to setState","location":{"column":3,"line":782},"status":"passed","title":"should update portal context if it changes due to setState"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should update portal context if it changes due to re-render","location":{"column":3,"line":826},"status":"passed","title":"should update portal context if it changes due to re-render"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber findDOMNode should find dom element after expanding a fragment","location":{"column":3,"line":866},"status":"passed","title":"findDOMNode should find dom element after expanding a fragment"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should bubble events from the portal to the parent","location":{"column":3,"line":886},"status":"passed","title":"should bubble events from the portal to the parent"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should not onMouseLeave when staying in the portal","location":{"column":3,"line":917},"status":"passed","title":"should not onMouseLeave when staying in the portal"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber does not fire mouseEnter twice when relatedTarget is the root node","location":{"column":3,"line":993},"status":"passed","title":"does not fire mouseEnter twice when relatedTarget is the root node"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber listens to events that do not exist in the Portal subtree","location":{"column":7,"line":283},"status":"passed","title":"listens to events that do not exist in the Portal subtree"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should throw on bad createPortal argument","location":{"column":3,"line":1062},"status":"passed","title":"should throw on bad createPortal argument"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should warn for non-functional event listeners","location":{"column":3,"line":1071},"status":"passed","title":"should warn for non-functional event listeners"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should warn with a special message for `false` event listeners","location":{"column":3,"line":1084},"status":"passed","title":"should warn with a special message for `false` event listeners"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should not update event handlers until commit","location":{"column":3,"line":1099},"status":"passed","title":"should not update event handlers until commit"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should not crash encountering low-priority tree","location":{"column":3,"line":1196},"status":"passed","title":"should not crash encountering low-priority tree"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should not warn when rendering into an empty container","location":{"column":3,"line":1205},"status":"passed","title":"should not warn when rendering into an empty container"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should warn when replacing a container which was manually updated outside of React","location":{"column":3,"line":1214},"status":"passed","title":"should warn when replacing a container which was manually updated outside of React"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should warn when doing an update to a container manually updated outside of React","location":{"column":3,"line":1238},"status":"passed","title":"should warn when doing an update to a container manually updated outside of React"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should warn when doing an update to a container manually cleared outside of React","location":{"column":3,"line":1257},"status":"passed","title":"should warn when doing an update to a container manually cleared outside of React"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should render a text component with a text DOM node on the same document as the container","location":{"column":3,"line":1276},"status":"passed","title":"should render a text component with a text DOM node on the same document as the container"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should mount into a document fragment","location":{"column":3,"line":1306},"status":"passed","title":"should mount into a document fragment"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber should not diff memoized host components","location":{"column":3,"line":1315},"status":"passed","title":"should not diff memoized host components"},{"ancestorTitles":["ReactDOMFiber"],"failureMessages":[],"fullName":"ReactDOMFiber unmounted legacy roots should never clear newer root content from a container","location":{"column":3,"line":1373},"status":"passed","title":"unmounted legacy roots should never clear newer root content from a container"}],"endTime":1639318891489,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMFiber-test.js","startTime":1639318890808,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a http link with the word javascript in it with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a http link with the word javascript in it with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a http link with the word javascript in it with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a http link with the word javascript in it with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a http link with the word javascript in it with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a http link with the word javascript in it with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a http link with the word javascript in it with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a http link with the word javascript in it with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a http link with the word javascript in it with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a http link with the word javascript in it with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol href with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol href with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol href with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol href with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol href with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol href with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol href with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol href with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol href with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol href with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with leading spaces with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol with leading spaces with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with leading spaces with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol with leading spaces with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with leading spaces with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol with leading spaces with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with leading spaces with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol with leading spaces with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with leading spaces with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol with leading spaces with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with intermediate new lines and mixed casing with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol with intermediate new lines and mixed casing with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with intermediate new lines and mixed casing with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol with intermediate new lines and mixed casing with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with intermediate new lines and mixed casing with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol with intermediate new lines and mixed casing with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with intermediate new lines and mixed casing with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol with intermediate new lines and mixed casing with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol with intermediate new lines and mixed casing with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol with intermediate new lines and mixed casing with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol area href with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol area href with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol area href with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol area href with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol area href with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol area href with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol area href with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol area href with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol area href with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol area href with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol form action with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol form action with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol form action with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol form action with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol form action with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol form action with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol form action with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol form action with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol form action with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol form action with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol button formAction with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol button formAction with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol button formAction with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol button formAction with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol button formAction with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol button formAction with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol button formAction with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol button formAction with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol button formAction with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol button formAction with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol input formAction with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol input formAction with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol input formAction with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol input formAction with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol input formAction with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol input formAction with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol input formAction with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol input formAction with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol input formAction with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol input formAction with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol iframe src with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol iframe src with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol iframe src with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol iframe src with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol iframe src with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol iframe src with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol iframe src with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol iframe src with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol iframe src with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol iframe src with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol frame src with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol frame src with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol frame src with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol frame src with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol frame src with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol frame src with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol frame src with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol frame src with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol frame src with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol frame src with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol in an SVG link with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol in an SVG link with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol in an SVG link with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol in an SVG link with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol in an SVG link with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with a namespace with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a javascript protocol in an SVG link with a namespace with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with a namespace with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a javascript protocol in an SVG link with a namespace with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with a namespace with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a javascript protocol in an SVG link with a namespace with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with a namespace with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a javascript protocol in an SVG link with a namespace with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs renders a javascript protocol in an SVG link with a namespace with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a javascript protocol in an SVG link with a namespace with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs rejects a javascript protocol href if it is added during an update","location":{"column":3,"line":141},"status":"passed","title":"rejects a javascript protocol href if it is added during an update"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders a http link with the word javascript in it with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders a http link with the word javascript in it with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders a http link with the word javascript in it with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders a http link with the word javascript in it with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders a http link with the word javascript in it with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders a http link with the word javascript in it with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders a http link with the word javascript in it with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders a http link with the word javascript in it with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders a http link with the word javascript in it with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders a http link with the word javascript in it with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol href with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol href with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol href with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol href with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol href with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol href with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol with leading spaces with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol with leading spaces with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol with leading spaces with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol with leading spaces with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol with leading spaces with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol with leading spaces with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol with intermediate new lines and mixed casing with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol with intermediate new lines and mixed casing with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol with intermediate new lines and mixed casing with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol with intermediate new lines and mixed casing with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol with intermediate new lines and mixed casing with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol with intermediate new lines and mixed casing with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol area href with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol area href with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol area href with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol area href with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol area href with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol area href with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol form action with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol form action with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol form action with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol form action with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol form action with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol form action with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol button formAction with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol button formAction with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol button formAction with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol button formAction with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol button formAction with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol button formAction with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol input formAction with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol input formAction with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol input formAction with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol input formAction with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol input formAction with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol input formAction with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol iframe src with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol iframe src with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol iframe src with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol iframe src with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol iframe src with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol iframe src with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol frame src with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol frame src with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol frame src with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol frame src with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol frame src with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol frame src with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol in an SVG link with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol in an SVG link with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol in an SVG link with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol in an SVG link with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol in an SVG link with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol in an SVG link with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol in an SVG link with a namespace with server string render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol in an SVG link with a namespace with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol in an SVG link with a namespace with clean client render","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol in an SVG link with a namespace with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs throws when rendering a javascript protocol in an SVG link with a namespace with client render on top of bad server markup","location":{"column":5,"line":296},"status":"passed","title":"throws when rendering a javascript protocol in an SVG link with a namespace with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs rejects a javascript protocol href if it is added during an update","location":{"column":3,"line":141},"status":"passed","title":"rejects a javascript protocol href if it is added during an update"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders only the first invocation of toString with server string render","location":{"column":5,"line":261},"status":"passed","title":"renders only the first invocation of toString with server string render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders only the first invocation of toString with server stream render","location":{"column":5,"line":262},"status":"passed","title":"renders only the first invocation of toString with server stream render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders only the first invocation of toString with clean client render","location":{"column":5,"line":278},"status":"passed","title":"renders only the first invocation of toString with clean client render"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders only the first invocation of toString with client render on top of good server markup","location":{"column":5,"line":280},"status":"passed","title":"renders only the first invocation of toString with client render on top of good server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs renders only the first invocation of toString with client render on top of bad server markup","location":{"column":5,"line":282},"status":"passed","title":"renders only the first invocation of toString with client render on top of bad server markup"},{"ancestorTitles":["ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs"],"failureMessages":[],"fullName":"ReactDOMServerIntegration - Untrusted URLs - disableJavaScriptURLs rejects a javascript protocol href if it is added during an update twice","location":{"column":3,"line":264},"status":"passed","title":"rejects a javascript protocol href if it is added during an update twice"}],"endTime":1639318899505,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerIntegrationUntrustedURL-test.internal.js","startTime":1639318891564,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should destroy a react root upon request","location":{"column":3,"line":16},"status":"passed","title":"should destroy a react root upon request"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should warn when unmounting a non-container root node","location":{"column":3,"line":41},"status":"passed","title":"should warn when unmounting a non-container root node"},{"ancestorTitles":["ReactMount"],"failureMessages":[],"fullName":"ReactMount should warn when unmounting a non-container, non-root node","location":{"column":3,"line":64},"status":"passed","title":"should warn when unmounting a non-container, non-root node"}],"endTime":1639318899804,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactMountDestruction-test.js","startTime":1639318899571,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should automatically append `px` to relevant styles","location":{"column":3,"line":17},"status":"passed","title":"should automatically append `px` to relevant styles"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should trim values","location":{"column":3,"line":29},"status":"passed","title":"should trim values"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should not append `px` to styles that might need a number","location":{"column":3,"line":40},"status":"passed","title":"should not append `px` to styles that might need a number"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should create vendor-prefixed markup correctly","location":{"column":3,"line":50},"status":"passed","title":"should create vendor-prefixed markup correctly"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should not hyphenate custom CSS property","location":{"column":3,"line":60},"status":"passed","title":"should not hyphenate custom CSS property"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should set style attribute when styles exist","location":{"column":3,"line":69},"status":"passed","title":"should set style attribute when styles exist"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should not set style attribute when no styles exist","location":{"column":3,"line":80},"status":"passed","title":"should not set style attribute when no styles exist"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should warn when using hyphenated style names","location":{"column":3,"line":90},"status":"passed","title":"should warn when using hyphenated style names"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should warn when updating hyphenated style names","location":{"column":3,"line":108},"status":"passed","title":"should warn when updating hyphenated style names"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations warns when miscapitalizing vendored style names","location":{"column":3,"line":134},"status":"passed","title":"warns when miscapitalizing vendored style names"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should warn about style having a trailing semicolon","location":{"column":3,"line":166},"status":"passed","title":"should warn about style having a trailing semicolon"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should warn about style containing a NaN value","location":{"column":3,"line":198},"status":"passed","title":"should warn about style containing a NaN value"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should not warn when setting CSS custom properties","location":{"column":3,"line":216},"status":"passed","title":"should not warn when setting CSS custom properties"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should warn about style containing a Infinity value","location":{"column":3,"line":227},"status":"passed","title":"should warn about style containing a Infinity value"},{"ancestorTitles":["CSSPropertyOperations"],"failureMessages":[],"fullName":"CSSPropertyOperations should not add units to CSS custom properties","location":{"column":3,"line":245},"status":"passed","title":"should not add units to CSS custom properties"}],"endTime":1639318900163,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/CSSPropertyOperations-test.js","startTime":1639318899871,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should generate simple markup","location":{"column":5,"line":32},"status":"passed","title":"should generate simple markup"},{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should generate simple markup for self-closing tags","location":{"column":5,"line":39},"status":"passed","title":"should generate simple markup for self-closing tags"},{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should generate comment markup for component returns null","location":{"column":5,"line":44},"status":"passed","title":"should generate comment markup for component returns null"},{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should render composite components","location":{"column":5,"line":57},"status":"passed","title":"should render composite components"},{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should only execute certain lifecycle methods","location":{"column":5,"line":90},"status":"passed","title":"should only execute certain lifecycle methods"},{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should throw with silly args","location":{"column":5,"line":157},"status":"passed","title":"should throw with silly args"},{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should throw prop mapping error for an <iframe /> with invalid props","location":{"column":5,"line":165},"status":"passed","title":"should throw prop mapping error for an <iframe /> with invalid props"},{"ancestorTitles":["ReactDOMServer","renderToString"],"failureMessages":[],"fullName":"ReactDOMServer renderToString should not crash on poisoned hasOwnProperty","location":{"column":5,"line":174},"status":"passed","title":"should not crash on poisoned hasOwnProperty"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup should not put checksum and React ID on components","location":{"column":5,"line":189},"status":"passed","title":"should not put checksum and React ID on components"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup should not put checksum and React ID on text components","location":{"column":5,"line":211},"status":"passed","title":"should not put checksum and React ID on text components"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup should not use comments for empty nodes","location":{"column":5,"line":227},"status":"passed","title":"should not use comments for empty nodes"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup should only execute certain lifecycle methods","location":{"column":5,"line":239},"status":"passed","title":"should only execute certain lifecycle methods"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup should throw with silly args","location":{"column":5,"line":297},"status":"passed","title":"should throw with silly args"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup allows setState in componentWillMount without using DOM","location":{"column":5,"line":305},"status":"passed","title":"allows setState in componentWillMount without using DOM"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup allows setState in componentWillMount with custom constructor","location":{"column":5,"line":319},"status":"passed","title":"allows setState in componentWillMount with custom constructor"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup renders with props when using custom constructor","location":{"column":5,"line":338},"status":"passed","title":"renders with props when using custom constructor"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup renders with context when using custom constructor","location":{"column":5,"line":355},"status":"passed","title":"renders with context when using custom constructor"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup renders with new context API","location":{"column":5,"line":394},"status":"passed","title":"renders with new context API"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup renders with dispatcher.readContext mechanism","location":{"column":5,"line":430},"status":"passed","title":"renders with dispatcher.readContext mechanism"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup renders context API, reentrancy","location":{"column":5,"line":468},"status":"passed","title":"renders context API, reentrancy"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup renders components with different batching strategies","location":{"column":5,"line":517},"status":"passed","title":"renders components with different batching strategies"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup renders synchronously resolved lazy component","location":{"column":5,"line":550},"status":"passed","title":"renders synchronously resolved lazy component"},{"ancestorTitles":["ReactDOMServer","renderToStaticMarkup"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticMarkup throws error from synchronously rejected lazy component","location":{"column":5,"line":566},"status":"passed","title":"throws error from synchronously rejected lazy component"},{"ancestorTitles":["ReactDOMServer","renderToNodeStream"],"failureMessages":[],"fullName":"ReactDOMServer renderToNodeStream should generate simple markup","location":{"column":5,"line":580},"status":"passed","title":"should generate simple markup"},{"ancestorTitles":["ReactDOMServer","renderToNodeStream"],"failureMessages":[],"fullName":"ReactDOMServer renderToNodeStream should handle errors correctly","location":{"column":5,"line":588},"status":"passed","title":"should handle errors correctly"},{"ancestorTitles":["ReactDOMServer","renderToStaticNodeStream"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticNodeStream should generate simple markup","location":{"column":5,"line":603},"status":"passed","title":"should generate simple markup"},{"ancestorTitles":["ReactDOMServer","renderToStaticNodeStream"],"failureMessages":[],"fullName":"ReactDOMServer renderToStaticNodeStream should handle errors correctly","location":{"column":5,"line":611},"status":"passed","title":"should handle errors correctly"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer warns with a no-op when an async setState is triggered","location":{"column":3,"line":625},"status":"passed","title":"warns with a no-op when an async setState is triggered"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer warns with a no-op when an async forceUpdate is triggered","location":{"column":3,"line":654},"status":"passed","title":"warns with a no-op when an async forceUpdate is triggered"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer throws for unsupported types on the server","location":{"column":5,"line":682},"status":"passed","title":"throws for unsupported types on the server"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer throws when suspending on the server","location":{"column":5,"line":705},"status":"passed","title":"throws when suspending on the server"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer does not get confused by throwing null","location":{"column":3,"line":716},"status":"passed","title":"does not get confused by throwing null"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer does not get confused by throwing undefined","location":{"column":3,"line":734},"status":"passed","title":"does not get confused by throwing undefined"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer does not get confused by throwing a primitive","location":{"column":3,"line":752},"status":"passed","title":"does not get confused by throwing a primitive"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should throw (in dev) when children are mutated during render","location":{"column":3,"line":770},"status":"passed","title":"should throw (in dev) when children are mutated during render"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer warns about lowercase html but not in svg tags","location":{"column":3,"line":798},"status":"passed","title":"warns about lowercase html but not in svg tags"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should warn about contentEditable and children","location":{"column":3,"line":829},"status":"passed","title":"should warn about contentEditable and children"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should warn when server rendering a class with a render method that does not extend React.Component","location":{"column":3,"line":840},"status":"passed","title":"should warn when server rendering a class with a render method that does not extend React.Component"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer can import react-dom in Node environment","location":{"column":3,"line":865},"status":"passed","title":"can import react-dom in Node environment"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer includes a useful stack in warnings","location":{"column":3,"line":884},"status":"passed","title":"includes a useful stack in warnings"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer reports stacks with re-entrant renderToString() calls","location":{"column":3,"line":940},"status":"passed","title":"reports stacks with re-entrant renderToString() calls"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should warn if an invalid contextType is defined","location":{"column":3,"line":997},"status":"passed","title":"should warn if an invalid contextType is defined"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should not warn when class contextType is null","location":{"column":3,"line":1034},"status":"passed","title":"should not warn when class contextType is null"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should warn when class contextType is undefined","location":{"column":3,"line":1047},"status":"passed","title":"should warn when class contextType is undefined"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should warn when class contextType is an object","location":{"column":3,"line":1071},"status":"passed","title":"should warn when class contextType is an object"},{"ancestorTitles":["ReactDOMServer"],"failureMessages":[],"fullName":"ReactDOMServer should warn when class contextType is a primitive","location":{"column":3,"line":1094},"status":"passed","title":"should warn when class contextType is a primitive"}],"endTime":1639318901409,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactServerRendering-test.js","startTime":1639318900225,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["InvalidEventListeners"],"failureMessages":[],"fullName":"InvalidEventListeners should prevent non-function listeners, at dispatch","location":{"column":3,"line":33},"status":"passed","title":"should prevent non-function listeners, at dispatch"},{"ancestorTitles":["InvalidEventListeners"],"failureMessages":[],"fullName":"InvalidEventListeners should not prevent null listeners, at dispatch","location":{"column":3,"line":75},"status":"passed","title":"should not prevent null listeners, at dispatch"}],"endTime":1639318901767,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/InvalidEventListeners-test.js","startTime":1639318901475,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates the target boundary synchronously during a click","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates the target boundary synchronously during a click"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates at higher pri if sync did not work first time","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates at higher pri if sync did not work first time"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates at higher pri for secondary discrete events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates at higher pri for secondary discrete events"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates the target boundary synchronously during a click (createEventHandle)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates the target boundary synchronously during a click (createEventHandle)"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates at higher pri if sync did not work first time (createEventHandle)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates at higher pri if sync did not work first time (createEventHandle)"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates at higher pri for secondary discrete events (createEventHandle)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates at higher pri for secondary discrete events (createEventHandle)"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates the hovered targets as higher priority for continuous events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates the hovered targets as higher priority for continuous events"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates the last target path first for continuous events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates the last target path first for continuous events"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates the last explicitly hydrated target at higher priority","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates the last explicitly hydrated target at higher priority"},{"ancestorTitles":["ReactDOMServerSelectiveHydration"],"failureMessages":[],"fullName":"ReactDOMServerSelectiveHydration [GATED, SHOULD FAIL] hydrates before an update even if hydration moves away from it","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hydrates before an update even if hydration moves away from it"}],"endTime":1639318902876,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/ReactDOMServerSelectiveHydration-test.internal.js","startTime":1639318901834,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser ampersand is escaped when passed as text content","location":{"column":3,"line":22},"status":"passed","title":"ampersand is escaped when passed as text content"},{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser double quote is escaped when passed as text content","location":{"column":3,"line":27},"status":"passed","title":"double quote is escaped when passed as text content"},{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser single quote is escaped when passed as text content","location":{"column":3,"line":32},"status":"passed","title":"single quote is escaped when passed as text content"},{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser greater than entity is escaped when passed as text content","location":{"column":3,"line":37},"status":"passed","title":"greater than entity is escaped when passed as text content"},{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser lower than entity is escaped when passed as text content","location":{"column":3,"line":42},"status":"passed","title":"lower than entity is escaped when passed as text content"},{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser number is correctly passed as text content","location":{"column":3,"line":47},"status":"passed","title":"number is correctly passed as text content"},{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser number is escaped to string when passed as text content","location":{"column":3,"line":52},"status":"passed","title":"number is escaped to string when passed as text content"},{"ancestorTitles":["escapeTextForBrowser"],"failureMessages":[],"fullName":"escapeTextForBrowser escape text content representing a script tag","location":{"column":3,"line":57},"status":"passed","title":"escape text content representing a script tag"}],"endTime":1639318903239,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/__tests__/escapeTextForBrowser-test.js","startTime":1639318902942,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["dangerouslySetInnerHTML","when the node has innerHTML property"],"failureMessages":[],"fullName":"dangerouslySetInnerHTML when the node has innerHTML property sets innerHTML on it","location":{"column":5,"line":17},"status":"passed","title":"sets innerHTML on it"},{"ancestorTitles":["dangerouslySetInnerHTML","when the node does not have an innerHTML property"],"failureMessages":[],"fullName":"dangerouslySetInnerHTML when the node does not have an innerHTML property sets innerHTML on it","location":{"column":5,"line":58},"status":"passed","title":"sets innerHTML on it"},{"ancestorTitles":["dangerouslySetInnerHTML","when the node does not have an innerHTML property"],"failureMessages":[],"fullName":"dangerouslySetInnerHTML when the node does not have an innerHTML property clears previous children","location":{"column":5,"line":72},"status":"passed","title":"clears previous children"}],"endTime":1639318903539,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/client/__tests__/dangerouslySetInnerHTML-test.js","startTime":1639318903305,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getNodeForCharacterOffset"],"failureMessages":[],"fullName":"getNodeForCharacterOffset should handle siblings","location":{"column":3,"line":41},"status":"passed","title":"should handle siblings"},{"ancestorTitles":["getNodeForCharacterOffset"],"failureMessages":[],"fullName":"getNodeForCharacterOffset should handle trailing chars","location":{"column":3,"line":48},"status":"passed","title":"should handle trailing chars"},{"ancestorTitles":["getNodeForCharacterOffset"],"failureMessages":[],"fullName":"getNodeForCharacterOffset should handle trees","location":{"column":3,"line":55},"status":"passed","title":"should handle trees"},{"ancestorTitles":["getNodeForCharacterOffset"],"failureMessages":[],"fullName":"getNodeForCharacterOffset should handle non-existent offset","location":{"column":3,"line":77},"status":"passed","title":"should handle non-existent offset"}],"endTime":1639318903767,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/client/__tests__/getNodeForCharacterOffset-test.js","startTime":1639318903605,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["when Trusted Types are available in global object"],"failureMessages":[],"fullName":"when Trusted Types are available in global object should not stringify trusted values for dangerouslySetInnerHTML","location":{"column":3,"line":56},"status":"passed","title":"should not stringify trusted values for dangerouslySetInnerHTML"},{"ancestorTitles":["when Trusted Types are available in global object"],"failureMessages":[],"fullName":"when Trusted Types are available in global object should not stringify trusted values for setAttribute (unknown attribute)","location":{"column":3,"line":99},"status":"passed","title":"should not stringify trusted values for setAttribute (unknown attribute)"},{"ancestorTitles":["when Trusted Types are available in global object"],"failureMessages":[],"fullName":"when Trusted Types are available in global object should not stringify trusted values for setAttribute (known attribute)","location":{"column":3,"line":127},"status":"passed","title":"should not stringify trusted values for setAttribute (known attribute)"},{"ancestorTitles":["when Trusted Types are available in global object"],"failureMessages":[],"fullName":"when Trusted Types are available in global object should not stringify trusted values for setAttributeNS","location":{"column":3,"line":155},"status":"passed","title":"should not stringify trusted values for setAttributeNS"},{"ancestorTitles":["when Trusted Types are available in global object","dangerouslySetInnerHTML in svg elements in Internet Explorer"],"failureMessages":[],"fullName":"when Trusted Types are available in global object dangerouslySetInnerHTML in svg elements in Internet Explorer should log a warning","location":{"column":5,"line":211},"status":"passed","title":"should log a warning"},{"ancestorTitles":["when Trusted Types are available in global object"],"failureMessages":[],"fullName":"when Trusted Types are available in global object should warn once when rendering script tag in jsx on client","location":{"column":3,"line":231},"status":"passed","title":"should warn once when rendering script tag in jsx on client"}],"endTime":1639318904403,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/client/__tests__/trustedTypes-test.internal.js","startTime":1639318903833,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getEventKey","when key is implemented in a browser","when key is not normalized"],"failureMessages":[],"fullName":"getEventKey when key is implemented in a browser when key is not normalized returns a normalized value","location":{"column":7,"line":34},"status":"passed","title":"returns a normalized value"},{"ancestorTitles":["getEventKey","when key is implemented in a browser","when key is normalized"],"failureMessages":[],"fullName":"getEventKey when key is implemented in a browser when key is normalized returns a key","location":{"column":7,"line":55},"status":"passed","title":"returns a key"},{"ancestorTitles":["getEventKey","when key is not implemented in a browser","when event type is keypress","when charCode is 13"],"failureMessages":[],"fullName":"getEventKey when key is not implemented in a browser when event type is keypress when charCode is 13 returns \"Enter\"","location":{"column":9,"line":79},"status":"passed","title":"returns \"Enter\""},{"ancestorTitles":["getEventKey","when key is not implemented in a browser","when event type is keypress","when charCode is not 13"],"failureMessages":[],"fullName":"getEventKey when key is not implemented in a browser when event type is keypress when charCode is not 13 returns a string from a charCode","location":{"column":9,"line":100},"status":"passed","title":"returns a string from a charCode"},{"ancestorTitles":["getEventKey","when key is not implemented in a browser","when event type is keydown or keyup","when keyCode is recognized"],"failureMessages":[],"fullName":"getEventKey when key is not implemented in a browser when event type is keydown or keyup when keyCode is recognized returns a translated key","location":{"column":9,"line":123},"status":"passed","title":"returns a translated key"},{"ancestorTitles":["getEventKey","when key is not implemented in a browser","when event type is keydown or keyup","when keyCode is not recognized"],"failureMessages":[],"fullName":"getEventKey when key is not implemented in a browser when event type is keydown or keyup when keyCode is not recognized returns Unidentified","location":{"column":9,"line":144},"status":"passed","title":"returns Unidentified"}],"endTime":1639318904730,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/getEventKey-test.js","startTime":1639318904469,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is present in nativeEvent when charCode is 0 and keyCode is 13, returns 13","location":{"column":11,"line":35},"status":"passed","title":"when charCode is 0 and keyCode is 13, returns 13"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is present in nativeEvent when charCode is 32 or bigger and keyCode is missing, returns charCode","location":{"column":11,"line":56},"status":"passed","title":"when charCode is 32 or bigger and keyCode is missing, returns charCode"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is present in nativeEvent when charCode is 13 and keyCode is missing, returns charCode","location":{"column":11,"line":76},"status":"passed","title":"when charCode is 13 and keyCode is missing, returns charCode"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is present in nativeEvent when charCode is smaller than 32 but is not 13, and keyCode is missing, ignores keypress","location":{"column":11,"line":99},"status":"passed","title":"when charCode is smaller than 32 but is not 13, and keyCode is missing, ignores keypress"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is present in nativeEvent when charCode is 10, returns 13","location":{"column":11,"line":119},"status":"passed","title":"when charCode is 10, returns 13"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is present in nativeEvent when charCode is 10 and ctrl is pressed, returns 13","location":{"column":11,"line":139},"status":"passed","title":"when charCode is 10 and ctrl is pressed, returns 13"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is not present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is not present in nativeEvent when keyCode is 32 or bigger, returns keyCode","location":{"column":11,"line":184},"status":"passed","title":"when keyCode is 32 or bigger, returns keyCode"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is not present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is not present in nativeEvent when keyCode is 13, returns 13","location":{"column":11,"line":204},"status":"passed","title":"when keyCode is 13, returns 13"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is `keypress`","when charCode is not present in nativeEvent"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is `keypress` when charCode is not present in nativeEvent when keyCode is smaller than 32 and is not 13, ignores keypress","location":{"column":11,"line":224},"status":"passed","title":"when keyCode is smaller than 32 and is not 13, ignores keypress"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode","when event is not `keypress`"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when event is not `keypress` returns 0","location":{"column":9,"line":247},"status":"passed","title":"returns 0"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","charCode"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface charCode when charCode is smaller than 32 but is not 13, and keyCode is missing, charCode is 0","location":{"column":7,"line":280},"status":"passed","title":"when charCode is smaller than 32 but is not 13, and keyCode is missing, charCode is 0"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","keyCode","when event is `keydown` or `keyup`"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface keyCode when event is `keydown` or `keyup` returns a passed keyCode","location":{"column":9,"line":303},"status":"passed","title":"returns a passed keyCode"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","keyCode","when event is `keypress`"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface keyCode when event is `keypress` returns 0","location":{"column":9,"line":337},"status":"passed","title":"returns 0"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","which","when event is `keypress`"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface which when event is `keypress` is consistent with `charCode`","location":{"column":9,"line":361},"status":"passed","title":"is consistent with `charCode`"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","which","when event is `keydown` or `keyup`"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface which when event is `keydown` or `keyup` is consistent with `keyCode`","location":{"column":9,"line":400},"status":"passed","title":"is consistent with `keyCode`"},{"ancestorTitles":["SyntheticKeyboardEvent","KeyboardEvent interface","code"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent KeyboardEvent interface code returns code on `keydown`, `keyup` and `keypress`","location":{"column":7,"line":456},"status":"passed","title":"returns code on `keydown`, `keyup` and `keypress`"},{"ancestorTitles":["SyntheticKeyboardEvent","EventInterface"],"failureMessages":[],"fullName":"SyntheticKeyboardEvent EventInterface is able to `preventDefault` and `stopPropagation`","location":{"column":5,"line":504},"status":"passed","title":"is able to `preventDefault` and `stopPropagation`"}],"endTime":1639318905137,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/SyntheticKeyboardEvent-test.js","startTime":1639318904796,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SyntheticWheelEvent"],"failureMessages":[],"fullName":"SyntheticWheelEvent should normalize properties from the MouseEvent interface","location":{"column":3,"line":32},"status":"passed","title":"should normalize properties from the MouseEvent interface"},{"ancestorTitles":["SyntheticWheelEvent"],"failureMessages":[],"fullName":"SyntheticWheelEvent should normalize properties from the WheelEvent interface","location":{"column":3,"line":51},"status":"passed","title":"should normalize properties from the WheelEvent interface"},{"ancestorTitles":["SyntheticWheelEvent"],"failureMessages":[],"fullName":"SyntheticWheelEvent should be able to `preventDefault` and `stopPropagation`","location":{"column":3,"line":86},"status":"passed","title":"should be able to `preventDefault` and `stopPropagation`"}],"endTime":1639318905439,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/SyntheticWheelEvent-test.js","startTime":1639318905211,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SyntheticFocusEvent"],"failureMessages":[],"fullName":"SyntheticFocusEvent onFocus events have the focus type","location":{"column":3,"line":29},"status":"passed","title":"onFocus events have the focus type"},{"ancestorTitles":["SyntheticFocusEvent"],"failureMessages":[],"fullName":"SyntheticFocusEvent onBlur events have the blur type","location":{"column":3,"line":50},"status":"passed","title":"onBlur events have the blur type"}],"endTime":1639318905799,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/SyntheticFocusEvent-test.js","startTime":1639318905507,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SyntheticEvent"],"failureMessages":[],"fullName":"SyntheticEvent should be able to `preventDefault`","location":{"column":3,"line":31},"status":"passed","title":"should be able to `preventDefault`"},{"ancestorTitles":["SyntheticEvent"],"failureMessages":[],"fullName":"SyntheticEvent should be prevented if nativeEvent is prevented","location":{"column":3,"line":51},"status":"passed","title":"should be prevented if nativeEvent is prevented"},{"ancestorTitles":["SyntheticEvent"],"failureMessages":[],"fullName":"SyntheticEvent should be able to `stopPropagation`","location":{"column":3,"line":83},"status":"passed","title":"should be able to `stopPropagation`"}],"endTime":1639318906093,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/SyntheticEvent-test.js","startTime":1639318905866,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SyntheticClipboardEvent","ClipboardEvent interface","clipboardData","when event has clipboardData"],"failureMessages":[],"fullName":"SyntheticClipboardEvent ClipboardEvent interface clipboardData when event has clipboardData returns event's clipboardData","location":{"column":9,"line":35},"status":"passed","title":"returns event's clipboardData"},{"ancestorTitles":["SyntheticClipboardEvent","EventInterface"],"failureMessages":[],"fullName":"SyntheticClipboardEvent EventInterface is able to `preventDefault` and `stopPropagation`","location":{"column":5,"line":82},"status":"passed","title":"is able to `preventDefault` and `stopPropagation`"}],"endTime":1639318906400,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/SyntheticClipboardEvent-test.js","startTime":1639318906170,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SyntheticMouseEvent"],"failureMessages":[],"fullName":"SyntheticMouseEvent should only use values from movementX/Y when event type is mousemove","location":{"column":3,"line":33},"status":"passed","title":"should only use values from movementX/Y when event type is mousemove"},{"ancestorTitles":["SyntheticMouseEvent"],"failureMessages":[],"fullName":"SyntheticMouseEvent should correctly calculate movementX/Y for capture phase","location":{"column":3,"line":82},"status":"passed","title":"should correctly calculate movementX/Y for capture phase"}],"endTime":1639318906765,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/SyntheticMouseEvent-test.js","startTime":1639318906467,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled does not pool events","location":{"column":7,"line":81},"status":"passed","title":"does not pool events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events","location":{"column":7,"line":102},"status":"passed","title":"handle propagation of click events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events combined with sync clicks","location":{"column":7,"line":147},"status":"passed","title":"handle propagation of click events combined with sync clicks"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events between roots","location":{"column":7,"line":180},"status":"passed","title":"handle propagation of click events between roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events between disjointed roots","location":{"column":7,"line":232},"status":"passed","title":"handle propagation of click events between disjointed roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events between disjointed roots #2","location":{"column":7,"line":284},"status":"passed","title":"handle propagation of click events between disjointed roots #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events between disjointed comment roots","location":{"column":7,"line":373},"status":"passed","title":"handle propagation of click events between disjointed comment roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events between disjointed comment roots #2","location":{"column":7,"line":428},"status":"passed","title":"handle propagation of click events between disjointed comment roots #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of click events between portals","location":{"column":7,"line":485},"status":"passed","title":"handle propagation of click events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle click events on document.body portals","location":{"column":7,"line":540},"status":"passed","title":"handle click events on document.body portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled [GATED, SHOULD FAIL] does not invoke an event on a parent tree when a subtree is dehydrated","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not invoke an event on a parent tree when a subtree is dehydrated"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle click events on dynamic portals","location":{"column":7,"line":657},"status":"passed","title":"handle click events on dynamic portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle click events on dynamic portals #2","location":{"column":7,"line":698},"status":"passed","title":"handle click events on dynamic portals #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled native stopPropagation on click events between portals","location":{"column":7,"line":737},"status":"passed","title":"native stopPropagation on click events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of focus events","location":{"column":7,"line":799},"status":"passed","title":"handle propagation of focus events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of focus events between roots","location":{"column":7,"line":844},"status":"passed","title":"handle propagation of focus events between roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of focus events between portals","location":{"column":7,"line":897},"status":"passed","title":"handle propagation of focus events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled native stopPropagation on focus events between portals","location":{"column":7,"line":953},"status":"passed","title":"native stopPropagation on focus events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of enter and leave events between portals","location":{"column":7,"line":1016},"status":"passed","title":"handle propagation of enter and leave events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled handle propagation of enter and leave events between portals #2","location":{"column":7,"line":1083},"status":"passed","title":"handle propagation of enter and leave events between portals #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled should preserve bubble/capture order between roots and nested portals","location":{"column":7,"line":1152},"status":"passed","title":"should preserve bubble/capture order between roots and nested portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] can render correctly with the ReactDOMServer","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can render correctly with the ReactDOMServer"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] can render correctly with the ReactDOMServer hydration","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can render correctly with the ReactDOMServer hydration"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for setting and clearing a basic \"click\" listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for setting and clearing a basic \"click\" listener"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should handle the target being a text node","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should handle the target being a text node"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events mixed with onClick events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events mixed with onClick events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener on the outer target","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener on the outer target"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle many nested target listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle many nested target listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for target events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for target events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for many target events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for many target events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed capture/bubbling target listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed capture/bubbling target listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should work with concurrent mode updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should work with concurrent mode updates"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for a basic \"click\" window listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for a basic \"click\" window listener"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events on the window","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events on the window"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation for delegated listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation for delegated listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events on the window and document","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events on the window and document"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] does not support custom user events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not support custom user events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is unmounted"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] beforeblur and afterblur are called after a nested focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] beforeblur and afterblur are called after a nested focused element is unmounted"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is suspended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is suspended"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] regression: does not fire beforeblur/afterblur if target is already hidden","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] regression: does not fire beforeblur/afterblur if target is already hidden"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events between disjointed comment roots","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events between disjointed comment roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] propagates known createEventHandle events through portals without inner listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] propagates known createEventHandle events through portals without inner listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle propagation of click events on a scope","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events on a scope"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle mixed propagation of click events on a scope","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle mixed propagation of click events on a scope"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] should not handle the target being a dangling text node within a scope","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not handle the target being a dangling text node within a scope"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle stopPropagation (inner) correctly between scopes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle stopPropagation (inner) correctly between scopes"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle stopPropagation (outer) correctly between scopes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle stopPropagation (outer) correctly between scopes"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle stopPropagation (inner and outer) correctly between scopes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle stopPropagation (inner and outer) correctly between scopes"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport disabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport disabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] should be able to register handlers for events affected by the intervention","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should be able to register handlers for events affected by the intervention"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled does not pool events","location":{"column":7,"line":81},"status":"passed","title":"does not pool events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events","location":{"column":7,"line":102},"status":"passed","title":"handle propagation of click events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events combined with sync clicks","location":{"column":7,"line":147},"status":"passed","title":"handle propagation of click events combined with sync clicks"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events between roots","location":{"column":7,"line":180},"status":"passed","title":"handle propagation of click events between roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events between disjointed roots","location":{"column":7,"line":232},"status":"passed","title":"handle propagation of click events between disjointed roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events between disjointed roots #2","location":{"column":7,"line":284},"status":"passed","title":"handle propagation of click events between disjointed roots #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events between disjointed comment roots","location":{"column":7,"line":373},"status":"passed","title":"handle propagation of click events between disjointed comment roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events between disjointed comment roots #2","location":{"column":7,"line":428},"status":"passed","title":"handle propagation of click events between disjointed comment roots #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of click events between portals","location":{"column":7,"line":485},"status":"passed","title":"handle propagation of click events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle click events on document.body portals","location":{"column":7,"line":540},"status":"passed","title":"handle click events on document.body portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled [GATED, SHOULD FAIL] does not invoke an event on a parent tree when a subtree is dehydrated","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not invoke an event on a parent tree when a subtree is dehydrated"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle click events on dynamic portals","location":{"column":7,"line":657},"status":"passed","title":"handle click events on dynamic portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle click events on dynamic portals #2","location":{"column":7,"line":698},"status":"passed","title":"handle click events on dynamic portals #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled native stopPropagation on click events between portals","location":{"column":7,"line":737},"status":"passed","title":"native stopPropagation on click events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of focus events","location":{"column":7,"line":799},"status":"passed","title":"handle propagation of focus events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of focus events between roots","location":{"column":7,"line":844},"status":"passed","title":"handle propagation of focus events between roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of focus events between portals","location":{"column":7,"line":897},"status":"passed","title":"handle propagation of focus events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled native stopPropagation on focus events between portals","location":{"column":7,"line":953},"status":"passed","title":"native stopPropagation on focus events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of enter and leave events between portals","location":{"column":7,"line":1016},"status":"passed","title":"handle propagation of enter and leave events between portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled handle propagation of enter and leave events between portals #2","location":{"column":7,"line":1083},"status":"passed","title":"handle propagation of enter and leave events between portals #2"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled should preserve bubble/capture order between roots and nested portals","location":{"column":7,"line":1152},"status":"passed","title":"should preserve bubble/capture order between roots and nested portals"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] can render correctly with the ReactDOMServer","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can render correctly with the ReactDOMServer"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] can render correctly with the ReactDOMServer hydration","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can render correctly with the ReactDOMServer hydration"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for setting and clearing a basic \"click\" listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for setting and clearing a basic \"click\" listener"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should handle the target being a text node","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should handle the target being a text node"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events mixed with onClick events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events mixed with onClick events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener on the outer target","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for a basic \"click\" listener on the outer target"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle many nested target listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle many nested target listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for target events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for target events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for many target events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation correctly for many target events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed capture/bubbling target listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed capture/bubbling target listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should work with concurrent mode updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should work with concurrent mode updates"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly work for a basic \"click\" window listener","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly work for a basic \"click\" window listener"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events on the window","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events on the window"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation for mixed listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] should correctly handle stopPropagation for delegated listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle stopPropagation for delegated listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events on the window and document","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events on the window and document"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] does not support custom user events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not support custom user events"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is unmounted"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] beforeblur and afterblur are called after a nested focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] beforeblur and afterblur are called after a nested focused element is unmounted"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is suspended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] beforeblur and afterblur are called after a focused element is suspended"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] regression: does not fire beforeblur/afterblur if target is already hidden","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] regression: does not fire beforeblur/afterblur if target is already hidden"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] handle propagation of click events between disjointed comment roots","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events between disjointed comment roots"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle [GATED, SHOULD FAIL] propagates known createEventHandle events through portals without inner listeners","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] propagates known createEventHandle events through portals without inner listeners"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle propagation of click events on a scope","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle propagation of click events on a scope"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle mixed propagation of click events on a scope","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle mixed propagation of click events on a scope"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] should not handle the target being a dangling text node within a scope","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not handle the target being a dangling text node within a scope"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle stopPropagation (inner) correctly between scopes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle stopPropagation (inner) correctly between scopes"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle stopPropagation (outer) correctly between scopes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle stopPropagation (outer) correctly between scopes"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] handle stopPropagation (inner and outer) correctly between scopes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] handle stopPropagation (inner and outer) correctly between scopes"},{"ancestorTitles":["DOMPluginEventSystem","enableLegacyFBSupport enabled","ReactDOM.createEventHandle","Compatibility with Scopes API"],"failureMessages":[],"fullName":"DOMPluginEventSystem enableLegacyFBSupport enabled ReactDOM.createEventHandle Compatibility with Scopes API [GATED, SHOULD FAIL] should be able to register handlers for events affected by the intervention","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should be able to register handlers for events affected by the intervention"}],"endTime":1639318920498,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/__tests__/DOMPluginEventSystem-test.internal.js","startTime":1639318906834,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SelectEventPlugin"],"failureMessages":[],"fullName":"SelectEventPlugin does not get confused when dependent events are registered independently","location":{"column":3,"line":32},"status":"passed","title":"does not get confused when dependent events are registered independently"},{"ancestorTitles":["SelectEventPlugin"],"failureMessages":[],"fullName":"SelectEventPlugin should fire `onSelect` when a listener is present","location":{"column":3,"line":77},"status":"passed","title":"should fire `onSelect` when a listener is present"},{"ancestorTitles":["SelectEventPlugin"],"failureMessages":[],"fullName":"SelectEventPlugin should fire `onSelectCapture` when a listener is present","location":{"column":3,"line":111},"status":"passed","title":"should fire `onSelectCapture` when a listener is present"},{"ancestorTitles":["SelectEventPlugin"],"failureMessages":[],"fullName":"SelectEventPlugin should not wait for `mouseup` after receiving `dragend`","location":{"column":3,"line":146},"status":"passed","title":"should not wait for `mouseup` after receiving `dragend`"},{"ancestorTitles":["SelectEventPlugin"],"failureMessages":[],"fullName":"SelectEventPlugin should handle selectionchange events","location":{"column":3,"line":180},"status":"passed","title":"should handle selectionchange events"}],"endTime":1639318920835,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/plugins/__tests__/SelectEventPlugin-test.js","startTime":1639318920566,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SimpleEventPlugin"],"failureMessages":[],"fullName":"SimpleEventPlugin A non-interactive tags click when disabled","location":{"column":3,"line":53},"status":"passed","title":"A non-interactive tags click when disabled"},{"ancestorTitles":["SimpleEventPlugin"],"failureMessages":[],"fullName":"SimpleEventPlugin A non-interactive tags clicks bubble when disabled","location":{"column":3,"line":58},"status":"passed","title":"A non-interactive tags clicks bubble when disabled"},{"ancestorTitles":["SimpleEventPlugin"],"failureMessages":[],"fullName":"SimpleEventPlugin does not register a click when clicking a child of a disabled element","location":{"column":3,"line":69},"status":"passed","title":"does not register a click when clicking a child of a disabled element"},{"ancestorTitles":["SimpleEventPlugin"],"failureMessages":[],"fullName":"SimpleEventPlugin triggers click events for children of disabled elements","location":{"column":3,"line":81},"status":"passed","title":"triggers click events for children of disabled elements"},{"ancestorTitles":["SimpleEventPlugin"],"failureMessages":[],"fullName":"SimpleEventPlugin triggers parent captured click events when target is a child of a disabled elements","location":{"column":3,"line":93},"status":"passed","title":"triggers parent captured click events when target is a child of a disabled elements"},{"ancestorTitles":["SimpleEventPlugin"],"failureMessages":[],"fullName":"SimpleEventPlugin triggers captured click events for children of disabled elements","location":{"column":3,"line":107},"status":"passed","title":"triggers captured click events for children of disabled elements"},{"ancestorTitles":["SimpleEventPlugin","button"],"failureMessages":[],"fullName":"SimpleEventPlugin button should forward clicks when it starts out not disabled","location":{"column":7,"line":121},"status":"passed","title":"should forward clicks when it starts out not disabled"},{"ancestorTitles":["SimpleEventPlugin","button"],"failureMessages":[],"fullName":"SimpleEventPlugin button should not forward clicks when it starts out disabled","location":{"column":7,"line":129},"status":"passed","title":"should not forward clicks when it starts out disabled"},{"ancestorTitles":["SimpleEventPlugin","button"],"failureMessages":[],"fullName":"SimpleEventPlugin button should forward clicks when it becomes not disabled","location":{"column":7,"line":138},"status":"passed","title":"should forward clicks when it becomes not disabled"},{"ancestorTitles":["SimpleEventPlugin","button"],"failureMessages":[],"fullName":"SimpleEventPlugin button should not forward clicks when it becomes disabled","location":{"column":7,"line":152},"status":"passed","title":"should not forward clicks when it becomes disabled"},{"ancestorTitles":["SimpleEventPlugin","button"],"failureMessages":[],"fullName":"SimpleEventPlugin button should work correctly if the listener is changed","location":{"column":7,"line":166},"status":"passed","title":"should work correctly if the listener is changed"},{"ancestorTitles":["SimpleEventPlugin","input"],"failureMessages":[],"fullName":"SimpleEventPlugin input should forward clicks when it starts out not disabled","location":{"column":7,"line":121},"status":"passed","title":"should forward clicks when it starts out not disabled"},{"ancestorTitles":["SimpleEventPlugin","input"],"failureMessages":[],"fullName":"SimpleEventPlugin input should not forward clicks when it starts out disabled","location":{"column":7,"line":129},"status":"passed","title":"should not forward clicks when it starts out disabled"},{"ancestorTitles":["SimpleEventPlugin","input"],"failureMessages":[],"fullName":"SimpleEventPlugin input should forward clicks when it becomes not disabled","location":{"column":7,"line":138},"status":"passed","title":"should forward clicks when it becomes not disabled"},{"ancestorTitles":["SimpleEventPlugin","input"],"failureMessages":[],"fullName":"SimpleEventPlugin input should not forward clicks when it becomes disabled","location":{"column":7,"line":152},"status":"passed","title":"should not forward clicks when it becomes disabled"},{"ancestorTitles":["SimpleEventPlugin","input"],"failureMessages":[],"fullName":"SimpleEventPlugin input should work correctly if the listener is changed","location":{"column":7,"line":166},"status":"passed","title":"should work correctly if the listener is changed"},{"ancestorTitles":["SimpleEventPlugin","select"],"failureMessages":[],"fullName":"SimpleEventPlugin select should forward clicks when it starts out not disabled","location":{"column":7,"line":121},"status":"passed","title":"should forward clicks when it starts out not disabled"},{"ancestorTitles":["SimpleEventPlugin","select"],"failureMessages":[],"fullName":"SimpleEventPlugin select should not forward clicks when it starts out disabled","location":{"column":7,"line":129},"status":"passed","title":"should not forward clicks when it starts out disabled"},{"ancestorTitles":["SimpleEventPlugin","select"],"failureMessages":[],"fullName":"SimpleEventPlugin select should forward clicks when it becomes not disabled","location":{"column":7,"line":138},"status":"passed","title":"should forward clicks when it becomes not disabled"},{"ancestorTitles":["SimpleEventPlugin","select"],"failureMessages":[],"fullName":"SimpleEventPlugin select should not forward clicks when it becomes disabled","location":{"column":7,"line":152},"status":"passed","title":"should not forward clicks when it becomes disabled"},{"ancestorTitles":["SimpleEventPlugin","select"],"failureMessages":[],"fullName":"SimpleEventPlugin select should work correctly if the listener is changed","location":{"column":7,"line":166},"status":"passed","title":"should work correctly if the listener is changed"},{"ancestorTitles":["SimpleEventPlugin","textarea"],"failureMessages":[],"fullName":"SimpleEventPlugin textarea should forward clicks when it starts out not disabled","location":{"column":7,"line":121},"status":"passed","title":"should forward clicks when it starts out not disabled"},{"ancestorTitles":["SimpleEventPlugin","textarea"],"failureMessages":[],"fullName":"SimpleEventPlugin textarea should not forward clicks when it starts out disabled","location":{"column":7,"line":129},"status":"passed","title":"should not forward clicks when it starts out disabled"},{"ancestorTitles":["SimpleEventPlugin","textarea"],"failureMessages":[],"fullName":"SimpleEventPlugin textarea should forward clicks when it becomes not disabled","location":{"column":7,"line":138},"status":"passed","title":"should forward clicks when it becomes not disabled"},{"ancestorTitles":["SimpleEventPlugin","textarea"],"failureMessages":[],"fullName":"SimpleEventPlugin textarea should not forward clicks when it becomes disabled","location":{"column":7,"line":152},"status":"passed","title":"should not forward clicks when it becomes disabled"},{"ancestorTitles":["SimpleEventPlugin","textarea"],"failureMessages":[],"fullName":"SimpleEventPlugin textarea should work correctly if the listener is changed","location":{"column":7,"line":166},"status":"passed","title":"should work correctly if the listener is changed"},{"ancestorTitles":["SimpleEventPlugin"],"failureMessages":[],"fullName":"SimpleEventPlugin batches updates that occur as a result of a nested event dispatch","location":{"column":3,"line":182},"status":"passed","title":"batches updates that occur as a result of a nested event dispatch"},{"ancestorTitles":["SimpleEventPlugin","interactive events, in concurrent mode"],"failureMessages":[],"fullName":"SimpleEventPlugin interactive events, in concurrent mode [GATED, SHOULD FAIL] flushes pending interactive work before extracting event handler","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] flushes pending interactive work before extracting event handler"},{"ancestorTitles":["SimpleEventPlugin","interactive events, in concurrent mode"],"failureMessages":[],"fullName":"SimpleEventPlugin interactive events, in concurrent mode [GATED, SHOULD FAIL] end result of many interactive updates is deterministic","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] end result of many interactive updates is deterministic"},{"ancestorTitles":["SimpleEventPlugin","interactive events, in concurrent mode"],"failureMessages":[],"fullName":"SimpleEventPlugin interactive events, in concurrent mode [GATED, SHOULD FAIL] flushes discrete updates in order","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] flushes discrete updates in order"},{"ancestorTitles":["SimpleEventPlugin","iOS bubbling click fix"],"failureMessages":[],"fullName":"SimpleEventPlugin iOS bubbling click fix does not add a local click to interactive elements","location":{"column":5,"line":481},"status":"passed","title":"does not add a local click to interactive elements"},{"ancestorTitles":["SimpleEventPlugin","iOS bubbling click fix"],"failureMessages":[],"fullName":"SimpleEventPlugin iOS bubbling click fix adds a local click listener to non-interactive elements","location":{"column":5,"line":493},"status":"passed","title":"adds a local click listener to non-interactive elements"},{"ancestorTitles":["SimpleEventPlugin","iOS bubbling click fix"],"failureMessages":[],"fullName":"SimpleEventPlugin iOS bubbling click fix registers passive handlers for events affected by the intervention","location":{"column":5,"line":505},"status":"passed","title":"registers passive handlers for events affected by the intervention"}],"endTime":1639318923329,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/plugins/__tests__/SimpleEventPlugin-test.js","startTime":1639318920902,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should consider initial text value to be current","location":{"column":3,"line":77},"status":"passed","title":"should consider initial text value to be current"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should consider initial text value to be current (capture)","location":{"column":3,"line":101},"status":"passed","title":"should consider initial text value to be current (capture)"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should consider initial checkbox checked=true to be current","location":{"column":3,"line":125},"status":"passed","title":"should consider initial checkbox checked=true to be current"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should consider initial checkbox checked=false to be current","location":{"column":3,"line":149},"status":"passed","title":"should consider initial checkbox checked=false to be current"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should fire change for checkbox input","location":{"column":3,"line":173},"status":"passed","title":"should fire change for checkbox input"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should not fire change setting the value programmatically","location":{"column":3,"line":203},"status":"passed","title":"should not fire change setting the value programmatically"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should not distinguish equal string and number values","location":{"column":3,"line":239},"status":"passed","title":"should not distinguish equal string and number values"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should not fire change when setting checked programmatically","location":{"column":3,"line":264},"status":"passed","title":"should not fire change when setting checked programmatically"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should unmount","location":{"column":3,"line":294},"status":"passed","title":"should unmount"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should only fire change for checked radio button once","location":{"column":3,"line":300},"status":"passed","title":"should only fire change for checked radio button once"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should track radio button cousins in a group","location":{"column":3,"line":319},"status":"passed","title":"should track radio button cousins in a group"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should deduplicate input value change events","location":{"column":3,"line":360},"status":"passed","title":"should deduplicate input value change events"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should listen for both change and input events when supported","location":{"column":3,"line":423},"status":"passed","title":"should listen for both change and input events when supported"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin should only fire events when the value changes for range inputs","location":{"column":3,"line":445},"status":"passed","title":"should only fire events when the value changes for range inputs"},{"ancestorTitles":["ChangeEventPlugin"],"failureMessages":[],"fullName":"ChangeEventPlugin does not crash for nodes with custom value property","location":{"column":3,"line":468},"status":"passed","title":"does not crash for nodes with custom value property"},{"ancestorTitles":["ChangeEventPlugin","concurrent mode"],"failureMessages":[],"fullName":"ChangeEventPlugin concurrent mode [GATED, SHOULD FAIL] text input","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] text input"},{"ancestorTitles":["ChangeEventPlugin","concurrent mode"],"failureMessages":[],"fullName":"ChangeEventPlugin concurrent mode [GATED, SHOULD FAIL] checkbox input","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] checkbox input"},{"ancestorTitles":["ChangeEventPlugin","concurrent mode"],"failureMessages":[],"fullName":"ChangeEventPlugin concurrent mode [GATED, SHOULD FAIL] textarea","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] textarea"},{"ancestorTitles":["ChangeEventPlugin","concurrent mode"],"failureMessages":[],"fullName":"ChangeEventPlugin concurrent mode [GATED, SHOULD FAIL] parent of input","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] parent of input"},{"ancestorTitles":["ChangeEventPlugin","concurrent mode"],"failureMessages":[],"fullName":"ChangeEventPlugin concurrent mode [GATED, SHOULD FAIL] is async for non-input events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is async for non-input events"},{"ancestorTitles":["ChangeEventPlugin","concurrent mode"],"failureMessages":[],"fullName":"ChangeEventPlugin concurrent mode [GATED, SHOULD FAIL] mouse enter/leave should be user-blocking but not discrete","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] mouse enter/leave should be user-blocking but not discrete"}],"endTime":1639318924984,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/plugins/__tests__/ChangeEventPlugin-test.js","startTime":1639318923396,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EnterLeaveEventPlugin"],"failureMessages":[],"fullName":"EnterLeaveEventPlugin should set onMouseLeave relatedTarget properly in iframe","location":{"column":3,"line":34},"status":"passed","title":"should set onMouseLeave relatedTarget properly in iframe"},{"ancestorTitles":["EnterLeaveEventPlugin"],"failureMessages":[],"fullName":"EnterLeaveEventPlugin should set onMouseEnter relatedTarget properly in iframe","location":{"column":3,"line":67},"status":"passed","title":"should set onMouseEnter relatedTarget properly in iframe"},{"ancestorTitles":["EnterLeaveEventPlugin"],"failureMessages":[],"fullName":"EnterLeaveEventPlugin should find the common parent after updates","location":{"column":3,"line":101},"status":"passed","title":"should find the common parent after updates"},{"ancestorTitles":["EnterLeaveEventPlugin"],"failureMessages":[],"fullName":"EnterLeaveEventPlugin should call mouseEnter once from sibling rendered inside a rendered component","location":{"column":3,"line":139},"status":"passed","title":"should call mouseEnter once from sibling rendered inside a rendered component"},{"ancestorTitles":["EnterLeaveEventPlugin"],"failureMessages":[],"fullName":"EnterLeaveEventPlugin should call mouseEnter when pressing a non tracked React node","location":{"column":3,"line":189},"status":"passed","title":"should call mouseEnter when pressing a non tracked React node"},{"ancestorTitles":["EnterLeaveEventPlugin"],"failureMessages":[],"fullName":"EnterLeaveEventPlugin should work with portals outside of the root that has onMouseLeave","location":{"column":3,"line":240},"status":"passed","title":"should work with portals outside of the root that has onMouseLeave"},{"ancestorTitles":["EnterLeaveEventPlugin"],"failureMessages":[],"fullName":"EnterLeaveEventPlugin should work with portals that have onMouseEnter outside of the root ","location":{"column":3,"line":266},"status":"passed","title":"should work with portals that have onMouseEnter outside of the root "}],"endTime":1639318925721,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/plugins/__tests__/EnterLeaveEventPlugin-test.js","startTime":1639318925058,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["BeforeInputEventPlugin"],"failureMessages":[],"fullName":"BeforeInputEventPlugin should extract onBeforeInput when simulating in Webkit on input[type=text]","location":{"column":3,"line":819},"status":"passed","title":"should extract onBeforeInput when simulating in Webkit on input[type=text]"},{"ancestorTitles":["BeforeInputEventPlugin"],"failureMessages":[],"fullName":"BeforeInputEventPlugin should extract onBeforeInput when simulating in Webkit on contenteditable","location":{"column":3,"line":822},"status":"passed","title":"should extract onBeforeInput when simulating in Webkit on contenteditable"},{"ancestorTitles":["BeforeInputEventPlugin"],"failureMessages":[],"fullName":"BeforeInputEventPlugin should extract onBeforeInput when simulating in IE11 on input[type=text]","location":{"column":3,"line":826},"status":"passed","title":"should extract onBeforeInput when simulating in IE11 on input[type=text]"},{"ancestorTitles":["BeforeInputEventPlugin"],"failureMessages":[],"fullName":"BeforeInputEventPlugin should extract onBeforeInput when simulating in IE11 on contenteditable","location":{"column":3,"line":829},"status":"passed","title":"should extract onBeforeInput when simulating in IE11 on contenteditable"},{"ancestorTitles":["BeforeInputEventPlugin"],"failureMessages":[],"fullName":"BeforeInputEventPlugin should extract onBeforeInput when simulating in env with no CompositionEvent on input[type=text]","location":{"column":3,"line":833},"status":"passed","title":"should extract onBeforeInput when simulating in env with no CompositionEvent on input[type=text]"},{"ancestorTitles":["BeforeInputEventPlugin"],"failureMessages":[],"fullName":"BeforeInputEventPlugin should extract onBeforeInput when simulating in env with only CompositionEvent on input[type=text]","location":{"column":3,"line":841},"status":"passed","title":"should extract onBeforeInput when simulating in env with only CompositionEvent on input[type=text]"},{"ancestorTitles":["BeforeInputEventPlugin"],"failureMessages":[],"fullName":"BeforeInputEventPlugin should extract onBeforeInput when simulating in env with only CompositionEvent on contenteditable","location":{"column":3,"line":845},"status":"passed","title":"should extract onBeforeInput when simulating in env with only CompositionEvent on contenteditable"}],"endTime":1639318926619,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-dom/src/events/plugins/__tests__/BeforeInputEventPlugin-test.js","startTime":1639318925788,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFlight"],"failureMessages":[],"fullName":"ReactFlight can render a server component","location":{"column":3,"line":48},"status":"passed","title":"can render a server component"}],"endTime":1639318927143,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-client/src/__tests__/ReactFlight-test.js","startTime":1639318926681,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactHooksInspection"],"failureMessages":[],"fullName":"ReactHooksInspection should inspect a simple useState hook","location":{"column":3,"line":23},"status":"passed","title":"should inspect a simple useState hook"},{"ancestorTitles":["ReactHooksInspection"],"failureMessages":[],"fullName":"ReactHooksInspection should inspect a simple custom hook","location":{"column":3,"line":40},"status":"passed","title":"should inspect a simple custom hook"},{"ancestorTitles":["ReactHooksInspection"],"failureMessages":[],"fullName":"ReactHooksInspection should inspect a tree of multiple hooks","location":{"column":3,"line":70},"status":"passed","title":"should inspect a tree of multiple hooks"},{"ancestorTitles":["ReactHooksInspection"],"failureMessages":[],"fullName":"ReactHooksInspection should inspect a tree of multiple levels of hooks","location":{"column":3,"line":135},"status":"passed","title":"should inspect a tree of multiple levels of hooks"},{"ancestorTitles":["ReactHooksInspection"],"failureMessages":[],"fullName":"ReactHooksInspection should inspect the default value using the useContext hook","location":{"column":3,"line":240},"status":"passed","title":"should inspect the default value using the useContext hook"},{"ancestorTitles":["ReactHooksInspection"],"failureMessages":[],"fullName":"ReactHooksInspection should support an injected dispatcher","location":{"column":3,"line":258},"status":"passed","title":"should support an injected dispatcher"},{"ancestorTitles":["ReactHooksInspection","useDebugValue"],"failureMessages":[],"fullName":"ReactHooksInspection useDebugValue should be ignored when called outside of a custom hook","location":{"column":5,"line":297},"status":"passed","title":"should be ignored when called outside of a custom hook"},{"ancestorTitles":["ReactHooksInspection","useDebugValue"],"failureMessages":[],"fullName":"ReactHooksInspection useDebugValue should support an optional formatter function param","location":{"column":5,"line":306},"status":"passed","title":"should support an optional formatter function param"}],"endTime":1639318927586,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-debug-tools/src/__tests__/ReactHooksInspection-test.js","startTime":1639318927205,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should inspect the current state of useState hooks","location":{"column":3,"line":29},"status":"passed","title":"should inspect the current state of useState hooks"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should inspect the current state of all stateful hooks","location":{"column":3,"line":111},"status":"passed","title":"should inspect the current state of all stateful hooks"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should inspect the value of the current provider in useContext","location":{"column":3,"line":271},"status":"passed","title":"should inspect the value of the current provider in useContext"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should inspect forwardRef","location":{"column":3,"line":295},"status":"passed","title":"should inspect forwardRef"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should inspect memo","location":{"column":3,"line":317},"status":"passed","title":"should inspect memo"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should inspect custom hooks","location":{"column":3,"line":338},"status":"passed","title":"should inspect custom hooks"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration [GATED, SHOULD FAIL] should support composite useTransition hook","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should support composite useTransition hook"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration [GATED, SHOULD FAIL] should support composite useDeferredValue hook","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should support composite useDeferredValue hook"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration [GATED, SHOULD FAIL] should support composite useOpaqueIdentifier hook","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should support composite useOpaqueIdentifier hook"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration [GATED, SHOULD FAIL] should support composite useOpaqueIdentifier hook in concurrent mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should support composite useOpaqueIdentifier hook in concurrent mode"},{"ancestorTitles":["ReactHooksInspectionIntegration","useDebugValue"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration useDebugValue should support inspectable values for multiple custom hooks","location":{"column":5,"line":488},"status":"passed","title":"should support inspectable values for multiple custom hooks"},{"ancestorTitles":["ReactHooksInspectionIntegration","useDebugValue"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration useDebugValue should support inspectable values for nested custom hooks","location":{"column":5,"line":564},"status":"passed","title":"should support inspectable values for nested custom hooks"},{"ancestorTitles":["ReactHooksInspectionIntegration","useDebugValue"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration useDebugValue should support multiple inspectable values per custom hooks","location":{"column":5,"line":607},"status":"passed","title":"should support multiple inspectable values per custom hooks"},{"ancestorTitles":["ReactHooksInspectionIntegration","useDebugValue"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration useDebugValue should ignore useDebugValue() made outside of a custom hook","location":{"column":5,"line":676},"status":"passed","title":"should ignore useDebugValue() made outside of a custom hook"},{"ancestorTitles":["ReactHooksInspectionIntegration","useDebugValue"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration useDebugValue should support an optional formatter function param","location":{"column":5,"line":687},"status":"passed","title":"should support an optional formatter function param"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should support defaultProps and lazy","location":{"column":3,"line":719},"status":"passed","title":"should support defaultProps and lazy"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should support an injected dispatcher","location":{"column":3,"line":759},"status":"passed","title":"should support an injected dispatcher"},{"ancestorTitles":["ReactHooksInspectionIntegration"],"failureMessages":[],"fullName":"ReactHooksInspectionIntegration should properly advance the current hook for useContext","location":{"column":3,"line":801},"status":"passed","title":"should properly advance the current hook for useContext"}],"endTime":1639318929074,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js","startTime":1639318927659,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["React hooks DevTools integration"],"failureMessages":[],"fullName":"React hooks DevTools integration should support editing useState hooks","location":{"column":3,"line":45},"status":"passed","title":"should support editing useState hooks"},{"ancestorTitles":["React hooks DevTools integration"],"failureMessages":[],"fullName":"React hooks DevTools integration should support editable useReducer hooks","location":{"column":3,"line":83},"status":"passed","title":"should support editable useReducer hooks"},{"ancestorTitles":["React hooks DevTools integration"],"failureMessages":[],"fullName":"React hooks DevTools integration should handle interleaved stateful hooks (e.g. useState) and non-stateful hooks (e.g. useContext)","location":{"column":3,"line":137},"status":"passed","title":"should handle interleaved stateful hooks (e.g. useState) and non-stateful hooks (e.g. useContext)"},{"ancestorTitles":["React hooks DevTools integration"],"failureMessages":[],"fullName":"React hooks DevTools integration should support overriding suspense in legacy mode","location":{"column":3,"line":183},"status":"passed","title":"should support overriding suspense in legacy mode"},{"ancestorTitles":["React hooks DevTools integration"],"failureMessages":[],"fullName":"React hooks DevTools integration should support overriding suspense in concurrent mode","location":{"column":3,"line":236},"status":"passed","title":"should support overriding suspense in concurrent mode"}],"endTime":1639318929581,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-debug-tools/src/__tests__/ReactDevToolsHooksIntegration-test.js","startTime":1639318929135,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalErrorReplay"],"failureMessages":[],"fullName":"ReactIncrementalErrorReplay should fail gracefully on error in the host environment","location":{"column":3,"line":25},"status":"passed","title":"should fail gracefully on error in the host environment"},{"ancestorTitles":["ReactIncrementalErrorReplay"],"failureMessages":[],"fullName":"ReactIncrementalErrorReplay should ignore error if it doesn't throw on retry","location":{"column":3,"line":30},"status":"passed","title":"should ignore error if it doesn't throw on retry"}],"endTime":1639318929885,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalErrorReplay-test.js","startTime":1639318929642,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if an unsupported revealOrder option is used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if an unsupported revealOrder option is used"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if a upper case revealOrder option is used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if a upper case revealOrder option is used"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if a misspelled revealOrder option is used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if a misspelled revealOrder option is used"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if a single element is passed to a \"forwards\" list","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if a single element is passed to a \"forwards\" list"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if a single fragment is passed to a \"backwards\" list","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if a single fragment is passed to a \"backwards\" list"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if a nested array is passed to a \"forwards\" list","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if a nested array is passed to a \"forwards\" list"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] shows content independently by default","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows content independently by default"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] shows content independently in legacy mode regardless of option","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] shows content independently in legacy mode regardless of option"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays all \"together\"","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays all \"together\""},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays all \"together\" even when nested as siblings","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays all \"together\" even when nested as siblings"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays all \"together\" in nested SuspenseLists","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays all \"together\" in nested SuspenseLists"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays all \"together\" in nested SuspenseLists where the inner is default","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays all \"together\" in nested SuspenseLists where the inner is default"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays all \"together\" during an update","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays all \"together\" during an update"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] avoided boundaries can be coordinate with SuspenseList","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] avoided boundaries can be coordinate with SuspenseList"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays each items in \"forwards\" order","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays each items in \"forwards\" order"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays each items in \"backwards\" order","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays each items in \"backwards\" order"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays added row at the top \"together\" and the bottom in \"forwards\" order","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays added row at the top \"together\" and the bottom in \"forwards\" order"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] displays added row at the top \"together\" and the bottom in \"backwards\" order","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] displays added row at the top \"together\" and the bottom in \"backwards\" order"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] switches to rendering fallbacks if the tail takes long CPU time","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] switches to rendering fallbacks if the tail takes long CPU time"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] only shows one loading state at a time for \"collapsed\" tail insertions","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] only shows one loading state at a time for \"collapsed\" tail insertions"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if an unsupported tail option is used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if an unsupported tail option is used"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] warns if a tail option is used with \"together\"","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns if a tail option is used with \"together\""},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] renders one \"collapsed\" fallback even if CPU time elapsed","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] renders one \"collapsed\" fallback even if CPU time elapsed"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] adding to the middle does not collapse insertions (forwards)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] adding to the middle does not collapse insertions (forwards)"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] adding to the middle does not collapse insertions (backwards)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] adding to the middle does not collapse insertions (backwards)"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] adding to the middle of committed tail does not collapse insertions","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] adding to the middle of committed tail does not collapse insertions"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] only shows no initial loading state \"hidden\" tail insertions","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] only shows no initial loading state \"hidden\" tail insertions"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] eventually resolves a nested forwards suspense list","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] eventually resolves a nested forwards suspense list"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] eventually resolves a nested forwards suspense list with a hidden tail","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] eventually resolves a nested forwards suspense list with a hidden tail"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] eventually resolves two nested forwards suspense lists with a hidden tail","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] eventually resolves two nested forwards suspense lists with a hidden tail"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] can do unrelated adjacent updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can do unrelated adjacent updates"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] is able to re-suspend the last rows during an update with hidden","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is able to re-suspend the last rows during an update with hidden"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] is able to re-suspend the last rows during an update with hidden","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is able to re-suspend the last rows during an update with hidden"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] is able to interrupt a partially rendered tree and continue later","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is able to interrupt a partially rendered tree and continue later"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] can resume class components when revealed together","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can resume class components when revealed together"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] should be able to progressively show CPU expensive rows with two pass rendering","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should be able to progressively show CPU expensive rows with two pass rendering"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] should be able to progressively show rows with two pass rendering and visible","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should be able to progressively show rows with two pass rendering and visible"},{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList [GATED, SHOULD FAIL] counts the actual duration when profiling a SuspenseList","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] counts the actual duration when profiling a SuspenseList"}],"endTime":1639318932623,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactSuspenseList-test.js","startTime":1639318929969,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactScope","ReactDOM"],"failureMessages":[],"fullName":"ReactScope ReactDOM [GATED, SHOULD FAIL] DO_NOT_USE_queryAllNodes() works as intended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] DO_NOT_USE_queryAllNodes() works as intended"},{"ancestorTitles":["ReactScope","ReactDOM"],"failureMessages":[],"fullName":"ReactScope ReactDOM [GATED, SHOULD FAIL] DO_NOT_USE_queryAllNodes() provides the correct host instance","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] DO_NOT_USE_queryAllNodes() provides the correct host instance"},{"ancestorTitles":["ReactScope","ReactDOM"],"failureMessages":[],"fullName":"ReactScope ReactDOM [GATED, SHOULD FAIL] DO_NOT_USE_queryFirstNode() works as intended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] DO_NOT_USE_queryFirstNode() works as intended"},{"ancestorTitles":["ReactScope","ReactDOM"],"failureMessages":[],"fullName":"ReactScope ReactDOM [GATED, SHOULD FAIL] containsNode() works as intended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] containsNode() works as intended"},{"ancestorTitles":["ReactScope","ReactDOM"],"failureMessages":[],"fullName":"ReactScope ReactDOM [GATED, SHOULD FAIL] scopes support server-side rendering and hydration","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] scopes support server-side rendering and hydration"},{"ancestorTitles":["ReactScope","ReactDOM"],"failureMessages":[],"fullName":"ReactScope ReactDOM [GATED, SHOULD FAIL] getChildContextValues() works as intended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] getChildContextValues() works as intended"},{"ancestorTitles":["ReactScope","ReactDOM"],"failureMessages":[],"fullName":"ReactScope ReactDOM [GATED, SHOULD FAIL] correctly works with suspended boundaries that are hydrated","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] correctly works with suspended boundaries that are hydrated"},{"ancestorTitles":["ReactScope","ReactTestRenderer"],"failureMessages":[],"fullName":"ReactScope ReactTestRenderer [GATED, SHOULD FAIL] DO_NOT_USE_queryAllNodes() works as intended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] DO_NOT_USE_queryAllNodes() works as intended"},{"ancestorTitles":["ReactScope","ReactTestRenderer"],"failureMessages":[],"fullName":"ReactScope ReactTestRenderer [GATED, SHOULD FAIL] DO_NOT_USE_queryFirstNode() works as intended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] DO_NOT_USE_queryFirstNode() works as intended"},{"ancestorTitles":["ReactScope","ReactTestRenderer"],"failureMessages":[],"fullName":"ReactScope ReactTestRenderer [GATED, SHOULD FAIL] containsNode() works as intended","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] containsNode() works as intended"}],"endTime":1639318933586,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactScope-test.internal.js","startTime":1639318932689,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration increases priority of updates as time progresses","location":{"column":3,"line":104},"status":"passed","title":"increases priority of updates as time progresses"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration two updates of like priority in the same event always flush within the same batch","location":{"column":3,"line":124},"status":"passed","title":"two updates of like priority in the same event always flush within the same batch"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration two updates of like priority in the same event always flush within the same batch, even if there's a sync update in between","location":{"column":3,"line":176},"status":"passed","title":"two updates of like priority in the same event always flush within the same batch, even if there's a sync update in between"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration cannot update at the same expiration time that is already rendering","location":{"column":3,"line":237},"status":"passed","title":"cannot update at the same expiration time that is already rendering"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration stops yielding if CPU-bound update takes too long to finish","location":{"column":3,"line":302},"status":"passed","title":"stops yielding if CPU-bound update takes too long to finish"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration root expiration is measured from the time of the first update","location":{"column":3,"line":328},"status":"passed","title":"root expiration is measured from the time of the first update"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration should measure expiration times relative to module initialization","location":{"column":3,"line":356},"status":"passed","title":"should measure expiration times relative to module initialization"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration should measure callback timeout relative to current time, not start-up time","location":{"column":3,"line":383},"status":"passed","title":"should measure callback timeout relative to current time, not start-up time"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration prevents starvation by high priority updates","location":{"column":3,"line":404},"status":"passed","title":"prevents starvation by high priority updates"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration prevents starvation by sync updates","location":{"column":3,"line":474},"status":"passed","title":"prevents starvation by sync updates"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration idle work never expires","location":{"column":3,"line":544},"status":"passed","title":"idle work never expires"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration a single update can expire without forcing all other updates to expire","location":{"column":3,"line":613},"status":"passed","title":"a single update can expire without forcing all other updates to expire"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration detects starvation in multiple batches","location":{"column":3,"line":681},"status":"passed","title":"detects starvation in multiple batches"},{"ancestorTitles":["ReactExpiration"],"failureMessages":[],"fullName":"ReactExpiration updates do not expire while they are IO-bound","location":{"column":3,"line":749},"status":"passed","title":"updates do not expire while they are IO-bound"}],"endTime":1639318934558,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactExpiration-test.js","startTime":1639318933647,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFiberHostContext"],"failureMessages":[],"fullName":"ReactFiberHostContext works with null host context","location":{"column":3,"line":25},"status":"passed","title":"works with null host context"},{"ancestorTitles":["ReactFiberHostContext"],"failureMessages":[],"fullName":"ReactFiberHostContext should send the context to prepareForCommit and resetAfterCommit","location":{"column":3,"line":77},"status":"passed","title":"should send the context to prepareForCommit and resetAfterCommit"}],"endTime":1639318934847,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactFiberHostContext-test.internal.js","startTime":1639318934618,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactPersistent"],"failureMessages":[],"fullName":"ReactPersistent can update child nodes of a host instance","location":{"column":3,"line":56},"status":"passed","title":"can update child nodes of a host instance"},{"ancestorTitles":["ReactPersistent"],"failureMessages":[],"fullName":"ReactPersistent can reuse child nodes between updates","location":{"column":3,"line":83},"status":"passed","title":"can reuse child nodes between updates"},{"ancestorTitles":["ReactPersistent"],"failureMessages":[],"fullName":"ReactPersistent can update child text nodes","location":{"column":3,"line":120},"status":"passed","title":"can update child text nodes"},{"ancestorTitles":["ReactPersistent"],"failureMessages":[],"fullName":"ReactPersistent supports portals","location":{"column":3,"line":143},"status":"passed","title":"supports portals"}],"endTime":1639318935327,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactPersistent-test.js","startTime":1639318934920,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should subscribe to a source and schedule updates when it changes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should subscribe to a source and schedule updates when it changes"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should restart work if a new source is mutated during render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should restart work if a new source is mutated during render"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should schedule an update if a new source is mutated between render and commit (subscription)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should schedule an update if a new source is mutated between render and commit (subscription)"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should unsubscribe and resubscribe if a new source is used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should unsubscribe and resubscribe if a new source is used"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should unsubscribe and resubscribe if a new subscribe function is provided","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should unsubscribe and resubscribe if a new subscribe function is provided"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should re-use previously read snapshot value when reading is unsafe","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should re-use previously read snapshot value when reading is unsafe"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should read from source on newly mounted subtree if no pending updates are scheduled for source","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should read from source on newly mounted subtree if no pending updates are scheduled for source"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should throw and restart render if source and snapshot are unavailable during an update","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should throw and restart render if source and snapshot are unavailable during an update"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should throw and restart render if source and snapshot are unavailable during a sync update","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should throw and restart render if source and snapshot are unavailable during a sync update"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should only update components whose subscriptions fire","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should only update components whose subscriptions fire"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should detect tearing in part of the store not yet subscribed to","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should detect tearing in part of the store not yet subscribed to"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] does not schedule an update for subscriptions that fire with an unchanged snapshot","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not schedule an update for subscriptions that fire with an unchanged snapshot"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should throw and restart if getSnapshot changes between scheduled update and re-render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should throw and restart if getSnapshot changes between scheduled update and re-render"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should recover from a mutation during yield when other work is scheduled","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should recover from a mutation during yield when other work is scheduled"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should not throw if the new getSnapshot returns the same snapshot value","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not throw if the new getSnapshot returns the same snapshot value"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should not throw if getSnapshot changes but the source can be safely read from anyway","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not throw if getSnapshot changes but the source can be safely read from anyway"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should still schedule an update if an eager selector throws after a mutation","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should still schedule an update if an eager selector throws after a mutation"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should not warn about updates that fire between unmount and passive unsubscribe","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not warn about updates that fire between unmount and passive unsubscribe"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should support inline selectors and updates that are processed after selector change","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should support inline selectors and updates that are processed after selector change"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should clear the update queue when getSnapshot changes with pending lower priority updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should clear the update queue when getSnapshot changes with pending lower priority updates"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should clear the update queue when source changes with pending lower priority updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should clear the update queue when source changes with pending lower priority updates"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should always treat reading as potentially unsafe when getSnapshot changes between renders","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should always treat reading as potentially unsafe when getSnapshot changes between renders"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] getSnapshot changes and then source is mutated in between paint and passive effect phase","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] getSnapshot changes and then source is mutated in between paint and passive effect phase"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] getSnapshot changes and then source is mutated in between paint and passive effect phase, case 2","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] getSnapshot changes and then source is mutated in between paint and passive effect phase, case 2"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] if source is mutated after initial read but before subscription is set up, should still entangle all pending mutations even if snapshot of new subscription happens to match","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] if source is mutated after initial read but before subscription is set up, should still entangle all pending mutations even if snapshot of new subscription happens to match"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] warns about functions being used as snapshot values","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] warns about functions being used as snapshot values"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] getSnapshot changes and then source is mutated during interleaved event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] getSnapshot changes and then source is mutated during interleaved event"},{"ancestorTitles":["useMutableSource"],"failureMessages":[],"fullName":"useMutableSource [GATED, SHOULD FAIL] should not tear with newly mounted component when updates were scheduled at a lower priority","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not tear with newly mounted component when updates were scheduled at a lower priority"},{"ancestorTitles":["useMutableSource","dev warnings"],"failureMessages":[],"fullName":"useMutableSource dev warnings [GATED, SHOULD FAIL] should warn if the subscribe function does not return an unsubscribe function","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should warn if the subscribe function does not return an unsubscribe function"},{"ancestorTitles":["useMutableSource","dev warnings"],"failureMessages":[],"fullName":"useMutableSource dev warnings [GATED, SHOULD FAIL] should error if multiple renderers of the same type use a mutable source at the same time","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should error if multiple renderers of the same type use a mutable source at the same time"},{"ancestorTitles":["useMutableSource","dev warnings"],"failureMessages":[],"fullName":"useMutableSource dev warnings [GATED, SHOULD FAIL] should error if multiple renderers of the same type use a mutable source at the same time with mutation between","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should error if multiple renderers of the same type use a mutable source at the same time with mutation between"}],"endTime":1639318936697,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/useMutableSource-test.internal.js","startTime":1639318935387,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactNoop.act()"],"failureMessages":[],"fullName":"ReactNoop.act() can use act to flush effects","location":{"column":3,"line":17},"status":"passed","title":"can use act to flush effects"},{"ancestorTitles":["ReactNoop.act()"],"failureMessages":[],"fullName":"ReactNoop.act() should work with async/await","location":{"column":3,"line":37},"status":"passed","title":"should work with async/await"}],"endTime":1639318936963,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactNoopRendererAct-test.js","startTime":1639318936757,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalUpdatesMinimalism"],"failureMessages":[],"fullName":"ReactIncrementalUpdatesMinimalism should render a simple component","location":{"column":3,"line":23},"status":"passed","title":"should render a simple component"},{"ancestorTitles":["ReactIncrementalUpdatesMinimalism"],"failureMessages":[],"fullName":"ReactIncrementalUpdatesMinimalism should not diff referentially equal host elements","location":{"column":3,"line":45},"status":"passed","title":"should not diff referentially equal host elements"},{"ancestorTitles":["ReactIncrementalUpdatesMinimalism"],"failureMessages":[],"fullName":"ReactIncrementalUpdatesMinimalism should not diff parents of setState targets","location":{"column":3,"line":83},"status":"passed","title":"should not diff parents of setState targets"}],"endTime":1639318937327,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalUpdatesMinimalism-test.js","startTime":1639318937023,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer resumes after an interruption","location":{"column":3,"line":151},"status":"passed","title":"resumes after an interruption"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer throws inside class components","location":{"column":3,"line":186},"status":"passed","title":"throws inside class components"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer throws inside module-style components","location":{"column":5,"line":214},"status":"passed","title":"throws inside module-style components"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer throws when called outside the render phase","location":{"column":3,"line":251},"status":"passed","title":"throws when called outside the render phase"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useState"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useState simple mount and update","location":{"column":5,"line":263},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useState"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useState lazy state initializer","location":{"column":5,"line":284},"status":"passed","title":"lazy state initializer"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useState"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useState multiple states","location":{"column":5,"line":304},"status":"passed","title":"multiple states"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useState"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useState returns the same updater function every time","location":{"column":5,"line":324},"status":"passed","title":"returns the same updater function every time"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useState"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useState warns on set after unmount","location":{"column":5,"line":350},"status":"passed","title":"warns on set after unmount"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useState"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useState dedupes the warning by component name","location":{"column":5,"line":371},"status":"passed","title":"dedupes the warning by component name"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useState"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useState works with memo","location":{"column":5,"line":407},"status":"passed","title":"works with memo"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase restarts the render function and applies the new updates on top","location":{"column":5,"line":431},"status":"passed","title":"restarts the render function and applies the new updates on top"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase warns about render phase update on a different component","location":{"column":5,"line":470},"status":"passed","title":"warns about render phase update on a different component"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase keeps restarting until there are no more new updates","location":{"column":5,"line":533},"status":"passed","title":"keeps restarting until there are no more new updates"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase updates multiple times within same render function","location":{"column":5,"line":554},"status":"passed","title":"updates multiple times within same render function"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase throws after too many iterations","location":{"column":5,"line":579},"status":"passed","title":"throws after too many iterations"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase works with useReducer","location":{"column":5,"line":593},"status":"passed","title":"works with useReducer"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase uses reducer passed at time of render, not time of dispatch","location":{"column":5,"line":617},"status":"passed","title":"uses reducer passed at time of render, not time of dispatch"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase discards render phase updates if something suspends","location":{"column":5,"line":685},"status":"passed","title":"discards render phase updates if something suspends"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase discards render phase updates if something suspends, but not other updates in the same component","location":{"column":5,"line":729},"status":"passed","title":"discards render phase updates if something suspends, but not other updates in the same component"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase regression: render phase updates cause lower pri work to be dropped","location":{"column":5,"line":789},"status":"passed","title":"regression: render phase updates cause lower pri work to be dropped"},{"ancestorTitles":["ReactHooksWithNoopRenderer","updates during the render phase"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer updates during the render phase [GATED, SHOULD FAIL] calling startTransition inside render phase","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] calling startTransition inside render phase"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useReducer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useReducer simple mount and update","location":{"column":5,"line":850},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useReducer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useReducer lazy init","location":{"column":5,"line":889},"status":"passed","title":"lazy init"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useReducer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useReducer handles dispatches with mixed priorities","location":{"column":5,"line":933},"status":"passed","title":"handles dispatches with mixed priorities"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect simple mount and update","location":{"column":5,"line":971},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect flushes passive effects even with sibling deletions","location":{"column":5,"line":999},"status":"passed","title":"flushes passive effects even with sibling deletions"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect flushes passive effects even if siblings schedule an update","location":{"column":5,"line":1034},"status":"passed","title":"flushes passive effects even if siblings schedule an update"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect flushes passive effects even if siblings schedule a new root","location":{"column":5,"line":1072},"status":"passed","title":"flushes passive effects even if siblings schedule a new root"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect flushes effects serially by flushing old effects before flushing new ones, if they haven't already fired","location":{"column":5,"line":1103},"status":"passed","title":"flushes effects serially by flushing old effects before flushing new ones, if they haven't already fired"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect defers passive effect destroy functions during unmount","location":{"column":5,"line":1148},"status":"passed","title":"defers passive effect destroy functions during unmount"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect does not warn about state updates for unmounted components with pending passive unmounts","location":{"column":5,"line":1232},"status":"passed","title":"does not warn about state updates for unmounted components with pending passive unmounts"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect does not warn about state updates for unmounted components with pending passive unmounts for alternates","location":{"column":5,"line":1279},"status":"passed","title":"does not warn about state updates for unmounted components with pending passive unmounts for alternates"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect warns about state updates for unmounted components with no pending passive unmounts","location":{"column":5,"line":1367},"status":"passed","title":"warns about state updates for unmounted components with no pending passive unmounts"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect still warns if there are pending passive unmount effects but not for the current fiber","location":{"column":5,"line":1404},"status":"passed","title":"still warns if there are pending passive unmount effects but not for the current fiber"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect warns if there are updates after pending passive unmount effects have been flushed","location":{"column":5,"line":1464},"status":"passed","title":"warns if there are updates after pending passive unmount effects have been flushed"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect does not show a warning when a component updates its own state from within passive unmount function","location":{"column":5,"line":1506},"status":"passed","title":"does not show a warning when a component updates its own state from within passive unmount function"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect does not show a warning when a component updates a childs state from within passive unmount function","location":{"column":5,"line":1536},"status":"passed","title":"does not show a warning when a component updates a childs state from within passive unmount function"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect does not show a warning when a component updates a parents state from within passive unmount function","location":{"column":5,"line":1575},"status":"passed","title":"does not show a warning when a component updates a parents state from within passive unmount function"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect updates have async priority","location":{"column":5,"line":1608},"status":"passed","title":"updates have async priority"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect updates have async priority even if effects are flushed early","location":{"column":5,"line":1643},"status":"passed","title":"updates have async priority even if effects are flushed early"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect does not flush non-discrete passive effects when flushing sync","location":{"column":5,"line":1681},"status":"passed","title":"does not flush non-discrete passive effects when flushing sync"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect does not flush non-discrete passive effects when flushing sync (with tracing)","location":{"column":7,"line":283},"status":"passed","title":"does not flush non-discrete passive effects when flushing sync (with tracing)"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect in legacy mode, useEffect is deferred and updates finish synchronously (in a single batch)","location":{"column":5,"line":1788},"status":"passed","title":"in legacy mode, useEffect is deferred and updates finish synchronously (in a single batch)"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect flushSync is not allowed","location":{"column":5,"line":1821},"status":"passed","title":"flushSync is not allowed"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect unmounts previous effect","location":{"column":5,"line":1851},"status":"passed","title":"unmounts previous effect"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect unmounts on deletion","location":{"column":5,"line":1882},"status":"passed","title":"unmounts on deletion"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect unmounts on deletion after skipped effect","location":{"column":5,"line":1907},"status":"passed","title":"unmounts on deletion after skipped effect"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect always fires effects if no dependencies are provided","location":{"column":5,"line":1942},"status":"passed","title":"always fires effects if no dependencies are provided"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect skips effect if inputs have not changed","location":{"column":5,"line":1978},"status":"passed","title":"skips effect if inputs have not changed"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect multiple effects","location":{"column":5,"line":2039},"status":"passed","title":"multiple effects"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect unmounts all previous effects before creating any new ones","location":{"column":5,"line":2069},"status":"passed","title":"unmounts all previous effects before creating any new ones"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect unmounts all previous effects between siblings before creating any new ones","location":{"column":5,"line":2110},"status":"passed","title":"unmounts all previous effects between siblings before creating any new ones"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect handles errors in create on mount","location":{"column":5,"line":2171},"status":"passed","title":"handles errors in create on mount"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect handles errors in create on update","location":{"column":5,"line":2209},"status":"passed","title":"handles errors in create on update"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect handles errors in destroy on update","location":{"column":5,"line":2262},"status":"passed","title":"handles errors in destroy on update"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect works with memo","location":{"column":5,"line":2320},"status":"passed","title":"works with memo"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees should call componentDidCatch() for the nearest unmounted log-only boundary","location":{"column":7,"line":283},"status":"passed","title":"should call componentDidCatch() for the nearest unmounted log-only boundary"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees should call componentDidCatch() for the nearest unmounted logging-capable boundary","location":{"column":7,"line":283},"status":"passed","title":"should call componentDidCatch() for the nearest unmounted logging-capable boundary"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees should not call getDerivedStateFromError for unmounted error boundaries","location":{"column":7,"line":283},"status":"passed","title":"should not call getDerivedStateFromError for unmounted error boundaries"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees should not throw if there are no unmounted logging-capable boundaries to call","location":{"column":7,"line":283},"status":"passed","title":"should not throw if there are no unmounted logging-capable boundaries to call"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees [GATED, SHOULD FAIL] should use the nearest still-mounted boundary if there are no unmounted boundaries","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should use the nearest still-mounted boundary if there are no unmounted boundaries"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees [GATED, SHOULD FAIL] should skip unmounted boundaries and use the nearest still-mounted boundary","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should skip unmounted boundaries and use the nearest still-mounted boundary"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees [GATED, SHOULD FAIL] should call getDerivedStateFromError in the nearest still-mounted boundary","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should call getDerivedStateFromError in the nearest still-mounted boundary"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect","errors thrown in passive destroy function within unmounted trees"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect errors thrown in passive destroy function within unmounted trees [GATED, SHOULD FAIL] should rethrow error if there are no still-mounted boundaries","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should rethrow error if there are no still-mounted boundaries"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect calls passive effect destroy functions for memoized components","location":{"column":5,"line":2738},"status":"passed","title":"calls passive effect destroy functions for memoized components"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useEffect calls passive effect destroy functions for descendants of memoized components","location":{"column":5,"line":2805},"status":"passed","title":"calls passive effect destroy functions for descendants of memoized components"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useLayoutEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useLayoutEffect fires layout effects after the host has been mutated","location":{"column":5,"line":2878},"status":"passed","title":"fires layout effects after the host has been mutated"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useLayoutEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useLayoutEffect force flushes passive effects before firing new layout effects","location":{"column":5,"line":2917},"status":"passed","title":"force flushes passive effects before firing new layout effects"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useLayoutEffect"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useLayoutEffect [GATED, SHOULD FAIL] catches errors thrown in useLayoutEffect","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] catches errors thrown in useLayoutEffect"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useCallback"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useCallback memoizes callback by comparing inputs","location":{"column":5,"line":3056},"status":"passed","title":"memoizes callback by comparing inputs"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useMemo"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useMemo memoizes value by comparing to previous inputs","location":{"column":5,"line":3121},"status":"passed","title":"memoizes value by comparing to previous inputs"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useMemo"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useMemo always re-computes if no inputs are provided","location":{"column":5,"line":3148},"status":"passed","title":"always re-computes if no inputs are provided"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useMemo"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useMemo should not invoke memoized function during re-renders unless inputs change","location":{"column":5,"line":3177},"status":"passed","title":"should not invoke memoized function during re-renders unless inputs change"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useRef"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useRef creates a ref object initialized with the provided value","location":{"column":5,"line":3206},"status":"passed","title":"creates a ref object initialized with the provided value"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useRef"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useRef should return the same ref during re-renders","location":{"column":5,"line":3265},"status":"passed","title":"should return the same ref during re-renders"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useImperativeHandle"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useImperativeHandle does not update when deps are the same","location":{"column":5,"line":3291},"status":"passed","title":"does not update when deps are the same"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useImperativeHandle"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useImperativeHandle automatically updates when deps are not specified","location":{"column":5,"line":3321},"status":"passed","title":"automatically updates when deps are not specified"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useImperativeHandle"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useImperativeHandle updates when deps are different","location":{"column":5,"line":3349},"status":"passed","title":"updates when deps are different"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useTransition"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useTransition [GATED, SHOULD FAIL] delays showing loading state until after timeout","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] delays showing loading state until after timeout"},{"ancestorTitles":["ReactHooksWithNoopRenderer","useDeferredValue"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer useDeferredValue [GATED, SHOULD FAIL] defers text value","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] defers text value"},{"ancestorTitles":["ReactHooksWithNoopRenderer","progressive enhancement (not supported)"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer progressive enhancement (not supported) mount additional state","location":{"column":5,"line":3532},"status":"passed","title":"mount additional state"},{"ancestorTitles":["ReactHooksWithNoopRenderer","progressive enhancement (not supported)"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer progressive enhancement (not supported) unmount state","location":{"column":5,"line":3594},"status":"passed","title":"unmount state"},{"ancestorTitles":["ReactHooksWithNoopRenderer","progressive enhancement (not supported)"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer progressive enhancement (not supported) unmount effects","location":{"column":5,"line":3634},"status":"passed","title":"unmount effects"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer eager bailout optimization should always compare to latest rendered reducer","location":{"column":3,"line":3694},"status":"passed","title":"eager bailout optimization should always compare to latest rendered reducer"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer state bail out edge case (#16359)","location":{"column":3,"line":3746},"status":"passed","title":"state bail out edge case (#16359)"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer should update latest rendered reducer when a preceding state receives a render phase update","location":{"column":3,"line":3804},"status":"passed","title":"should update latest rendered reducer when a preceding state receives a render phase update"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer should process the rest pending updates after a render phase update","location":{"column":3,"line":3837},"status":"passed","title":"should process the rest pending updates after a render phase update"},{"ancestorTitles":["ReactHooksWithNoopRenderer"],"failureMessages":[],"fullName":"ReactHooksWithNoopRenderer regression test: don't unmount effects on siblings of deleted nodes","location":{"column":3,"line":3868},"status":"passed","title":"regression test: don't unmount effects on siblings of deleted nodes"}],"endTime":1639318942579,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactHooksWithNoopRenderer-test.js","startTime":1639318937388,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should render a single child via noop renderer","location":{"column":3,"line":40},"status":"passed","title":"should render a single child via noop renderer"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should render zero children via noop renderer","location":{"column":3,"line":53},"status":"passed","title":"should render zero children via noop renderer"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should render multiple children via noop renderer","location":{"column":3,"line":62},"status":"passed","title":"should render multiple children via noop renderer"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should render an iterable via noop renderer","location":{"column":3,"line":75},"status":"passed","title":"should render an iterable via noop renderer"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state of children with 1 level nesting","location":{"column":3,"line":86},"status":"passed","title":"should preserve state of children with 1 level nesting"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state between top-level fragments","location":{"column":3,"line":126},"status":"passed","title":"should preserve state between top-level fragments"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state of children nested at same level","location":{"column":3,"line":167},"status":"passed","title":"should preserve state of children nested at same level"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state in non-top-level fragment nesting","location":{"column":3,"line":217},"status":"passed","title":"should not preserve state in non-top-level fragment nesting"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state of children if nested 2 levels without siblings","location":{"column":3,"line":260},"status":"passed","title":"should not preserve state of children if nested 2 levels without siblings"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state of children if nested 2 levels with siblings","location":{"column":3,"line":301},"status":"passed","title":"should not preserve state of children if nested 2 levels with siblings"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state between array nested in fragment and fragment","location":{"column":3,"line":343},"status":"passed","title":"should preserve state between array nested in fragment and fragment"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state between top level fragment and array","location":{"column":3,"line":382},"status":"passed","title":"should preserve state between top level fragment and array"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state between array nested in fragment and double nested fragment","location":{"column":3,"line":421},"status":"passed","title":"should not preserve state between array nested in fragment and double nested fragment"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state between array nested in fragment and double nested array","location":{"column":3,"line":462},"status":"passed","title":"should not preserve state between array nested in fragment and double nested array"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state between double nested fragment and double nested array","location":{"column":3,"line":499},"status":"passed","title":"should preserve state between double nested fragment and double nested array"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state of children when the keys are different","location":{"column":3,"line":540},"status":"passed","title":"should not preserve state of children when the keys are different"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state between unkeyed and keyed fragment","location":{"column":3,"line":582},"status":"passed","title":"should not preserve state between unkeyed and keyed fragment"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state with reordering in multiple levels","location":{"column":3,"line":623},"status":"passed","title":"should preserve state with reordering in multiple levels"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state when switching to a keyed fragment to an array","location":{"column":3,"line":676},"status":"passed","title":"should not preserve state when switching to a keyed fragment to an array"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state when switching a nested unkeyed fragment to a passthrough component","location":{"column":3,"line":725},"status":"passed","title":"should not preserve state when switching a nested unkeyed fragment to a passthrough component"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state when switching a nested keyed fragment to a passthrough component","location":{"column":3,"line":774},"status":"passed","title":"should not preserve state when switching a nested keyed fragment to a passthrough component"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should not preserve state when switching a nested keyed array to a passthrough component","location":{"column":3,"line":823},"status":"passed","title":"should not preserve state when switching a nested keyed array to a passthrough component"},{"ancestorTitles":["ReactFragment"],"failureMessages":[],"fullName":"ReactFragment should preserve state when it does not change positions","location":{"column":3,"line":868},"status":"passed","title":"should preserve state when it does not change positions"}],"endTime":1639318943977,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactFragment-test.js","startTime":1639318942640,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should render a simple component","location":{"column":3,"line":40},"status":"passed","title":"should render a simple component"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should render a simple component, in steps if needed","location":{"column":3,"line":53},"status":"passed","title":"should render a simple component, in steps if needed"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental updates a previous render","location":{"column":3,"line":76},"status":"passed","title":"updates a previous render"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can cancel partially rendered work and restart","location":{"column":3,"line":135},"status":"passed","title":"can cancel partially rendered work and restart"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should call callbacks even if updates are aborted","location":{"column":3,"line":170},"status":"passed","title":"should call callbacks even if updates are aborted"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental [GATED, SHOULD FAIL] can deprioritize unfinished work and resume it later","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can deprioritize unfinished work and resume it later"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental [GATED, SHOULD FAIL] can deprioritize a tree from without dropping work","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can deprioritize a tree from without dropping work"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can resume work in a subtree even when a parent bails out","location":{"column":3,"line":318},"status":"pending","title":"can resume work in a subtree even when a parent bails out"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can resume work in a bailed subtree within one pass","location":{"column":3,"line":374},"status":"pending","title":"can resume work in a bailed subtree within one pass"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can resume mounting a class component","location":{"column":3,"line":460},"status":"pending","title":"can resume mounting a class component"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental reuses the same instance when resuming a class instance","location":{"column":3,"line":498},"status":"pending","title":"reuses the same instance when resuming a class instance"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can reuse work done after being preempted","location":{"column":3,"line":569},"status":"pending","title":"can reuse work done after being preempted"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can reuse work that began but did not complete, after being preempted","location":{"column":3,"line":647},"status":"pending","title":"can reuse work that began but did not complete, after being preempted"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can reuse work if shouldComponentUpdate is false, after being preempted","location":{"column":3,"line":721},"status":"pending","title":"can reuse work if shouldComponentUpdate is false, after being preempted"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental memoizes work even if shouldComponentUpdate returns false","location":{"column":3,"line":800},"status":"passed","title":"memoizes work even if shouldComponentUpdate returns false"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can update in the middle of a tree using setState","location":{"column":3,"line":830},"status":"passed","title":"can update in the middle of a tree using setState"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can queue multiple state updates","location":{"column":3,"line":859},"status":"passed","title":"can queue multiple state updates"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can use updater form of setState","location":{"column":3,"line":890},"status":"passed","title":"can use updater form of setState"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can call setState inside update callback","location":{"column":3,"line":928},"status":"passed","title":"can call setState inside update callback"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can replaceState","location":{"column":3,"line":966},"status":"passed","title":"can replaceState"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can forceUpdate","location":{"column":3,"line":993},"status":"passed","title":"can forceUpdate"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should clear forceUpdate after update is flushed","location":{"column":3,"line":1029},"status":"passed","title":"should clear forceUpdate after update is flushed"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can call sCU while resuming a partly mounted component","location":{"column":3,"line":1052},"status":"pending","title":"can call sCU while resuming a partly mounted component"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental gets new props when setting state on a partly updated component","location":{"column":3,"line":1097},"status":"pending","title":"gets new props when setting state on a partly updated component"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental calls componentWillMount twice if the initial render is aborted","location":{"column":3,"line":1161},"status":"pending","title":"calls componentWillMount twice if the initial render is aborted"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental uses state set in componentWillMount even if initial render was aborted","location":{"column":3,"line":1215},"status":"pending","title":"uses state set in componentWillMount even if initial render was aborted"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental calls componentWill* twice if an update render is aborted","location":{"column":3,"line":1257},"status":"pending","title":"calls componentWill* twice if an update render is aborted"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental calls getDerivedStateFromProps even for state-only updates","location":{"column":3,"line":1340},"status":"passed","title":"calls getDerivedStateFromProps even for state-only updates"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does not call getDerivedStateFromProps if neither state nor props have changed","location":{"column":3,"line":1375},"status":"passed","title":"does not call getDerivedStateFromProps if neither state nor props have changed"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does not call componentWillReceiveProps for state-only updates","location":{"column":3,"line":1408},"status":"pending","title":"does not call componentWillReceiveProps for state-only updates"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental skips will/DidUpdate when bailing unless an update was already in progress","location":{"column":3,"line":1547},"status":"pending","title":"skips will/DidUpdate when bailing unless an update was already in progress"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can nest batchedUpdates","location":{"column":3,"line":1631},"status":"passed","title":"can nest batchedUpdates"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental can handle if setState callback throws","location":{"column":3,"line":1679},"status":"passed","title":"can handle if setState callback throws"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental merges and masks context","location":{"column":3,"line":1717},"status":"passed","title":"merges and masks context"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does not leak own context into context provider","location":{"column":3,"line":1885},"status":"passed","title":"does not leak own context into context provider"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does not leak own context into context provider (factory components)","location":{"column":5,"line":1924},"status":"passed","title":"does not leak own context into context provider (factory components)"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental [GATED, SHOULD FAIL] provides context when reusing work","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] provides context when reusing work"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental reads context when setState is below the provider","location":{"column":3,"line":2029},"status":"passed","title":"reads context when setState is below the provider"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental reads context when setState is above the provider","location":{"column":3,"line":2132},"status":"passed","title":"reads context when setState is above the provider"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental maintains the correct context when providers bail out due to low priority","location":{"column":3,"line":2243},"status":"passed","title":"maintains the correct context when providers bail out due to low priority"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental maintains the correct context when unwinding due to an error in render","location":{"column":3,"line":2291},"status":"passed","title":"maintains the correct context when unwinding due to an error in render"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should not recreate masked context unless inputs have changed","location":{"column":3,"line":2347},"status":"passed","title":"should not recreate masked context unless inputs have changed"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should reuse memoized work if pointers are updated before calling lifecycles","location":{"column":3,"line":2400},"status":"pending","title":"should reuse memoized work if pointers are updated before calling lifecycles"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental updates descendants with new context values","location":{"column":3,"line":2483},"status":"passed","title":"updates descendants with new context values"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental updates descendants with multiple context-providing ancestors with new context values","location":{"column":3,"line":2537},"status":"passed","title":"updates descendants with multiple context-providing ancestors with new context values"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should not update descendants with new context values if shouldComponentUpdate returns false","location":{"column":3,"line":2597},"status":"passed","title":"should not update descendants with new context values if shouldComponentUpdate returns false"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental should update descendants with new context values if setState() is called in the middle of the tree","location":{"column":3,"line":2666},"status":"passed","title":"should update descendants with new context values if setState() is called in the middle of the tree"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does not interrupt for update at same priority","location":{"column":3,"line":2751},"status":"passed","title":"does not interrupt for update at same priority"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does not interrupt for update at lower priority","location":{"column":3,"line":2771},"status":"passed","title":"does not interrupt for update at lower priority"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does interrupt for update at higher priority","location":{"column":3,"line":2792},"status":"passed","title":"does interrupt for update at higher priority"},{"ancestorTitles":["ReactIncremental"],"failureMessages":[],"fullName":"ReactIncremental does not break with a bad Map polyfill","location":{"column":3,"line":2814},"status":"passed","title":"does not break with a bad Map polyfill"}],"endTime":1639318946265,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncremental-test.js","startTime":1639318944039,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates applies updates in order of priority","location":{"column":3,"line":35},"status":"passed","title":"applies updates in order of priority"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates applies updates with equal priority in insertion order","location":{"column":3,"line":62},"status":"passed","title":"applies updates with equal priority in insertion order"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates only drops updates with equal or lesser priority when replaceState is called","location":{"column":3,"line":83},"status":"passed","title":"only drops updates with equal or lesser priority when replaceState is called"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates can abort an update, schedule additional updates, and resume","location":{"column":3,"line":126},"status":"passed","title":"can abort an update, schedule additional updates, and resume"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates can abort an update, schedule a replaceState, and resume","location":{"column":3,"line":182},"status":"passed","title":"can abort an update, schedule a replaceState, and resume"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates passes accumulation of previous updates to replaceState updater function","location":{"column":3,"line":241},"status":"passed","title":"passes accumulation of previous updates to replaceState updater function"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates does not call callbacks that are scheduled by another callback until a later commit","location":{"column":3,"line":264},"status":"passed","title":"does not call callbacks that are scheduled by another callback until a later commit"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates gives setState during reconciliation the same priority as whatever level is currently reconciling","location":{"column":3,"line":293},"status":"passed","title":"gives setState during reconciliation the same priority as whatever level is currently reconciling"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates updates triggered from inside a class setState updater","location":{"column":3,"line":326},"status":"passed","title":"updates triggered from inside a class setState updater"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates getDerivedStateFromProps should update base state of updateQueue (based on product bug)","location":{"column":3,"line":398},"status":"passed","title":"getDerivedStateFromProps should update base state of updateQueue (based on product bug)"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates regression: does not expire soon due to layout effects in the last batch","location":{"column":3,"line":446},"status":"passed","title":"regression: does not expire soon due to layout effects in the last batch"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates regression: does not expire soon due to previous flushSync","location":{"column":3,"line":477},"status":"passed","title":"regression: does not expire soon due to previous flushSync"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates regression: does not expire soon due to previous expired work","location":{"column":3,"line":494},"status":"passed","title":"regression: does not expire soon due to previous expired work"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates when rebasing, does not exclude updates that were already committed, regardless of priority","location":{"column":3,"line":510},"status":"passed","title":"when rebasing, does not exclude updates that were already committed, regardless of priority"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates when rebasing, does not exclude updates that were already committed, regardless of priority (classes)","location":{"column":3,"line":578},"status":"passed","title":"when rebasing, does not exclude updates that were already committed, regardless of priority (classes)"},{"ancestorTitles":["ReactIncrementalUpdates"],"failureMessages":[],"fullName":"ReactIncrementalUpdates base state of update queue is initialized to its fiber's memoized state","location":{"column":3,"line":644},"status":"passed","title":"base state of update queue is initialized to its fiber's memoized state"}],"endTime":1639318947265,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalUpdates-test.js","startTime":1639318946326,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can update child nodes of a host instance","location":{"column":3,"line":54},"status":"passed","title":"can update child nodes of a host instance"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can update child nodes of a fragment","location":{"column":3,"line":77},"status":"passed","title":"can update child nodes of a fragment"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can update child nodes rendering into text nodes","location":{"column":3,"line":113},"status":"passed","title":"can update child nodes rendering into text nodes"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can deletes children either components, host or text","location":{"column":3,"line":138},"status":"passed","title":"can deletes children either components, host or text"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can delete a child that changes type - implicit keys","location":{"column":3,"line":164},"status":"passed","title":"can delete a child that changes type - implicit keys"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can delete a child that changes type - explicit keys","location":{"column":3,"line":216},"status":"passed","title":"can delete a child that changes type - explicit keys"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can delete a child when it unmounts inside a portal","location":{"column":3,"line":262},"status":"passed","title":"can delete a child when it unmounts inside a portal"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can delete a child when it unmounts with a portal","location":{"column":3,"line":338},"status":"passed","title":"can delete a child when it unmounts with a portal"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects does not update child nodes if a flush is aborted","location":{"column":3,"line":387},"status":"passed","title":"does not update child nodes if a flush is aborted"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects [GATED, SHOULD FAIL] preserves a previously rendered node when deprioritized","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] preserves a previously rendered node when deprioritized"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects [GATED, SHOULD FAIL] can reuse side-effects after being preempted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can reuse side-effects after being preempted"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects [GATED, SHOULD FAIL] can reuse side-effects after being preempted, if shouldComponentUpdate is false","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can reuse side-effects after being preempted, if shouldComponentUpdate is false"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can update a completed tree before it has a chance to commit","location":{"column":3,"line":636},"status":"passed","title":"can update a completed tree before it has a chance to commit"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects [GATED, SHOULD FAIL] updates a child even though the old props is empty","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] updates a child even though the old props is empty"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can defer side-effects and resume them later on","location":{"column":3,"line":687},"status":"pending","title":"can defer side-effects and resume them later on"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects can defer side-effects and reuse them later - complex","location":{"column":3,"line":764},"status":"pending","title":"can defer side-effects and reuse them later - complex"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects [GATED, SHOULD FAIL] deprioritizes setStates that happens within a deprioritized tree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] deprioritizes setStates that happens within a deprioritized tree"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects calls callback after update is flushed","location":{"column":3,"line":1004},"status":"passed","title":"calls callback after update is flushed"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects calls setState callback even if component bails out","location":{"column":3,"line":1029},"status":"passed","title":"calls setState callback even if component bails out"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects calls componentWillUnmount after a deletion, even if nested","location":{"column":3,"line":1058},"status":"passed","title":"calls componentWillUnmount after a deletion, even if nested"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects calls componentDidMount/Update after insertion/update","location":{"column":3,"line":1118},"status":"passed","title":"calls componentDidMount/Update after insertion/update"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects invokes ref callbacks after insertion/update/unmount","location":{"column":3,"line":1193},"status":"passed","title":"invokes ref callbacks after insertion/update/unmount"},{"ancestorTitles":["ReactIncrementalSideEffects"],"failureMessages":[],"fullName":"ReactIncrementalSideEffects supports string refs","location":{"column":3,"line":1264},"status":"passed","title":"supports string refs"}],"endTime":1639318948634,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalSideEffects-test.js","startTime":1639318947326,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTransition"],"failureMessages":[],"fullName":"ReactTransition [GATED, SHOULD FAIL] isPending works even if called from outside an input event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] isPending works even if called from outside an input event"}],"endTime":1639318948901,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactTransition-test.js","startTime":1639318948695,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not restart rendering for initial render","location":{"column":3,"line":156},"status":"passed","title":"does not restart rendering for initial render"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer suspends rendering and continues later","location":{"column":3,"line":220},"status":"passed","title":"suspends rendering and continues later"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer suspends siblings and later recovers each independently","location":{"column":3,"line":271},"status":"passed","title":"suspends siblings and later recovers each independently"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer continues rendering siblings after suspending","location":{"column":3,"line":314},"status":"passed","title":"continues rendering siblings after suspending"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] retries on error","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] retries on error"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] retries on error after falling back to a placeholder","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] retries on error after falling back to a placeholder"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer can update at a higher priority while in a suspended state","location":{"column":3,"line":463},"status":"passed","title":"can update at a higher priority while in a suspended state"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer keeps working on lower priority work after being pinged","location":{"column":3,"line":504},"status":"passed","title":"keeps working on lower priority work after being pinged"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer tries rendering a lower priority pending update even if a higher priority one suspends","location":{"column":3,"line":538},"status":"passed","title":"tries rendering a lower priority pending update even if a higher priority one suspends"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer tries each subsequent level after suspending","location":{"column":3,"line":570},"status":"passed","title":"tries each subsequent level after suspending"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer forces an expiration after an update times out","location":{"column":3,"line":641},"status":"passed","title":"forces an expiration after an update times out"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer switches to an inner fallback after suspending for a while","location":{"column":3,"line":686},"status":"passed","title":"switches to an inner fallback after suspending for a while"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer renders an expiration boundary synchronously","location":{"column":3,"line":754},"status":"passed","title":"renders an expiration boundary synchronously"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer suspending inside an expired expiration boundary will bubble to the next one","location":{"column":3,"line":785},"status":"passed","title":"suspending inside an expired expiration boundary will bubble to the next one"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer expires early by default","location":{"column":3,"line":808},"status":"passed","title":"expires early by default"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer resolves successfully even if fallback render is pending","location":{"column":3,"line":850},"status":"passed","title":"resolves successfully even if fallback render is pending"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer throws a helpful error when an update is suspends without a placeholder","location":{"column":3,"line":882},"status":"passed","title":"throws a helpful error when an update is suspends without a placeholder"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer a Suspense component correctly handles more than one suspended child","location":{"column":3,"line":889},"status":"passed","title":"a Suspense component correctly handles more than one suspended child"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer can resume rendering earlier than a timeout","location":{"column":3,"line":914},"status":"passed","title":"can resume rendering earlier than a timeout"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] starts working on an update even if its priority falls between two suspended levels","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] starts working on an update even if its priority falls between two suspended levels"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer flushes all expired updates in a single batch","location":{"column":3,"line":996},"status":"passed","title":"flushes all expired updates in a single batch"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer a suspended update that expires","location":{"column":3,"line":1043},"status":"passed","title":"a suspended update that expires"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode times out immediately","location":{"column":5,"line":1088},"status":"passed","title":"times out immediately"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode times out immediately when Suspense is in legacy mode","location":{"column":5,"line":1110},"status":"passed","title":"times out immediately when Suspense is in legacy mode"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode does not re-render siblings in loose mode","location":{"column":5,"line":1190},"status":"passed","title":"does not re-render siblings in loose mode"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode suspends inside constructor","location":{"column":5,"line":1264},"status":"passed","title":"suspends inside constructor"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode does not infinite loop if fallback contains lifecycle method","location":{"column":5,"line":1315},"status":"passed","title":"does not infinite loop if fallback contains lifecycle method"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode hides/unhides suspended children before layout effects fire (mutation)","location":{"column":7,"line":1399},"status":"passed","title":"hides/unhides suspended children before layout effects fire (mutation)"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode handles errors in the return path of a component that suspends","location":{"column":5,"line":1442},"status":"passed","title":"handles errors in the return path of a component that suspends"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","legacy mode mode"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer legacy mode mode does not drop mounted effects","location":{"column":5,"line":1476},"status":"passed","title":"does not drop mounted effects"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not call lifecycles of a suspended component","location":{"column":3,"line":1526},"status":"passed","title":"does not call lifecycles of a suspended component"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not call lifecycles of a suspended component (hooks)","location":{"column":3,"line":1604},"status":"passed","title":"does not call lifecycles of a suspended component (hooks)"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer suspends for longer if something took a long (CPU bound) time to render","location":{"column":3,"line":1747},"status":"passed","title":"suspends for longer if something took a long (CPU bound) time to render"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not suspends if a fallback has been shown for a long time","location":{"column":3,"line":1800},"status":"passed","title":"does not suspends if a fallback has been shown for a long time"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does suspend if a fallback has been shown for a short time","location":{"column":3,"line":1854},"status":"passed","title":"does suspend if a fallback has been shown for a short time"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not suspend for very long after a higher priority update","location":{"column":3,"line":1908},"status":"passed","title":"does not suspend for very long after a higher priority update"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not warn when a low priority update suspends inside a high priority update for functional components","location":{"column":3,"line":1952},"status":"passed","title":"does not warn when a low priority update suspends inside a high priority update for functional components"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not warn when a low priority update suspends inside a high priority update for class components","location":{"column":3,"line":1978},"status":"passed","title":"does not warn when a low priority update suspends inside a high priority update for class components"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not warn about wrong Suspense priority if no new fallbacks are shown","location":{"column":3,"line":2006},"status":"passed","title":"does not warn about wrong Suspense priority if no new fallbacks are shown"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not warn when component that triggered user-blocking update is between Suspense boundary and component that suspended","location":{"column":3,"line":2040},"status":"passed","title":"does not warn when component that triggered user-blocking update is between Suspense boundary and component that suspended"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer normal priority updates suspending do not warn for class components","location":{"column":3,"line":2071},"status":"passed","title":"normal priority updates suspending do not warn for class components"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer normal priority updates suspending do not warn for functional components","location":{"column":3,"line":2099},"status":"passed","title":"normal priority updates suspending do not warn for functional components"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer shows the parent fallback if the inner fallback should be avoided","location":{"column":3,"line":2124},"status":"passed","title":"shows the parent fallback if the inner fallback should be avoided"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer favors showing the inner fallback for nested top level avoided fallback","location":{"column":3,"line":2184},"status":"passed","title":"favors showing the inner fallback for nested top level avoided fallback"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer keeps showing an avoided parent fallback if it is already showing","location":{"column":3,"line":2215},"status":"passed","title":"keeps showing an avoided parent fallback if it is already showing"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer commits a suspended idle pri render within a reasonable time","location":{"column":3,"line":2258},"status":"passed","title":"commits a suspended idle pri render within a reasonable time"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","startTransition"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer startTransition [GATED, SHOULD FAIL] top level render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] top level render"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","startTransition"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer startTransition [GATED, SHOULD FAIL] hooks","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hooks"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","startTransition"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer startTransition [GATED, SHOULD FAIL] classes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] classes"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","delays transitions when using React.startTranistion"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer delays transitions when using React.startTranistion [GATED, SHOULD FAIL] top level render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] top level render"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","delays transitions when using React.startTranistion"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer delays transitions when using React.startTranistion [GATED, SHOULD FAIL] hooks","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] hooks"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer","delays transitions when using React.startTranistion"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer delays transitions when using React.startTranistion [GATED, SHOULD FAIL] classes","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] classes"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] do not show placeholder when updating an avoided boundary with startTransition","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] do not show placeholder when updating an avoided boundary with startTransition"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] do not show placeholder when mounting an avoided boundary with startTransition","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] do not show placeholder when mounting an avoided boundary with startTransition"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer suspended commit remains suspended even if there's another update at same expiration","location":{"column":3,"line":2757},"status":"passed","title":"suspended commit remains suspended even if there's another update at same expiration"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer regression test: resets current \"debug phase\" after suspending","location":{"column":3,"line":2798},"status":"passed","title":"regression test: resets current \"debug phase\" after suspending"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] should not render hidden content while suspended on higher pri","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not render hidden content while suspended on higher pri"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] should be able to unblock higher pri content before suspended hidden","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should be able to unblock higher pri content before suspended hidden"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer multiple updates originating inside a Suspense boundary at different priority levels are not dropped","location":{"column":3,"line":2964},"status":"passed","title":"multiple updates originating inside a Suspense boundary at different priority levels are not dropped"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer multiple updates originating inside a Suspense boundary at different priority levels are not dropped, including Idle updates","location":{"column":3,"line":3017},"status":"passed","title":"multiple updates originating inside a Suspense boundary at different priority levels are not dropped, including Idle updates"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer fallback component can update itself even after a high pri update to the primary tree suspends","location":{"column":3,"line":3084},"status":"passed","title":"fallback component can update itself even after a high pri update to the primary tree suspends"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer regression: primary fragment fiber is not always part of setState return path","location":{"column":3,"line":3168},"status":"passed","title":"regression: primary fragment fiber is not always part of setState return path"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer regression: primary fragment fiber is not always part of setState return path (another case)","location":{"column":3,"line":3246},"status":"passed","title":"regression: primary fragment fiber is not always part of setState return path (another case)"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer after showing fallback, should not flip back to primary content until the update that suspended finishes","location":{"column":3,"line":3330},"status":"passed","title":"after showing fallback, should not flip back to primary content until the update that suspended finishes"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer a high pri update can unhide a boundary that suspended at a different level","location":{"column":3,"line":3474},"status":"passed","title":"a high pri update can unhide a boundary that suspended at a different level"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer regression: empty render at high priority causes update to be dropped","location":{"column":3,"line":3570},"status":"passed","title":"regression: empty render at high priority causes update to be dropped"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] regression: ping at high priority causes update to be dropped","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] regression: ping at high priority causes update to be dropped"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer [GATED, SHOULD FAIL] does not get stuck in pending state with render phase updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not get stuck in pending state with render phase updates"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer regression: #18657","location":{"column":3,"line":3849},"status":"passed","title":"regression: #18657"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer retries have lower priority than normal updates","location":{"column":3,"line":3898},"status":"passed","title":"retries have lower priority than normal updates"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer should fire effect clean-up when deleting suspended tree","location":{"column":3,"line":3953},"status":"passed","title":"should fire effect clean-up when deleting suspended tree"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer should fire effect clean-up when deleting suspended tree (legacy)","location":{"column":3,"line":4000},"status":"passed","title":"should fire effect clean-up when deleting suspended tree (legacy)"}],"endTime":1639318953249,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactSuspenseWithNoopRenderer-test.js","startTime":1639318948968,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTopLevelFragment"],"failureMessages":[],"fullName":"ReactTopLevelFragment should render a simple fragment at the top of a component","location":{"column":3,"line":27},"status":"passed","title":"should render a simple fragment at the top of a component"},{"ancestorTitles":["ReactTopLevelFragment"],"failureMessages":[],"fullName":"ReactTopLevelFragment should preserve state when switching from a single child","location":{"column":3,"line":35},"status":"passed","title":"should preserve state when switching from a single child"},{"ancestorTitles":["ReactTopLevelFragment"],"failureMessages":[],"fullName":"ReactTopLevelFragment should not preserve state when switching to a nested array","location":{"column":3,"line":67},"status":"passed","title":"should not preserve state when switching to a nested array"},{"ancestorTitles":["ReactTopLevelFragment"],"failureMessages":[],"fullName":"ReactTopLevelFragment preserves state if an implicit key slot switches from/to null","location":{"column":3,"line":99},"status":"passed","title":"preserves state if an implicit key slot switches from/to null"},{"ancestorTitles":["ReactTopLevelFragment"],"failureMessages":[],"fullName":"ReactTopLevelFragment should preserve state in a reorder","location":{"column":3,"line":136},"status":"passed","title":"should preserve state in a reorder"}],"endTime":1639318953706,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactTopLevelFragment-test.js","startTime":1639318953311,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy suspends until module has loaded","location":{"column":3,"line":45},"status":"passed","title":"suspends until module has loaded"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy can resolve synchronously without suspending","location":{"column":3,"line":75},"status":"passed","title":"can resolve synchronously without suspending"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy can reject synchronously without suspending","location":{"column":3,"line":92},"status":"passed","title":"can reject synchronously without suspending"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy multiple lazy components","location":{"column":3,"line":122},"status":"passed","title":"multiple lazy components"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy does not support arbitrary promises, only module objects","location":{"column":3,"line":163},"status":"passed","title":"does not support arbitrary promises, only module objects"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy throws if promise rejects","location":{"column":3,"line":190},"status":"passed","title":"throws if promise rejects"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy mount and reorder","location":{"column":3,"line":214},"status":"passed","title":"mount and reorder"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy resolves defaultProps, on mount and update","location":{"column":3,"line":275},"status":"passed","title":"resolves defaultProps, on mount and update"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy resolves defaultProps without breaking memoization","location":{"column":3,"line":309},"status":"passed","title":"resolves defaultProps without breaking memoization"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy resolves defaultProps without breaking bailout due to unchanged props and state, #17151","location":{"column":3,"line":355},"status":"passed","title":"resolves defaultProps without breaking bailout due to unchanged props and state, #17151"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy resolves defaultProps without breaking bailout in PureComponent, #17151","location":{"column":3,"line":400},"status":"passed","title":"resolves defaultProps without breaking bailout in PureComponent, #17151"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy sets defaultProps for modern lifecycles","location":{"column":3,"line":446},"status":"passed","title":"sets defaultProps for modern lifecycles"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy sets defaultProps for legacy lifecycles","location":{"column":3,"line":550},"status":"passed","title":"sets defaultProps for legacy lifecycles"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy resolves defaultProps on the outer wrapper but warns","location":{"column":3,"line":617},"status":"passed","title":"resolves defaultProps on the outer wrapper but warns"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy throws with a useful error when wrapping invalid type with lazy()","location":{"column":3,"line":666},"status":"passed","title":"throws with a useful error when wrapping invalid type with lazy()"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy throws with a useful error when wrapping lazy() multiple times","location":{"column":3,"line":692},"status":"passed","title":"throws with a useful error when wrapping lazy() multiple times"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy warns about defining propTypes on the outer wrapper","location":{"column":3,"line":723},"status":"passed","title":"warns about defining propTypes on the outer wrapper"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on function component with defaultProps","location":{"column":698,"line":785},"status":"passed","title":"respects propTypes on function component with defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on function component without defaultProps","location":{"column":3,"line":798},"status":"passed","title":"respects propTypes on function component without defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on class component with defaultProps","location":{"column":3,"line":808},"status":"passed","title":"respects propTypes on class component with defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on class component without defaultProps","location":{"column":3,"line":825},"status":"passed","title":"respects propTypes on class component without defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on forwardRef component with defaultProps","location":{"column":3,"line":837},"status":"passed","title":"respects propTypes on forwardRef component with defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on forwardRef component without defaultProps","location":{"column":3,"line":853},"status":"passed","title":"respects propTypes on forwardRef component without defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on outer memo component with defaultProps","location":{"column":3,"line":864},"status":"passed","title":"respects propTypes on outer memo component with defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on outer memo component without defaultProps","location":{"column":3,"line":880},"status":"passed","title":"respects propTypes on outer memo component without defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on inner memo component with defaultProps","location":{"column":3,"line":891},"status":"passed","title":"respects propTypes on inner memo component with defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy respects propTypes on inner memo component without defaultProps","location":{"column":3,"line":907},"status":"passed","title":"respects propTypes on inner memo component without defaultProps"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy uses outer resolved props for validating propTypes on memo","location":{"column":3,"line":918},"status":"passed","title":"uses outer resolved props for validating propTypes on memo"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy includes lazy-loaded component in warning stack","location":{"column":3,"line":966},"status":"passed","title":"includes lazy-loaded component in warning stack"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy supports class and forwardRef components","location":{"column":3,"line":993},"status":"passed","title":"supports class and forwardRef components"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy supports defaultProps defined on the memo() return value","location":{"column":3,"line":1040},"status":"passed","title":"supports defaultProps defined on the memo() return value"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy merges defaultProps in the correct order","location":{"column":3,"line":1119},"status":"passed","title":"merges defaultProps in the correct order"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy warns about ref on functions for lazy-loaded components","location":{"column":3,"line":1167},"status":"passed","title":"warns about ref on functions for lazy-loaded components"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy should error with a component stack naming the resolved component","location":{"column":3,"line":1190},"status":"passed","title":"should error with a component stack naming the resolved component"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy should error with a component stack containing Lazy if unresolved","location":{"column":3,"line":1234},"status":"passed","title":"should error with a component stack containing Lazy if unresolved"},{"ancestorTitles":["ReactLazy"],"failureMessages":[],"fullName":"ReactLazy [GATED, SHOULD FAIL] mount and reorder lazy elements","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] mount and reorder lazy elements"}],"endTime":1639318955992,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactLazy-test.internal.js","startTime":1639318953779,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactPersistentUpdatesMinimalism"],"failureMessages":[],"fullName":"ReactPersistentUpdatesMinimalism should render a simple component","location":{"column":3,"line":23},"status":"passed","title":"should render a simple component"},{"ancestorTitles":["ReactPersistentUpdatesMinimalism"],"failureMessages":[],"fullName":"ReactPersistentUpdatesMinimalism should not diff referentially equal host elements","location":{"column":3,"line":45},"status":"passed","title":"should not diff referentially equal host elements"},{"ancestorTitles":["ReactPersistentUpdatesMinimalism"],"failureMessages":[],"fullName":"ReactPersistentUpdatesMinimalism should not diff parents of setState targets","location":{"column":3,"line":83},"status":"passed","title":"should not diff parents of setState targets"}],"endTime":1639318956354,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactPersistentUpdatesMinimalism-test.js","startTime":1639318956053,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling recovers from errors asynchronously","location":{"column":3,"line":61},"status":"passed","title":"recovers from errors asynchronously"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling recovers from errors asynchronously (legacy, no getDerivedStateFromError)","location":{"column":3,"line":155},"status":"passed","title":"recovers from errors asynchronously (legacy, no getDerivedStateFromError)"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling retries at a lower priority if there's additional pending work","location":{"column":3,"line":235},"status":"passed","title":"retries at a lower priority if there's additional pending work"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling [GATED, SHOULD FAIL] does not include offscreen work when retrying after an error","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not include offscreen work when retrying after an error"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling retries one more time before handling error","location":{"column":3,"line":364},"status":"passed","title":"retries one more time before handling error"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling retries one more time if an error occurs during a render that expires midway through the tree","location":{"column":3,"line":404},"status":"passed","title":"retries one more time if an error occurs during a render that expires midway through the tree"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling calls componentDidCatch multiple times for multiple errors","location":{"column":3,"line":454},"status":"passed","title":"calls componentDidCatch multiple times for multiple errors"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling catches render error in a boundary during full deferred mounting","location":{"column":3,"line":501},"status":"passed","title":"catches render error in a boundary during full deferred mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling catches render error in a boundary during partial deferred mounting","location":{"column":3,"line":530},"status":"passed","title":"catches render error in a boundary during partial deferred mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling catches render error in a boundary during synchronous mounting","location":{"column":3,"line":576},"status":"passed","title":"catches render error in a boundary during synchronous mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling catches render error in a boundary during batched mounting","location":{"column":3,"line":623},"status":"passed","title":"catches render error in a boundary during batched mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling propagates an error from a noop error boundary during full deferred mounting","location":{"column":3,"line":671},"status":"passed","title":"propagates an error from a noop error boundary during full deferred mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling propagates an error from a noop error boundary during partial deferred mounting","location":{"column":3,"line":710},"status":"passed","title":"propagates an error from a noop error boundary during partial deferred mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling propagates an error from a noop error boundary during synchronous mounting","location":{"column":3,"line":751},"status":"passed","title":"propagates an error from a noop error boundary during synchronous mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling propagates an error from a noop error boundary during batched mounting","location":{"column":3,"line":791},"status":"passed","title":"propagates an error from a noop error boundary during batched mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling applies batched updates regardless despite errors in scheduling","location":{"column":3,"line":834},"status":"passed","title":"applies batched updates regardless despite errors in scheduling"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling applies nested batched updates despite errors in scheduling","location":{"column":3,"line":847},"status":"passed","title":"applies nested batched updates despite errors in scheduling"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling defers additional sync work to a separate event after an error","location":{"column":3,"line":865},"status":"passed","title":"defers additional sync work to a separate event after an error"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling can schedule updates after uncaught error in render on mount","location":{"column":3,"line":880},"status":"passed","title":"can schedule updates after uncaught error in render on mount"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling can schedule updates after uncaught error in render on update","location":{"column":3,"line":905},"status":"passed","title":"can schedule updates after uncaught error in render on update"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling can schedule updates after uncaught error during umounting","location":{"column":3,"line":937},"status":"passed","title":"can schedule updates after uncaught error during umounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling [GATED, SHOULD FAIL] should not attempt to recover an unmounting error boundary","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not attempt to recover an unmounting error boundary"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling can unmount an error boundary before it is handled","location":{"column":3,"line":1010},"status":"passed","title":"can unmount an error boundary before it is handled"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling continues work on other roots despite caught errors","location":{"column":3,"line":1046},"status":"passed","title":"continues work on other roots despite caught errors"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling continues work on other roots despite uncaught errors","location":{"column":3,"line":1081},"status":"passed","title":"continues work on other roots despite uncaught errors"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling unwinds the context stack correctly on error","location":{"column":3,"line":1176},"status":"passed","title":"unwinds the context stack correctly on error"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling catches reconciler errors in a boundary during mounting","location":{"column":3,"line":1239},"status":"passed","title":"catches reconciler errors in a boundary during mounting"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling catches reconciler errors in a boundary during update","location":{"column":3,"line":1280},"status":"passed","title":"catches reconciler errors in a boundary during update"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling recovers from uncaught reconciler errors","location":{"column":3,"line":1329},"status":"passed","title":"recovers from uncaught reconciler errors"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling unmounts components with uncaught errors","location":{"column":3,"line":1351},"status":"passed","title":"unmounts components with uncaught errors"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling does not interrupt unmounting if detaching a ref throws","location":{"column":3,"line":1404},"status":"passed","title":"does not interrupt unmounting if detaching a ref throws"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling handles error thrown by host config while working on failed root","location":{"column":3,"line":1442},"status":"passed","title":"handles error thrown by host config while working on failed root"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling handles error thrown by top-level callback","location":{"column":3,"line":1447},"status":"passed","title":"handles error thrown by top-level callback"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling error boundaries capture non-errors","location":{"column":3,"line":1454},"status":"passed","title":"error boundaries capture non-errors"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling continues working on siblings of a component that throws","location":{"column":3,"line":1527},"status":"passed","title":"continues working on siblings of a component that throws"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling calls the correct lifecycles on the error boundary after catching an error (mixed)","location":{"column":3,"line":1588},"status":"passed","title":"calls the correct lifecycles on the error boundary after catching an error (mixed)"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling provides component stack to the error boundary with componentDidCatch","location":{"column":3,"line":1629},"status":"passed","title":"provides component stack to the error boundary with componentDidCatch"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling does not provide component stack to the error boundary with getDerivedStateFromError","location":{"column":3,"line":1669},"status":"passed","title":"does not provide component stack to the error boundary with getDerivedStateFromError"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling provides component stack even if overriding prepareStackTrace","location":{"column":3,"line":1697},"status":"passed","title":"provides component stack even if overriding prepareStackTrace"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling handles error thrown inside getDerivedStateFromProps of a module-style context provider","location":{"column":5,"line":1754},"status":"passed","title":"handles error thrown inside getDerivedStateFromProps of a module-style context provider"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling uncaught errors should be discarded if the render is aborted","location":{"column":3,"line":1789},"status":"passed","title":"uncaught errors should be discarded if the render is aborted"},{"ancestorTitles":["ReactIncrementalErrorHandling"],"failureMessages":[],"fullName":"ReactIncrementalErrorHandling uncaught errors are discarded if the render is aborted, case 2","location":{"column":3,"line":1814},"status":"passed","title":"uncaught errors are discarded if the render is aborted, case 2"}],"endTime":1639318958732,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js","startTime":1639318956415,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["memo"],"failureMessages":[],"fullName":"memo warns when giving a ref (simple)","location":{"column":3,"line":45},"status":"passed","title":"warns when giving a ref (simple)"},{"ancestorTitles":["memo"],"failureMessages":[],"fullName":"memo warns when giving a ref (complex)","location":{"column":3,"line":63},"status":"passed","title":"warns when giving a ref (complex)"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal bails out on props equality","location":{"column":7,"line":98},"status":"passed","title":"bails out on props equality"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal does not bail out if there's a context change","location":{"column":7,"line":133},"status":"passed","title":"does not bail out if there's a context change"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal accepts custom comparison function","location":{"column":7,"line":180},"status":"passed","title":"accepts custom comparison function"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal supports non-pure class components","location":{"column":7,"line":220},"status":"passed","title":"supports non-pure class components"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal supports defaultProps defined on the memo() return value","location":{"column":7,"line":258},"status":"passed","title":"supports defaultProps defined on the memo() return value"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal warns if the first argument is undefined","location":{"column":7,"line":311},"status":"passed","title":"warns if the first argument is undefined"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal warns if the first argument is null","location":{"column":7,"line":321},"status":"passed","title":"warns if the first argument is null"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal validates propTypes declared on the inner component","location":{"column":7,"line":331},"status":"passed","title":"validates propTypes declared on the inner component"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal validates propTypes declared on the outer component","location":{"column":7,"line":355},"status":"passed","title":"validates propTypes declared on the outer component"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal validates nested propTypes declarations","location":{"column":7,"line":381},"status":"passed","title":"validates nested propTypes declarations"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal does not drop lower priority state updates when bailing out at higher pri (simple)","location":{"column":7,"line":431},"status":"passed","title":"does not drop lower priority state updates when bailing out at higher pri (simple)"},{"ancestorTitles":["memo","normal"],"failureMessages":[],"fullName":"memo normal does not drop lower priority state updates when bailing out at higher pri (complex)","location":{"column":7,"line":464},"status":"passed","title":"does not drop lower priority state updates when bailing out at higher pri (complex)"},{"ancestorTitles":["memo"],"failureMessages":[],"fullName":"memo should honor a displayName if set on the memo wrapper in warnings","location":{"column":5,"line":501},"status":"passed","title":"should honor a displayName if set on the memo wrapper in warnings"},{"ancestorTitles":["memo"],"failureMessages":[],"fullName":"memo should honor a inner displayName if set on the wrapped function","location":{"column":5,"line":519},"status":"passed","title":"should honor a inner displayName if set on the wrapped function"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy bails out on props equality","location":{"column":7,"line":98},"status":"passed","title":"bails out on props equality"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy does not bail out if there's a context change","location":{"column":7,"line":133},"status":"passed","title":"does not bail out if there's a context change"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy accepts custom comparison function","location":{"column":7,"line":180},"status":"passed","title":"accepts custom comparison function"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy supports non-pure class components","location":{"column":7,"line":220},"status":"passed","title":"supports non-pure class components"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy supports defaultProps defined on the memo() return value","location":{"column":7,"line":258},"status":"passed","title":"supports defaultProps defined on the memo() return value"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy warns if the first argument is undefined","location":{"column":7,"line":311},"status":"passed","title":"warns if the first argument is undefined"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy warns if the first argument is null","location":{"column":7,"line":321},"status":"passed","title":"warns if the first argument is null"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy validates propTypes declared on the inner component","location":{"column":7,"line":331},"status":"passed","title":"validates propTypes declared on the inner component"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy validates propTypes declared on the outer component","location":{"column":7,"line":355},"status":"passed","title":"validates propTypes declared on the outer component"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy validates nested propTypes declarations","location":{"column":7,"line":381},"status":"passed","title":"validates nested propTypes declarations"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy does not drop lower priority state updates when bailing out at higher pri (simple)","location":{"column":7,"line":431},"status":"passed","title":"does not drop lower priority state updates when bailing out at higher pri (simple)"},{"ancestorTitles":["memo","lazy"],"failureMessages":[],"fullName":"memo lazy does not drop lower priority state updates when bailing out at higher pri (complex)","location":{"column":7,"line":464},"status":"passed","title":"does not drop lower priority state updates when bailing out at higher pri (complex)"},{"ancestorTitles":["memo"],"failureMessages":[],"fullName":"memo should honor a displayName if set on the memo wrapper in warnings","location":{"column":5,"line":501},"status":"passed","title":"should honor a displayName if set on the memo wrapper in warnings"},{"ancestorTitles":["memo"],"failureMessages":[],"fullName":"memo should honor a inner displayName if set on the wrapped function","location":{"column":5,"line":519},"status":"passed","title":"should honor a inner displayName if set on the wrapped function"}],"endTime":1639318960340,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactMemo-test.js","startTime":1639318958793,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense check type","location":{"column":3,"line":50},"status":"passed","title":"check type"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense 1 then 0 suspense callback","location":{"column":3,"line":74},"status":"passed","title":"1 then 0 suspense callback"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense 2 then 1 then 0 suspense callback","location":{"column":3,"line":100},"status":"passed","title":"2 then 1 then 0 suspense callback"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense nested suspense promises are reported only for their tier","location":{"column":3,"line":146},"status":"passed","title":"nested suspense promises are reported only for their tier"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense competing suspense promises","location":{"column":3,"line":177},"status":"passed","title":"competing suspense promises"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense regression test for #16215 that relies on implementation details","location":{"column":5,"line":245},"status":"passed","title":"regression test for #16215 that relies on implementation details"}],"endTime":1639318960908,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactSuspenseCallback-test.internal.js","startTime":1639318960411,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer simple mount and update","location":{"column":7,"line":138},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer propagates through shouldComponentUpdate false","location":{"column":7,"line":168},"status":"passed","title":"propagates through shouldComponentUpdate false"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer consumers bail out if context value is the same","location":{"column":7,"line":237},"status":"passed","title":"consumers bail out if context value is the same"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer nested providers","location":{"column":7,"line":306},"status":"passed","title":"nested providers"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer should provide the correct (default) values to consumers outside of a provider","location":{"column":7,"line":362},"status":"passed","title":"should provide the correct (default) values to consumers outside of a provider"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer multiple consumers in different branches","location":{"column":7,"line":400},"status":"passed","title":"multiple consumers in different branches"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer compares context values with Object.is semantics","location":{"column":7,"line":471},"status":"passed","title":"compares context values with Object.is semantics"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer context unwinds when interrupted","location":{"column":7,"line":541},"status":"passed","title":"context unwinds when interrupted"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer can skip consumers with bitmask","location":{"column":7,"line":593},"status":"passed","title":"can skip consumers with bitmask"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer can skip parents with bitmask bailout while updating their children","location":{"column":7,"line":692},"status":"passed","title":"can skip parents with bitmask bailout while updating their children"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer does not re-render if there's an update in a child","location":{"column":7,"line":813},"status":"passed","title":"does not re-render if there's an update in a child"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer consumer bails out if value is unchanged and something above bailed out","location":{"column":7,"line":853},"status":"passed","title":"consumer bails out if value is unchanged and something above bailed out"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer [GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer does not run into an infinite loop","location":{"column":7,"line":952},"status":"passed","title":"does not run into an infinite loop"},{"ancestorTitles":["ReactNewContext","reading context with Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext reading context with Context.Consumer does not skip some siblings","location":{"column":7,"line":990},"status":"passed","title":"does not skip some siblings"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component simple mount and update","location":{"column":7,"line":138},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component propagates through shouldComponentUpdate false","location":{"column":7,"line":168},"status":"passed","title":"propagates through shouldComponentUpdate false"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component consumers bail out if context value is the same","location":{"column":7,"line":237},"status":"passed","title":"consumers bail out if context value is the same"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component nested providers","location":{"column":7,"line":306},"status":"passed","title":"nested providers"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component should provide the correct (default) values to consumers outside of a provider","location":{"column":7,"line":362},"status":"passed","title":"should provide the correct (default) values to consumers outside of a provider"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component multiple consumers in different branches","location":{"column":7,"line":400},"status":"passed","title":"multiple consumers in different branches"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component compares context values with Object.is semantics","location":{"column":7,"line":471},"status":"passed","title":"compares context values with Object.is semantics"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component context unwinds when interrupted","location":{"column":7,"line":541},"status":"passed","title":"context unwinds when interrupted"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component can skip consumers with bitmask","location":{"column":7,"line":593},"status":"passed","title":"can skip consumers with bitmask"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component can skip parents with bitmask bailout while updating their children","location":{"column":7,"line":692},"status":"passed","title":"can skip parents with bitmask bailout while updating their children"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component does not re-render if there's an update in a child","location":{"column":7,"line":813},"status":"passed","title":"does not re-render if there's an update in a child"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component consumer bails out if value is unchanged and something above bailed out","location":{"column":7,"line":853},"status":"passed","title":"consumer bails out if value is unchanged and something above bailed out"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component [GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component does not run into an infinite loop","location":{"column":7,"line":952},"status":"passed","title":"does not run into an infinite loop"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside function component does not skip some siblings","location":{"column":7,"line":990},"status":"passed","title":"does not skip some siblings"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component simple mount and update","location":{"column":7,"line":138},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component propagates through shouldComponentUpdate false","location":{"column":7,"line":168},"status":"passed","title":"propagates through shouldComponentUpdate false"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component consumers bail out if context value is the same","location":{"column":7,"line":237},"status":"passed","title":"consumers bail out if context value is the same"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component nested providers","location":{"column":7,"line":306},"status":"passed","title":"nested providers"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component should provide the correct (default) values to consumers outside of a provider","location":{"column":7,"line":362},"status":"passed","title":"should provide the correct (default) values to consumers outside of a provider"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component multiple consumers in different branches","location":{"column":7,"line":400},"status":"passed","title":"multiple consumers in different branches"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component compares context values with Object.is semantics","location":{"column":7,"line":471},"status":"passed","title":"compares context values with Object.is semantics"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component context unwinds when interrupted","location":{"column":7,"line":541},"status":"passed","title":"context unwinds when interrupted"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component can skip consumers with bitmask","location":{"column":7,"line":593},"status":"passed","title":"can skip consumers with bitmask"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component can skip parents with bitmask bailout while updating their children","location":{"column":7,"line":692},"status":"passed","title":"can skip parents with bitmask bailout while updating their children"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component does not re-render if there's an update in a child","location":{"column":7,"line":813},"status":"passed","title":"does not re-render if there's an update in a child"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component consumer bails out if value is unchanged and something above bailed out","location":{"column":7,"line":853},"status":"passed","title":"consumer bails out if value is unchanged and something above bailed out"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component [GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component does not run into an infinite loop","location":{"column":7,"line":952},"status":"passed","title":"does not run into an infinite loop"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside forwardRef component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside forwardRef component does not skip some siblings","location":{"column":7,"line":990},"status":"passed","title":"does not skip some siblings"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component simple mount and update","location":{"column":7,"line":138},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component propagates through shouldComponentUpdate false","location":{"column":7,"line":168},"status":"passed","title":"propagates through shouldComponentUpdate false"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component consumers bail out if context value is the same","location":{"column":7,"line":237},"status":"passed","title":"consumers bail out if context value is the same"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component nested providers","location":{"column":7,"line":306},"status":"passed","title":"nested providers"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component should provide the correct (default) values to consumers outside of a provider","location":{"column":7,"line":362},"status":"passed","title":"should provide the correct (default) values to consumers outside of a provider"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component multiple consumers in different branches","location":{"column":7,"line":400},"status":"passed","title":"multiple consumers in different branches"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component compares context values with Object.is semantics","location":{"column":7,"line":471},"status":"passed","title":"compares context values with Object.is semantics"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component context unwinds when interrupted","location":{"column":7,"line":541},"status":"passed","title":"context unwinds when interrupted"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component can skip consumers with bitmask","location":{"column":7,"line":593},"status":"passed","title":"can skip consumers with bitmask"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component can skip parents with bitmask bailout while updating their children","location":{"column":7,"line":692},"status":"passed","title":"can skip parents with bitmask bailout while updating their children"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component does not re-render if there's an update in a child","location":{"column":7,"line":813},"status":"passed","title":"does not re-render if there's an update in a child"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component consumer bails out if value is unchanged and something above bailed out","location":{"column":7,"line":853},"status":"passed","title":"consumer bails out if value is unchanged and something above bailed out"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component [GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component does not run into an infinite loop","location":{"column":7,"line":952},"status":"passed","title":"does not run into an infinite loop"},{"ancestorTitles":["ReactNewContext","reading context with useContext inside memoized function component"],"failureMessages":[],"fullName":"ReactNewContext reading context with useContext inside memoized function component does not skip some siblings","location":{"column":7,"line":990},"status":"passed","title":"does not skip some siblings"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component simple mount and update","location":{"column":7,"line":138},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component propagates through shouldComponentUpdate false","location":{"column":7,"line":168},"status":"passed","title":"propagates through shouldComponentUpdate false"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component consumers bail out if context value is the same","location":{"column":7,"line":237},"status":"passed","title":"consumers bail out if context value is the same"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component nested providers","location":{"column":7,"line":306},"status":"passed","title":"nested providers"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component should provide the correct (default) values to consumers outside of a provider","location":{"column":7,"line":362},"status":"passed","title":"should provide the correct (default) values to consumers outside of a provider"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component multiple consumers in different branches","location":{"column":7,"line":400},"status":"passed","title":"multiple consumers in different branches"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component compares context values with Object.is semantics","location":{"column":7,"line":471},"status":"passed","title":"compares context values with Object.is semantics"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component context unwinds when interrupted","location":{"column":7,"line":541},"status":"passed","title":"context unwinds when interrupted"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component can skip consumers with bitmask","location":{"column":7,"line":593},"status":"passed","title":"can skip consumers with bitmask"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component can skip parents with bitmask bailout while updating their children","location":{"column":7,"line":692},"status":"passed","title":"can skip parents with bitmask bailout while updating their children"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component does not re-render if there's an update in a child","location":{"column":7,"line":813},"status":"passed","title":"does not re-render if there's an update in a child"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component consumer bails out if value is unchanged and something above bailed out","location":{"column":7,"line":853},"status":"passed","title":"consumer bails out if value is unchanged and something above bailed out"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component [GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component does not run into an infinite loop","location":{"column":7,"line":952},"status":"passed","title":"does not run into an infinite loop"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside class component does not skip some siblings","location":{"column":7,"line":990},"status":"passed","title":"does not skip some siblings"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component simple mount and update","location":{"column":7,"line":138},"status":"passed","title":"simple mount and update"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component propagates through shouldComponentUpdate false","location":{"column":7,"line":168},"status":"passed","title":"propagates through shouldComponentUpdate false"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component consumers bail out if context value is the same","location":{"column":7,"line":237},"status":"passed","title":"consumers bail out if context value is the same"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component nested providers","location":{"column":7,"line":306},"status":"passed","title":"nested providers"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component should provide the correct (default) values to consumers outside of a provider","location":{"column":7,"line":362},"status":"passed","title":"should provide the correct (default) values to consumers outside of a provider"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component multiple consumers in different branches","location":{"column":7,"line":400},"status":"passed","title":"multiple consumers in different branches"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component compares context values with Object.is semantics","location":{"column":7,"line":471},"status":"passed","title":"compares context values with Object.is semantics"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component context unwinds when interrupted","location":{"column":7,"line":541},"status":"passed","title":"context unwinds when interrupted"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component can skip consumers with bitmask","location":{"column":7,"line":593},"status":"passed","title":"can skip consumers with bitmask"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component can skip parents with bitmask bailout while updating their children","location":{"column":7,"line":692},"status":"passed","title":"can skip parents with bitmask bailout while updating their children"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component does not re-render if there's an update in a child","location":{"column":7,"line":813},"status":"passed","title":"does not re-render if there's an update in a child"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component consumer bails out if value is unchanged and something above bailed out","location":{"column":7,"line":853},"status":"passed","title":"consumer bails out if value is unchanged and something above bailed out"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component [GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] context consumer doesn't bail out inside hidden subtree"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component does not run into an infinite loop","location":{"column":7,"line":952},"status":"passed","title":"does not run into an infinite loop"},{"ancestorTitles":["ReactNewContext","reading context with readContext(Context) inside pure class component"],"failureMessages":[],"fullName":"ReactNewContext reading context with readContext(Context) inside pure class component does not skip some siblings","location":{"column":7,"line":990},"status":"passed","title":"does not skip some siblings"},{"ancestorTitles":["ReactNewContext","Context.Provider"],"failureMessages":[],"fullName":"ReactNewContext Context.Provider warns if calculateChangedBits returns larger than a 31-bit integer","location":{"column":5,"line":1065},"status":"passed","title":"warns if calculateChangedBits returns larger than a 31-bit integer"},{"ancestorTitles":["ReactNewContext","Context.Provider"],"failureMessages":[],"fullName":"ReactNewContext Context.Provider warns if no value prop provided","location":{"column":5,"line":1086},"status":"passed","title":"warns if no value prop provided"},{"ancestorTitles":["ReactNewContext","Context.Provider"],"failureMessages":[],"fullName":"ReactNewContext Context.Provider warns if multiple renderers concurrently render the same context","location":{"column":5,"line":1101},"status":"passed","title":"warns if multiple renderers concurrently render the same context"},{"ancestorTitles":["ReactNewContext","Context.Provider"],"failureMessages":[],"fullName":"ReactNewContext Context.Provider provider bails out if children and value are unchanged (like sCU)","location":{"column":5,"line":1141},"status":"passed","title":"provider bails out if children and value are unchanged (like sCU)"},{"ancestorTitles":["ReactNewContext","Context.Provider"],"failureMessages":[],"fullName":"ReactNewContext Context.Provider provider does not bail out if legacy context changed above","location":{"column":5,"line":1172},"status":"passed","title":"provider does not bail out if legacy context changed above"},{"ancestorTitles":["ReactNewContext","Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext Context.Consumer warns if child is not a function","location":{"column":5,"line":1247},"status":"passed","title":"warns if child is not a function"},{"ancestorTitles":["ReactNewContext","Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext Context.Consumer can read other contexts inside consumer render prop","location":{"column":5,"line":1260},"status":"passed","title":"can read other contexts inside consumer render prop"},{"ancestorTitles":["ReactNewContext","Context.Consumer"],"failureMessages":[],"fullName":"ReactNewContext Context.Consumer consumer does not bail out if there were no bailouts above it","location":{"column":5,"line":1316},"status":"passed","title":"consumer does not bail out if there were no bailouts above it"},{"ancestorTitles":["ReactNewContext","readContext"],"failureMessages":[],"fullName":"ReactNewContext readContext can read the same context multiple times in the same function","location":{"column":5,"line":1354},"status":"passed","title":"can read the same context multiple times in the same function"},{"ancestorTitles":["ReactNewContext","readContext"],"failureMessages":[],"fullName":"ReactNewContext readContext does not bail out if there were no bailouts above it","location":{"column":5,"line":1450},"status":"passed","title":"does not bail out if there were no bailouts above it"},{"ancestorTitles":["ReactNewContext","readContext"],"failureMessages":[],"fullName":"ReactNewContext readContext warns when reading context inside render phase class setState updater","location":{"column":5,"line":1492},"status":"passed","title":"warns when reading context inside render phase class setState updater"},{"ancestorTitles":["ReactNewContext","useContext"],"failureMessages":[],"fullName":"ReactNewContext useContext warns on array.map(useContext)","location":{"column":5,"line":1516},"status":"passed","title":"warns on array.map(useContext)"},{"ancestorTitles":["ReactNewContext","useContext"],"failureMessages":[],"fullName":"ReactNewContext useContext throws when used in a class component","location":{"column":5,"line":1532},"status":"passed","title":"throws when used in a class component"},{"ancestorTitles":["ReactNewContext","useContext"],"failureMessages":[],"fullName":"ReactNewContext useContext warns when passed a consumer","location":{"column":5,"line":1550},"status":"passed","title":"warns when passed a consumer"},{"ancestorTitles":["ReactNewContext","useContext"],"failureMessages":[],"fullName":"ReactNewContext useContext warns when passed a provider","location":{"column":5,"line":1563},"status":"passed","title":"warns when passed a provider"},{"ancestorTitles":["ReactNewContext","useContext"],"failureMessages":[],"fullName":"ReactNewContext useContext does not bail out if there were no bailouts above it","location":{"column":5,"line":1581},"status":"passed","title":"does not bail out if there were no bailouts above it"},{"ancestorTitles":["ReactNewContext"],"failureMessages":[],"fullName":"ReactNewContext unwinds after errors in complete phase","location":{"column":3,"line":1622},"status":"passed","title":"unwinds after errors in complete phase"},{"ancestorTitles":["ReactNewContext","fuzz test"],"failureMessages":[],"fullName":"ReactNewContext fuzz test hard-coded tests","location":{"column":5,"line":1825},"status":"passed","title":"hard-coded tests"},{"ancestorTitles":["ReactNewContext","fuzz test"],"failureMessages":[],"fullName":"ReactNewContext fuzz test generated tests","location":{"column":5,"line":1830},"status":"passed","title":"generated tests"},{"ancestorTitles":["ReactNewContext"],"failureMessages":[],"fullName":"ReactNewContext should warn with an error message when using context as a consumer in DEV","location":{"column":3,"line":1852},"status":"passed","title":"should warn with an error message when using context as a consumer in DEV"},{"ancestorTitles":["ReactNewContext"],"failureMessages":[],"fullName":"ReactNewContext should not warn when using Consumer from React < 16.6 with newer renderer","location":{"column":3,"line":1878},"status":"passed","title":"should not warn when using Consumer from React < 16.6 with newer renderer"},{"ancestorTitles":["ReactNewContext"],"failureMessages":[],"fullName":"ReactNewContext should warn with an error message when using nested context consumers in DEV","location":{"column":3,"line":1899},"status":"passed","title":"should warn with an error message when using nested context consumers in DEV"},{"ancestorTitles":["ReactNewContext"],"failureMessages":[],"fullName":"ReactNewContext should warn with an error message when using Context.Consumer.Provider DEV","location":{"column":3,"line":1924},"status":"passed","title":"should warn with an error message when using Context.Consumer.Provider DEV"}],"endTime":1639318968160,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactNewContext-test.js","startTime":1639318960974,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTopLevelText"],"failureMessages":[],"fullName":"ReactTopLevelText should render a component returning strings directly from render","location":{"column":3,"line":27},"status":"passed","title":"should render a component returning strings directly from render"},{"ancestorTitles":["ReactTopLevelText"],"failureMessages":[],"fullName":"ReactTopLevelText should render a component returning numbers directly from render","location":{"column":3,"line":34},"status":"passed","title":"should render a component returning numbers directly from render"}],"endTime":1639318968463,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactTopLevelText-test.js","startTime":1639318968227,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useMutableSourceHydration"],"failureMessages":[],"fullName":"useMutableSourceHydration [GATED, SHOULD FAIL] should render and hydrate","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render and hydrate"},{"ancestorTitles":["useMutableSourceHydration"],"failureMessages":[],"fullName":"useMutableSourceHydration [GATED, SHOULD FAIL] should detect a tear before hydrating a component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should detect a tear before hydrating a component"},{"ancestorTitles":["useMutableSourceHydration"],"failureMessages":[],"fullName":"useMutableSourceHydration [GATED, SHOULD FAIL] should detect a tear between hydrating components","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should detect a tear between hydrating components"},{"ancestorTitles":["useMutableSourceHydration"],"failureMessages":[],"fullName":"useMutableSourceHydration [GATED, SHOULD FAIL] should detect a tear between hydrating components reading from different parts of a source","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should detect a tear between hydrating components reading from different parts of a source"},{"ancestorTitles":["useMutableSourceHydration"],"failureMessages":[],"fullName":"useMutableSourceHydration [GATED, SHOULD FAIL] should detect a tear during a higher priority interruption","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should detect a tear during a higher priority interruption"}],"endTime":1639318969007,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/useMutableSourceHydration-test.js","startTime":1639318968529,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactBlocks"],"failureMessages":[],"fullName":"ReactBlocks [GATED, SHOULD FAIL] renders a simple component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] renders a simple component"},{"ancestorTitles":["ReactBlocks"],"failureMessages":[],"fullName":"ReactBlocks [GATED, SHOULD FAIL] prints the name of the render function in warnings","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] prints the name of the render function in warnings"},{"ancestorTitles":["ReactBlocks"],"failureMessages":[],"fullName":"ReactBlocks [GATED, SHOULD FAIL] renders a component with a suspending load","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] renders a component with a suspending load"},{"ancestorTitles":["ReactBlocks"],"failureMessages":[],"fullName":"ReactBlocks [GATED, SHOULD FAIL] does not support a lazy wrapper around a chunk","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not support a lazy wrapper around a chunk"},{"ancestorTitles":["ReactBlocks"],"failureMessages":[],"fullName":"ReactBlocks [GATED, SHOULD FAIL] can receive updated data for the same component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can receive updated data for the same component"},{"ancestorTitles":["ReactBlocks"],"failureMessages":[],"fullName":"ReactBlocks [GATED, SHOULD FAIL] does not render stale data after ping","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not render stale data after ping"},{"ancestorTitles":["ReactBlocks"],"failureMessages":[],"fullName":"ReactBlocks [GATED, SHOULD FAIL] does not render stale data after ping and setState","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not render stale data after ping and setState"}],"endTime":1639318969500,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactBlocks-test.js","startTime":1639318969068,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspenseFuzz"],"failureMessages":[],"fullName":"ReactSuspenseFuzz basic cases","location":{"column":3,"line":307},"status":"passed","title":"basic cases"},{"ancestorTitles":["ReactSuspenseFuzz"],"failureMessages":[],"fullName":"ReactSuspenseFuzz generative tests (random seed: default)","location":{"column":3,"line":321},"status":"passed","title":"generative tests (random seed: default)"},{"ancestorTitles":["ReactSuspenseFuzz","hard-coded cases"],"failureMessages":[],"fullName":"ReactSuspenseFuzz hard-coded cases 1","location":{"column":5,"line":348},"status":"passed","title":"1"},{"ancestorTitles":["ReactSuspenseFuzz","hard-coded cases"],"failureMessages":[],"fullName":"ReactSuspenseFuzz hard-coded cases 2","location":{"column":5,"line":369},"status":"passed","title":"2"},{"ancestorTitles":["ReactSuspenseFuzz","hard-coded cases"],"failureMessages":[],"fullName":"ReactSuspenseFuzz hard-coded cases 3","location":{"column":5,"line":387},"status":"passed","title":"3"}],"endTime":1639318977989,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactSuspenseFuzz-test.internal.js","startTime":1639318969575,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFiberFundamental","NoopRenderer"],"failureMessages":[],"fullName":"ReactFiberFundamental NoopRenderer [GATED, SHOULD FAIL] should render a simple fundamental component with a single child","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render a simple fundamental component with a single child"},{"ancestorTitles":["ReactFiberFundamental","NoopTestRenderer"],"failureMessages":[],"fullName":"ReactFiberFundamental NoopTestRenderer [GATED, SHOULD FAIL] should render a simple fundamental component with a single child","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render a simple fundamental component with a single child"},{"ancestorTitles":["ReactFiberFundamental","ReactDOM"],"failureMessages":[],"fullName":"ReactFiberFundamental ReactDOM [GATED, SHOULD FAIL] should render a simple fundamental component with a single child","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render a simple fundamental component with a single child"},{"ancestorTitles":["ReactFiberFundamental","ReactDOM"],"failureMessages":[],"fullName":"ReactFiberFundamental ReactDOM [GATED, SHOULD FAIL] should render a simple fundamental component without reconcileChildren","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render a simple fundamental component without reconcileChildren"},{"ancestorTitles":["ReactFiberFundamental","ReactDOMServer"],"failureMessages":[],"fullName":"ReactFiberFundamental ReactDOMServer [GATED, SHOULD FAIL] should render a simple fundamental component with a single child","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render a simple fundamental component with a single child"},{"ancestorTitles":["ReactFiberFundamental","ReactDOMServer"],"failureMessages":[],"fullName":"ReactFiberFundamental ReactDOMServer [GATED, SHOULD FAIL] should render a simple fundamental component without reconcileChildren","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should render a simple fundamental component without reconcileChildren"}],"endTime":1639318978456,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactFiberFundamental-test.internal.js","startTime":1639318978058,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalTriangle","single root"],"failureMessages":[],"fullName":"ReactIncrementalTriangle single root hard-coded tests","location":{"column":5,"line":463},"status":"passed","title":"hard-coded tests"},{"ancestorTitles":["ReactIncrementalTriangle","single root"],"failureMessages":[],"fullName":"ReactIncrementalTriangle single root generative tests","location":{"column":5,"line":476},"status":"passed","title":"generative tests"},{"ancestorTitles":["ReactIncrementalTriangle","multiple roots"],"failureMessages":[],"fullName":"ReactIncrementalTriangle multiple roots hard-coded tests","location":{"column":5,"line":548},"status":"passed","title":"hard-coded tests"},{"ancestorTitles":["ReactIncrementalTriangle","multiple roots"],"failureMessages":[],"fullName":"ReactIncrementalTriangle multiple roots generative tests","location":{"column":5,"line":567},"status":"passed","title":"generative tests"}],"endTime":1639318989796,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalTriangle-test.js","startTime":1639318978529,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ErrorBoundaryReconciliation","concurrent"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation concurrent componentDidCatch can recover by rendering an element of the same type","location":{"column":7,"line":78},"status":"passed","title":"componentDidCatch can recover by rendering an element of the same type"},{"ancestorTitles":["ErrorBoundaryReconciliation","concurrent"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation concurrent componentDidCatch can recover by rendering an element of a different type","location":{"column":7,"line":81},"status":"passed","title":"componentDidCatch can recover by rendering an element of a different type"},{"ancestorTitles":["ErrorBoundaryReconciliation","concurrent"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation concurrent getDerivedStateFromError can recover by rendering an element of the same type","location":{"column":7,"line":84},"status":"passed","title":"getDerivedStateFromError can recover by rendering an element of the same type"},{"ancestorTitles":["ErrorBoundaryReconciliation","concurrent"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation concurrent getDerivedStateFromError can recover by rendering an element of a different type","location":{"column":7,"line":87},"status":"passed","title":"getDerivedStateFromError can recover by rendering an element of a different type"},{"ancestorTitles":["ErrorBoundaryReconciliation","sync"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation sync componentDidCatch can recover by rendering an element of the same type","location":{"column":7,"line":78},"status":"passed","title":"componentDidCatch can recover by rendering an element of the same type"},{"ancestorTitles":["ErrorBoundaryReconciliation","sync"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation sync componentDidCatch can recover by rendering an element of a different type","location":{"column":7,"line":81},"status":"passed","title":"componentDidCatch can recover by rendering an element of a different type"},{"ancestorTitles":["ErrorBoundaryReconciliation","sync"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation sync getDerivedStateFromError can recover by rendering an element of the same type","location":{"column":7,"line":84},"status":"passed","title":"getDerivedStateFromError can recover by rendering an element of the same type"},{"ancestorTitles":["ErrorBoundaryReconciliation","sync"],"failureMessages":[],"fullName":"ErrorBoundaryReconciliation sync getDerivedStateFromError can recover by rendering an element of a different type","location":{"column":7,"line":87},"status":"passed","title":"getDerivedStateFromError can recover by rendering an element of a different type"}],"endTime":1639318990457,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ErrorBoundaryReconciliation-test.internal.js","startTime":1639318989870,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should not log anything for sync render without suspends or state updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not log anything for sync render without suspends or state updates"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should not log anything for concurrent render without suspends or state updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not log anything for concurrent render without suspends or state updates"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log sync render with suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log sync render with suspense"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log sync render with CPU suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log sync render with CPU suspense"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log concurrent render with suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log concurrent render with suspense"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log concurrent render with CPU suspense","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log concurrent render with CPU suspense"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log cascading class component updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log cascading class component updates"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log render phase state updates for class component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log render phase state updates for class component"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log cascading layout updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log cascading layout updates"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log cascading passive updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log cascading passive updates"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log render phase updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log render phase updates"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should log when user code logs","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log when user code logs"},{"ancestorTitles":["DebugTracing"],"failureMessages":[],"fullName":"DebugTracing [GATED, SHOULD FAIL] should not log anything outside of a unstable_DebugTracingMode subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not log anything outside of a unstable_DebugTracingMode subtree"}],"endTime":1639318991284,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js","startTime":1639318990525,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense suspends rendering and continues later","location":{"column":3,"line":102},"status":"passed","title":"suspends rendering and continues later"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense suspends siblings and later recovers each independently","location":{"column":3,"line":159},"status":"passed","title":"suspends siblings and later recovers each independently"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense interrupts current render if promise resolves before current render phase","location":{"column":3,"line":200},"status":"passed","title":"interrupts current render if promise resolves before current render phase"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense interrupts current render if something already suspended with a delay, and then subsequently there's a lower priority update","location":{"column":3,"line":273},"status":"passed","title":"interrupts current render if something already suspended with a delay, and then subsequently there's a lower priority update"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense [GATED, SHOULD FAIL] interrupts current render when something suspends with a delay and we've already skipped over a lower priority update in a parent","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] interrupts current render when something suspends with a delay and we've already skipped over a lower priority update in a parent"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense [GATED, SHOULD FAIL] interrupts current render when something suspends with a delay and we've already bailed out lower priority update in a parent","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] interrupts current render when something suspends with a delay and we've already bailed out lower priority update in a parent"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense interrupts current render when something suspends with a delay, and a parent received an update after it completed","location":{"column":3,"line":492},"status":"passed","title":"interrupts current render when something suspends with a delay, and a parent received an update after it completed"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense mounts a lazy class component in non-concurrent mode","location":{"column":3,"line":546},"status":"passed","title":"mounts a lazy class component in non-concurrent mode"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense only captures if `fallback` is defined","location":{"column":3,"line":580},"status":"passed","title":"only captures if `fallback` is defined"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense throws if tree suspends and none of the Suspense ancestors have a fallback","location":{"column":3,"line":609},"status":"passed","title":"throws if tree suspends and none of the Suspense ancestors have a fallback"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense updates memoized child of suspense component when context updates (simple memo)","location":{"column":3,"line":625},"status":"passed","title":"updates memoized child of suspense component when context updates (simple memo)"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense updates memoized child of suspense component when context updates (manual memo)","location":{"column":3,"line":679},"status":"passed","title":"updates memoized child of suspense component when context updates (manual memo)"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense updates memoized child of suspense component when context updates (function)","location":{"column":3,"line":738},"status":"passed","title":"updates memoized child of suspense component when context updates (function)"},{"ancestorTitles":["ReactSuspense"],"failureMessages":[],"fullName":"ReactSuspense updates memoized child of suspense component when context updates (forwardRef)","location":{"column":3,"line":795},"status":"passed","title":"updates memoized child of suspense component when context updates (forwardRef)"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode a mounted class component can suspend without losing state","location":{"column":5,"line":853},"status":"passed","title":"a mounted class component can suspend without losing state"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode bails out on timed-out primary children even if they receive an update","location":{"column":5,"line":962},"status":"passed","title":"bails out on timed-out primary children even if they receive an update"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode when updating a timed-out tree, always retries the suspended component","location":{"column":5,"line":1014},"status":"passed","title":"when updating a timed-out tree, always retries the suspended component"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode suspends in a class that has componentWillUnmount and is then deleted","location":{"column":5,"line":1081},"status":"passed","title":"suspends in a class that has componentWillUnmount and is then deleted"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode suspends in a component that also contains useEffect","location":{"column":5,"line":1120},"status":"passed","title":"suspends in a component that also contains useEffect"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode retries when an update is scheduled on a timed out tree","location":{"column":5,"line":1160},"status":"passed","title":"retries when an update is scheduled on a timed out tree"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode does not remount the fallback while suspended children resolve in legacy mode","location":{"column":5,"line":1209},"status":"passed","title":"does not remount the fallback while suspended children resolve in legacy mode"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode does not get stuck with fallback in concurrent mode for a large delay","location":{"column":5,"line":1265},"status":"passed","title":"does not get stuck with fallback in concurrent mode for a large delay"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode reuses effects, including deletions, from the suspended tree","location":{"column":5,"line":1293},"status":"passed","title":"reuses effects, including deletions, from the suspended tree"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode does not warn if an mounted component is pinged","location":{"column":5,"line":1349},"status":"passed","title":"does not warn if an mounted component is pinged"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode memoizes promise listeners per thread ID to prevent redundant renders","location":{"column":5,"line":1395},"status":"passed","title":"memoizes promise listeners per thread ID to prevent redundant renders"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode should call onInteractionScheduledWorkCompleted after suspending","location":{"column":5,"line":1451},"status":"passed","title":"should call onInteractionScheduledWorkCompleted after suspending"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode #14162","location":{"column":5,"line":1521},"status":"passed","title":"#14162"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode updates memoized child of suspense component when context updates (simple memo)","location":{"column":5,"line":1559},"status":"passed","title":"updates memoized child of suspense component when context updates (simple memo)"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode updates memoized child of suspense component when context updates (manual memo)","location":{"column":5,"line":1611},"status":"passed","title":"updates memoized child of suspense component when context updates (manual memo)"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode updates memoized child of suspense component when context updates (function)","location":{"column":5,"line":1668},"status":"passed","title":"updates memoized child of suspense component when context updates (function)"},{"ancestorTitles":["ReactSuspense","outside concurrent mode"],"failureMessages":[],"fullName":"ReactSuspense outside concurrent mode updates memoized child of suspense component when context updates (forwardRef)","location":{"column":5,"line":1724},"status":"passed","title":"updates memoized child of suspense component when context updates (forwardRef)"}],"endTime":1639318993383,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js","startTime":1639318991359,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling schedules and flushes deferred work","location":{"column":3,"line":30},"status":"passed","title":"schedules and flushes deferred work"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling searches for work on other roots once the current root completes","location":{"column":3,"line":38},"status":"passed","title":"searches for work on other roots once the current root completes"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling schedules top-level updates in order of priority","location":{"column":3,"line":50},"status":"passed","title":"schedules top-level updates in order of priority"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling schedules top-level updates with same priority in order of insertion","location":{"column":3,"line":73},"status":"passed","title":"schedules top-level updates with same priority in order of insertion"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling works on deferred roots in the order they were scheduled","location":{"column":3,"line":88},"status":"passed","title":"works on deferred roots in the order they were scheduled"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling schedules sync updates when inside componentDidMount/Update","location":{"column":3,"line":135},"status":"passed","title":"schedules sync updates when inside componentDidMount/Update"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling can opt-in to async scheduling inside componentDidMount/Update","location":{"column":3,"line":200},"status":"passed","title":"can opt-in to async scheduling inside componentDidMount/Update"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling performs Task work even after time runs out","location":{"column":3,"line":272},"status":"passed","title":"performs Task work even after time runs out"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling can opt-out of batching using unbatchedUpdates","location":{"column":3,"line":301},"status":"passed","title":"can opt-out of batching using unbatchedUpdates"},{"ancestorTitles":["ReactIncrementalScheduling"],"failureMessages":[],"fullName":"ReactIncrementalScheduling nested updates are always deferred, even inside unbatchedUpdates","location":{"column":3,"line":323},"status":"passed","title":"nested updates are always deferred, even inside unbatchedUpdates"}],"endTime":1639318994095,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalScheduling-test.js","startTime":1639318993445,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalReflection"],"failureMessages":[],"fullName":"ReactIncrementalReflection handles isMounted even when the initial render is deferred","location":{"column":3,"line":37},"status":"passed","title":"handles isMounted even when the initial render is deferred"},{"ancestorTitles":["ReactIncrementalReflection"],"failureMessages":[],"fullName":"ReactIncrementalReflection handles isMounted when an unmount is deferred","location":{"column":3,"line":84},"status":"passed","title":"handles isMounted when an unmount is deferred"},{"ancestorTitles":["ReactIncrementalReflection"],"failureMessages":[],"fullName":"ReactIncrementalReflection finds no node before insertion and correct node before deletion","location":{"column":3,"line":137},"status":"passed","title":"finds no node before insertion and correct node before deletion"}],"endTime":1639318994492,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalReflection-test.js","startTime":1639318994157,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalErrorLogging"],"failureMessages":[],"fullName":"ReactIncrementalErrorLogging should log errors that occur during the begin phase","location":{"column":3,"line":38},"status":"passed","title":"should log errors that occur during the begin phase"},{"ancestorTitles":["ReactIncrementalErrorLogging"],"failureMessages":[],"fullName":"ReactIncrementalErrorLogging should log errors that occur during the commit phase","location":{"column":3,"line":75},"status":"passed","title":"should log errors that occur during the commit phase"},{"ancestorTitles":["ReactIncrementalErrorLogging"],"failureMessages":[],"fullName":"ReactIncrementalErrorLogging should ignore errors thrown in log method to prevent cycle","location":{"column":3,"line":111},"status":"passed","title":"should ignore errors thrown in log method to prevent cycle"},{"ancestorTitles":["ReactIncrementalErrorLogging"],"failureMessages":[],"fullName":"ReactIncrementalErrorLogging resets instance variables before unmounting failed node","location":{"column":3,"line":154},"status":"passed","title":"resets instance variables before unmounting failed node"}],"endTime":1639318994919,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalErrorLogging-test.js","startTime":1639318994553,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactSuspensePlaceholder times out children that are already hidden","location":{"column":3,"line":109},"status":"passed","title":"times out children that are already hidden"},{"ancestorTitles":["ReactSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactSuspensePlaceholder times out text nodes","location":{"column":3,"line":183},"status":"passed","title":"times out text nodes"},{"ancestorTitles":["ReactSuspensePlaceholder"],"failureMessages":[],"fullName":"ReactSuspensePlaceholder preserves host context for text nodes","location":{"column":3,"line":229},"status":"passed","title":"preserves host context for text nodes"},{"ancestorTitles":["ReactSuspensePlaceholder","profiler durations","when suspending during mount"],"failureMessages":[],"fullName":"ReactSuspensePlaceholder profiler durations when suspending during mount properly accounts for base durations when a suspended times out in a legacy tree","location":{"column":7,"line":313},"status":"passed","title":"properly accounts for base durations when a suspended times out in a legacy tree"},{"ancestorTitles":["ReactSuspensePlaceholder","profiler durations","when suspending during mount"],"failureMessages":[],"fullName":"ReactSuspensePlaceholder profiler durations when suspending during mount properly accounts for base durations when a suspended times out in a concurrent tree","location":{"column":7,"line":345},"status":"passed","title":"properly accounts for base durations when a suspended times out in a concurrent tree"},{"ancestorTitles":["ReactSuspensePlaceholder","profiler durations","when suspending during update"],"failureMessages":[],"fullName":"ReactSuspensePlaceholder profiler durations when suspending during update properly accounts for base durations when a suspended times out in a legacy tree","location":{"column":7,"line":381},"status":"passed","title":"properly accounts for base durations when a suspended times out in a legacy tree"},{"ancestorTitles":["ReactSuspensePlaceholder","profiler durations","when suspending during update"],"failureMessages":[],"fullName":"ReactSuspensePlaceholder profiler durations when suspending during update properly accounts for base durations when a suspended times out in a concurrent tree","location":{"column":7,"line":441},"status":"passed","title":"properly accounts for base durations when a suspended times out in a concurrent tree"}],"endTime":1639318995585,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactSuspensePlaceholder-test.internal.js","startTime":1639318994980,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactBlockingMode"],"failureMessages":[],"fullName":"ReactBlockingMode updates flush without yielding in the next event","location":{"column":3,"line":55},"status":"passed","title":"updates flush without yielding in the next event"},{"ancestorTitles":["ReactBlockingMode"],"failureMessages":[],"fullName":"ReactBlockingMode layout updates flush synchronously in same event","location":{"column":3,"line":74},"status":"passed","title":"layout updates flush synchronously in same event"},{"ancestorTitles":["ReactBlockingMode"],"failureMessages":[],"fullName":"ReactBlockingMode uses proper Suspense semantics, not legacy ones","location":{"column":3,"line":92},"status":"passed","title":"uses proper Suspense semantics, not legacy ones"},{"ancestorTitles":["ReactBlockingMode"],"failureMessages":[],"fullName":"ReactBlockingMode flushSync does not flush batched work","location":{"column":3,"line":126},"status":"passed","title":"flushSync does not flush batched work"}],"endTime":1639318996020,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactBatchedMode-test.internal.js","startTime":1639318995651,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration flush sync has correct priority","location":{"column":3,"line":69},"status":"passed","title":"flush sync has correct priority"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration has correct priority during rendering","location":{"column":3,"line":80},"status":"passed","title":"has correct priority during rendering"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration has correct priority when continuing a render after yielding","location":{"column":3,"line":101},"status":"passed","title":"has correct priority when continuing a render after yielding"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration layout effects have immediate priority","location":{"column":3,"line":132},"status":"passed","title":"layout effects have immediate priority"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration passive effects never have higher than normal priority","location":{"column":3,"line":153},"status":"passed","title":"passive effects never have higher than normal priority"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration passive effects have correct priority even if they are flushed early","location":{"column":3,"line":206},"status":"passed","title":"passive effects have correct priority even if they are flushed early"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration passive effect clean-up functions have correct priority even when component is deleted","location":{"column":3,"line":234},"status":"passed","title":"passive effect clean-up functions have correct priority even when component is deleted"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration passive effects are called before Normal-pri scheduled in layout effects","location":{"column":3,"line":279},"status":"passed","title":"passive effects are called before Normal-pri scheduled in layout effects"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration after completing a level of work, infers priority of the next batch based on its expiration time","location":{"column":3,"line":323},"status":"passed","title":"after completing a level of work, infers priority of the next batch based on its expiration time"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration requests a paint after committing","location":{"column":3,"line":341},"status":"passed","title":"requests a paint after committing"},{"ancestorTitles":["ReactSchedulerIntegration"],"failureMessages":[],"fullName":"ReactSchedulerIntegration [GATED, SHOULD FAIL] idle updates are not blocked by offscreen work","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] idle updates are not blocked by offscreen work"},{"ancestorTitles":["regression test: does not infinite loop if `shouldYield` returns true after a partial tree expires"],"failureMessages":[],"fullName":"regression test: does not infinite loop if `shouldYield` returns true after a partial tree expires using public APIs to trigger real world scenario","location":{"column":3,"line":457},"status":"passed","title":"using public APIs to trigger real world scenario"},{"ancestorTitles":["regression test: does not infinite loop if `shouldYield` returns true after a partial tree expires"],"failureMessages":[],"fullName":"regression test: does not infinite loop if `shouldYield` returns true after a partial tree expires mock Scheduler module to check if `shouldYield` is called","location":{"column":3,"line":497},"status":"passed","title":"mock Scheduler module to check if `shouldYield` is called"}],"endTime":1639318996880,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactSchedulerIntegration-test.js","startTime":1639318996082,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTracing"],"failureMessages":[],"fullName":"ReactTracing should error if profiling renderer and non-profiling scheduler/tracing bundles are combined","location":{"column":3,"line":14},"status":"passed","title":"should error if profiling renderer and non-profiling scheduler/tracing bundles are combined"}],"endTime":1639318997120,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactTracing-test.internal.js","startTime":1639318996940,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactOffscreen"],"failureMessages":[],"fullName":"ReactOffscreen [GATED, SHOULD FAIL] unstable-defer-without-hiding should never toggle the visibility of its children","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] unstable-defer-without-hiding should never toggle the visibility of its children"},{"ancestorTitles":["ReactOffscreen"],"failureMessages":[],"fullName":"ReactOffscreen [GATED, SHOULD FAIL] does not defer in legacy mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not defer in legacy mode"},{"ancestorTitles":["ReactOffscreen"],"failureMessages":[],"fullName":"ReactOffscreen [GATED, SHOULD FAIL] does not defer in blocking mode","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not defer in blocking mode"}],"endTime":1639318997531,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactOffscreen-test.js","startTime":1639318997186,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks useDebugValue throws when used in a class component","location":{"column":5,"line":39},"status":"passed","title":"useDebugValue throws when used in a class component"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks bails out in the render phase if all of the state is the same","location":{"column":3,"line":59},"status":"passed","title":"bails out in the render phase if all of the state is the same"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks bails out in render phase if all the state is the same and props bail out with memo","location":{"column":3,"line":168},"status":"passed","title":"bails out in render phase if all the state is the same and props bail out with memo"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns about setState second argument","location":{"column":3,"line":249},"status":"passed","title":"warns about setState second argument"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns about dispatch second argument","location":{"column":3,"line":283},"status":"passed","title":"warns about dispatch second argument"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks never bails out if context has changed","location":{"column":3,"line":317},"status":"passed","title":"never bails out if context has changed"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks can bail out without calling render phase (as an optimization) if queue is known to be empty","location":{"column":3,"line":404},"status":"passed","title":"can bail out without calling render phase (as an optimization) if queue is known to be empty"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks bails out multiple times in a row without entering render phase","location":{"column":3,"line":482},"status":"passed","title":"bails out multiple times in a row without entering render phase"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks can rebase on top of a previously skipped update","location":{"column":3,"line":542},"status":"passed","title":"can rebase on top of a previously skipped update"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns about variable number of dependencies","location":{"column":3,"line":602},"status":"passed","title":"warns about variable number of dependencies"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns if switching from dependencies to no dependencies","location":{"column":3,"line":625},"status":"passed","title":"warns if switching from dependencies to no dependencies"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns if deps is not an array","location":{"column":3,"line":652},"status":"passed","title":"warns if deps is not an array"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns if deps is not an array for useImperativeHandle","location":{"column":3,"line":713},"status":"passed","title":"warns if deps is not an array for useImperativeHandle"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks assumes useEffect clean-up function is either a function or undefined","location":{"column":3,"line":732},"status":"passed","title":"assumes useEffect clean-up function is either a function or undefined"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not forget render phase useState updates inside an effect","location":{"column":3,"line":768},"status":"passed","title":"does not forget render phase useState updates inside an effect"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not forget render phase useReducer updates inside an effect with hoisted reducer","location":{"column":3,"line":791},"status":"passed","title":"does not forget render phase useReducer updates inside an effect with hoisted reducer"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not forget render phase useReducer updates inside an effect with inline reducer","location":{"column":3,"line":815},"status":"passed","title":"does not forget render phase useReducer updates inside an effect with inline reducer"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns for bad useImperativeHandle first arg","location":{"column":3,"line":838},"status":"passed","title":"warns for bad useImperativeHandle first arg"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns for bad useImperativeHandle second arg","location":{"column":3,"line":860},"status":"passed","title":"warns for bad useImperativeHandle second arg"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks works with ReactDOMServer calls inside a component","location":{"column":3,"line":878},"status":"passed","title":"works with ReactDOMServer calls inside a component"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks throws when calling hooks inside .memo's compare function","location":{"column":3,"line":890},"status":"passed","title":"throws when calling hooks inside .memo's compare function"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when calling hooks inside useMemo","location":{"column":3,"line":931},"status":"passed","title":"warns when calling hooks inside useMemo"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when reading context inside useMemo","location":{"column":3,"line":944},"status":"passed","title":"warns when reading context inside useMemo"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when reading context inside useMemo after reading outside it","location":{"column":3,"line":962},"status":"passed","title":"warns when reading context inside useMemo after reading outside it"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks throws when reading context inside useEffect","location":{"column":3,"line":987},"status":"passed","title":"throws when reading context inside useEffect"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks throws when reading context inside useLayoutEffect","location":{"column":3,"line":1012},"status":"passed","title":"throws when reading context inside useLayoutEffect"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when reading context inside useReducer","location":{"column":3,"line":1032},"status":"passed","title":"warns when reading context inside useReducer"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when reading context inside eager useReducer","location":{"column":3,"line":1056},"status":"passed","title":"warns when reading context inside eager useReducer"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when calling hooks inside useReducer","location":{"column":3,"line":1094},"status":"passed","title":"warns when calling hooks inside useReducer"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when calling hooks inside useState's initialize function","location":{"column":3,"line":1127},"status":"passed","title":"warns when calling hooks inside useState's initialize function"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks resets warning internal state when interrupted by an error","location":{"column":3,"line":1141},"status":"passed","title":"resets warning internal state when interrupted by an error"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks warns when reading context inside useMemo","location":{"column":3,"line":1223},"status":"passed","title":"warns when reading context inside useMemo"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks double-invokes components with Hooks in Strict Mode","location":{"column":3,"line":1241},"status":"passed","title":"double-invokes components with Hooks in Strict Mode"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks double-invokes useMemo in DEV StrictMode despite []","location":{"column":3,"line":1449},"status":"passed","title":"double-invokes useMemo in DEV StrictMode despite []"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (Callback, State) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (Callback, State) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (State) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (State) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (Context, Callback) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (Context, Callback) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (Callback) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (Callback) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (DebugValue, Context) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (DebugValue, Context) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (Context) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (Context) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (Effect, DebugValue) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (Effect, DebugValue) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (DebugValue) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (DebugValue) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (LayoutEffect, Effect) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (LayoutEffect, Effect) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (Effect) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (Effect) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (Memo, LayoutEffect) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (Memo, LayoutEffect) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (LayoutEffect) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (LayoutEffect) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (Reducer, Memo) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (Reducer, Memo) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (Memo) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (Memo) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (Ref, Reducer) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (Ref, Reducer) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (Reducer) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (Reducer) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (State, Ref) on subsequent renders","location":{"column":7,"line":1544},"status":"passed","title":"warns on using differently ordered hooks (State, Ref) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when more hooks (Ref) are used during update than mount","location":{"column":7,"line":1596},"status":"passed","title":"warns when more hooks (Ref) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (State) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (State) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (Callback) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (Callback) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (Effect) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (Effect) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (ImperativeHandle) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (ImperativeHandle) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (LayoutEffect) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (LayoutEffect) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (Memo) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (Memo) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (Reducer) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (Reducer) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns when fewer hooks (Ref) are used during update than mount","location":{"column":7,"line":1651},"status":"passed","title":"warns when fewer hooks (Ref) are used during update than mount"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering warns on using differently ordered hooks (useImperativeHandleHelper, useMemoHelper) on subsequent renders","location":{"column":5,"line":1677},"status":"passed","title":"warns on using differently ordered hooks (useImperativeHandleHelper, useMemoHelper) on subsequent renders"},{"ancestorTitles":["ReactHooks","hook ordering"],"failureMessages":[],"fullName":"ReactHooks hook ordering detects a bad hook order even if the component throws","location":{"column":5,"line":1723},"status":"passed","title":"detects a bad hook order even if the component throws"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not swallow original error when updating another component in render phase","location":{"column":3,"line":1759},"status":"passed","title":"does not swallow original error when updating another component in render phase"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not fire a false positive warning when previous effect unmounts the component","location":{"column":3,"line":1797},"status":"passed","title":"does not fire a false positive warning when previous effect unmounts the component"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not fire a false positive warning when suspending memo","location":{"column":3,"line":1849},"status":"passed","title":"does not fire a false positive warning when suspending memo"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not fire a false positive warning when suspending forwardRef","location":{"column":3,"line":1881},"status":"passed","title":"does not fire a false positive warning when suspending forwardRef"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks does not fire a false positive warning when suspending memo(forwardRef)","location":{"column":3,"line":1913},"status":"passed","title":"does not fire a false positive warning when suspending memo(forwardRef)"},{"ancestorTitles":["ReactHooks"],"failureMessages":[],"fullName":"ReactHooks resets hooks when an error is thrown in the middle of a list of hooks","location":{"column":3,"line":1945},"status":"passed","title":"resets hooks when an error is thrown in the middle of a list of hooks"}],"endTime":1639319001470,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactHooks-test.internal.js","startTime":1639318997605,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler should not mark if enableSchedulingProfiler is false","location":{"column":7,"line":283},"status":"passed","title":"should not mark if enableSchedulingProfiler is false"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should log React version on initialization","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should log React version on initialization"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark sync render without suspends or state updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark sync render without suspends or state updates"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark concurrent render without suspends or state updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark concurrent render without suspends or state updates"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark render yields","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark render yields"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark sync render with suspense that resolves","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark sync render with suspense that resolves"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark sync render with suspense that rejects","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark sync render with suspense that rejects"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark concurrent render with suspense that resolves","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark concurrent render with suspense that resolves"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark concurrent render with suspense that rejects","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark concurrent render with suspense that rejects"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark cascading class component state updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark cascading class component state updates"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark cascading class component force updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark cascading class component force updates"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark render phase state updates for class component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark render phase state updates for class component"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark render phase force updates for class component","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark render phase force updates for class component"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark cascading layout updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark cascading layout updates"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark cascading passive updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark cascading passive updates"},{"ancestorTitles":["SchedulingProfiler"],"failureMessages":[],"fullName":"SchedulingProfiler [GATED, SHOULD FAIL] should mark render phase updates","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should mark render phase updates"}],"endTime":1639319002349,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/SchedulingProfiler-test.internal.js","startTime":1639319001531,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspenseList"],"failureMessages":[],"fullName":"ReactSuspenseList appends rendering tasks to the end of the priority queue","location":{"column":3,"line":48},"status":"passed","title":"appends rendering tasks to the end of the priority queue"}],"endTime":1639319002626,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactDisableSchedulerTimeoutBasedOnReactExpirationTime-test.internal.js","startTime":1639319002416,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer skips CPU-bound trees on initial mount","location":{"column":3,"line":109},"status":"passed","title":"skips CPU-bound trees on initial mount"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer does not skip CPU-bound trees during updates","location":{"column":3,"line":146},"status":"passed","title":"does not skip CPU-bound trees during updates"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer suspend inside CPU-bound tree","location":{"column":3,"line":194},"status":"passed","title":"suspend inside CPU-bound tree"},{"ancestorTitles":["ReactSuspenseWithNoopRenderer"],"failureMessages":[],"fullName":"ReactSuspenseWithNoopRenderer nested CPU-bound trees","location":{"column":3,"line":243},"status":"passed","title":"nested CPU-bound trees"}],"endTime":1639319003090,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactCPUSuspense-test.js","startTime":1639319002693,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIncrementalErrorReplay-test"],"failureMessages":[],"fullName":"ReactIncrementalErrorReplay-test copies all keys when stashing potentially failing work","location":{"column":3,"line":16},"status":"passed","title":"copies all keys when stashing potentially failing work"}],"endTime":1639319003345,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactIncrementalErrorReplay-test.internal.js","startTime":1639319003152,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents double invoking for effects works properly","location":{"column":3,"line":27},"status":"passed","title":"double invoking for effects works properly"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents multiple effects are double invoked in the right order (all mounted, all unmounted, all remounted)","location":{"column":3,"line":82},"status":"passed","title":"multiple effects are double invoked in the right order (all mounted, all unmounted, all remounted)"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents multiple layout effects are double invoked in the right order (all mounted, all unmounted, all remounted)","location":{"column":3,"line":138},"status":"passed","title":"multiple layout effects are double invoked in the right order (all mounted, all unmounted, all remounted)"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents useEffect and useLayoutEffect is called twice when there is no unmount","location":{"column":3,"line":196},"status":"passed","title":"useEffect and useLayoutEffect is called twice when there is no unmount"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents passes the right context to class component lifecycles","location":{"column":3,"line":243},"status":"passed","title":"passes the right context to class component lifecycles"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents double invoking works for class components","location":{"column":3,"line":282},"status":"passed","title":"double invoking works for class components"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents double flushing passive effects only results in one double invoke","location":{"column":3,"line":328},"status":"passed","title":"double flushing passive effects only results in one double invoke"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents newly mounted components after initial mount get double invoked","location":{"column":3,"line":381},"status":"passed","title":"newly mounted components after initial mount get double invoked"},{"ancestorTitles":["ReactDoubleInvokeEvents"],"failureMessages":[],"fullName":"ReactDoubleInvokeEvents classes and functions are double invoked together correctly","location":{"column":3,"line":462},"status":"passed","title":"classes and functions are double invoked together correctly"}],"endTime":1639319004006,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-reconciler/src/__tests__/ReactDoubleInvokeEvents-test.internal.js","startTime":1639319003411,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring reloads function declarations","location":{"column":5,"line":138},"status":"passed","title":"reloads function declarations"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring reloads arrow functions","location":{"column":5,"line":169},"status":"passed","title":"reloads arrow functions"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring reloads a combination of memo and forwardRef","location":{"column":5,"line":200},"status":"passed","title":"reloads a combination of memo and forwardRef"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring reloads default export with named memo","location":{"column":5,"line":235},"status":"passed","title":"reloads default export with named memo"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring reloads HOCs if they return functions","location":{"column":5,"line":266},"status":"passed","title":"reloads HOCs if they return functions"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring resets state when renaming a state variable","location":{"column":5,"line":301},"status":"passed","title":"resets state when renaming a state variable"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring resets state when renaming a state variable in a HOC","location":{"column":5,"line":344},"status":"passed","title":"resets state when renaming a state variable in a HOC"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring resets state when renaming a state variable in a HOC with indirection","location":{"column":5,"line":405},"status":"passed","title":"resets state when renaming a state variable in a HOC with indirection"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring resets effects while preserving state","location":{"column":5,"line":472},"status":"passed","title":"resets effects while preserving state"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring does not get confused when custom hooks are reordered","location":{"column":5,"line":552},"status":"passed","title":"does not get confused when custom hooks are reordered"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring does not get confused when component is called early","location":{"column":5,"line":608},"status":"passed","title":"does not get confused when component is called early"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring does not get confused by Hooks defined inline","location":{"column":5,"line":688},"status":"passed","title":"does not get confused by Hooks defined inline"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring remounts component if custom hook it uses changes order","location":{"column":5,"line":731},"status":"passed","title":"remounts component if custom hook it uses changes order"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring does not lose the inferred arrow names","location":{"column":5,"line":828},"status":"passed","title":"does not lose the inferred arrow names"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring does not lose the inferred function names","location":{"column":5,"line":850},"status":"passed","title":"does not lose the inferred function names"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring resets state on every edit with @refresh reset annotation","location":{"column":5,"line":872},"status":"passed","title":"resets state on every edit with @refresh reset annotation"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring resets state when useState initial state is edited","location":{"column":5,"line":980},"status":"passed","title":"resets state when useState initial state is edited"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring resets state when useReducer initial state is edited","location":{"column":5,"line":1022},"status":"passed","title":"resets state when useReducer initial state is edited"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring remounts when switching export from function to class","location":{"column":5,"line":1062},"status":"passed","title":"remounts when switching export from function to class"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring remounts when switching export from class to function","location":{"column":5,"line":1138},"status":"passed","title":"remounts when switching export from class to function"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring remounts when wrapping export in a HOC","location":{"column":5,"line":1193},"status":"passed","title":"remounts when wrapping export in a HOC"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring remounts when wrapping export in memo()","location":{"column":5,"line":1264},"status":"passed","title":"remounts when wrapping export in memo()"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring remounts when wrapping export in forwardRef()","location":{"column":5,"line":1323},"status":"passed","title":"remounts when wrapping export in forwardRef()"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring remounts deprecated factory components","location":{"column":7,"line":1383},"status":"passed","title":"remounts deprecated factory components"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring with inline requires remounts component if custom hook it uses changes order on first edit","location":{"column":7,"line":1439},"status":"passed","title":"remounts component if custom hook it uses changes order on first edit"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring with inline requires remounts component if custom hook it uses changes order on second edit","location":{"column":7,"line":1509},"status":"passed","title":"remounts component if custom hook it uses changes order on second edit"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring with inline requires recovers if evaluating Hook list throws","location":{"column":7,"line":1592},"status":"passed","title":"recovers if evaluating Hook list throws"},{"ancestorTitles":["ReactFreshIntegration","with compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration with compiled destructuring with inline requires remounts component if custom hook it uses changes order behind an indirection","location":{"column":7,"line":1638},"status":"passed","title":"remounts component if custom hook it uses changes order behind an indirection"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring reloads function declarations","location":{"column":5,"line":138},"status":"passed","title":"reloads function declarations"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring reloads arrow functions","location":{"column":5,"line":169},"status":"passed","title":"reloads arrow functions"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring reloads a combination of memo and forwardRef","location":{"column":5,"line":200},"status":"passed","title":"reloads a combination of memo and forwardRef"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring reloads default export with named memo","location":{"column":5,"line":235},"status":"passed","title":"reloads default export with named memo"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring reloads HOCs if they return functions","location":{"column":5,"line":266},"status":"passed","title":"reloads HOCs if they return functions"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring resets state when renaming a state variable","location":{"column":5,"line":301},"status":"passed","title":"resets state when renaming a state variable"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring resets state when renaming a state variable in a HOC","location":{"column":5,"line":344},"status":"passed","title":"resets state when renaming a state variable in a HOC"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring resets state when renaming a state variable in a HOC with indirection","location":{"column":5,"line":405},"status":"passed","title":"resets state when renaming a state variable in a HOC with indirection"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring resets effects while preserving state","location":{"column":5,"line":472},"status":"passed","title":"resets effects while preserving state"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring does not get confused when custom hooks are reordered","location":{"column":5,"line":552},"status":"passed","title":"does not get confused when custom hooks are reordered"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring does not get confused when component is called early","location":{"column":5,"line":608},"status":"passed","title":"does not get confused when component is called early"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring does not get confused by Hooks defined inline","location":{"column":5,"line":688},"status":"passed","title":"does not get confused by Hooks defined inline"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring remounts component if custom hook it uses changes order","location":{"column":5,"line":731},"status":"passed","title":"remounts component if custom hook it uses changes order"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring does not lose the inferred arrow names","location":{"column":5,"line":828},"status":"passed","title":"does not lose the inferred arrow names"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring does not lose the inferred function names","location":{"column":5,"line":850},"status":"passed","title":"does not lose the inferred function names"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring resets state on every edit with @refresh reset annotation","location":{"column":5,"line":872},"status":"passed","title":"resets state on every edit with @refresh reset annotation"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring resets state when useState initial state is edited","location":{"column":5,"line":980},"status":"passed","title":"resets state when useState initial state is edited"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring resets state when useReducer initial state is edited","location":{"column":5,"line":1022},"status":"passed","title":"resets state when useReducer initial state is edited"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring remounts when switching export from function to class","location":{"column":5,"line":1062},"status":"passed","title":"remounts when switching export from function to class"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring remounts when switching export from class to function","location":{"column":5,"line":1138},"status":"passed","title":"remounts when switching export from class to function"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring remounts when wrapping export in a HOC","location":{"column":5,"line":1193},"status":"passed","title":"remounts when wrapping export in a HOC"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring remounts when wrapping export in memo()","location":{"column":5,"line":1264},"status":"passed","title":"remounts when wrapping export in memo()"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring remounts when wrapping export in forwardRef()","location":{"column":5,"line":1323},"status":"passed","title":"remounts when wrapping export in forwardRef()"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring remounts deprecated factory components","location":{"column":7,"line":1383},"status":"passed","title":"remounts deprecated factory components"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring with inline requires remounts component if custom hook it uses changes order on first edit","location":{"column":7,"line":1439},"status":"passed","title":"remounts component if custom hook it uses changes order on first edit"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring with inline requires remounts component if custom hook it uses changes order on second edit","location":{"column":7,"line":1509},"status":"passed","title":"remounts component if custom hook it uses changes order on second edit"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring with inline requires recovers if evaluating Hook list throws","location":{"column":7,"line":1592},"status":"passed","title":"recovers if evaluating Hook list throws"},{"ancestorTitles":["ReactFreshIntegration","without compiled destructuring","with inline requires"],"failureMessages":[],"fullName":"ReactFreshIntegration without compiled destructuring with inline requires remounts component if custom hook it uses changes order behind an indirection","location":{"column":7,"line":1638},"status":"passed","title":"remounts component if custom hook it uses changes order behind an indirection"}],"endTime":1639319019744,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-refresh/src/__tests__/ReactFreshIntegration-test.js","startTime":1639319004073,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can preserve state for compatible types","location":{"column":3,"line":91},"status":"passed","title":"can preserve state for compatible types"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can preserve state for forwardRef","location":{"column":3,"line":181},"status":"passed","title":"can preserve state for forwardRef"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh should not consider two forwardRefs around the same type to be equivalent","location":{"column":3,"line":271},"status":"passed","title":"should not consider two forwardRefs around the same type to be equivalent"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can update forwardRef render function with its wrapper","location":{"column":3,"line":399},"status":"passed","title":"can update forwardRef render function with its wrapper"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can update forwardRef render function in isolation","location":{"column":3,"line":450},"status":"passed","title":"can update forwardRef render function in isolation"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can preserve state for simple memo","location":{"column":3,"line":507},"status":"passed","title":"can preserve state for simple memo"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can preserve state for memo with custom comparison","location":{"column":3,"line":597},"status":"passed","title":"can preserve state for memo with custom comparison"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can update simple memo function in isolation","location":{"column":3,"line":685},"status":"passed","title":"can update simple memo function in isolation"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can preserve state for memo(forwardRef)","location":{"column":3,"line":732},"status":"passed","title":"can preserve state for memo(forwardRef)"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can preserve state for lazy after resolution","location":{"column":3,"line":822},"status":"passed","title":"can preserve state for lazy after resolution"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can patch lazy before resolution","location":{"column":3,"line":958},"status":"passed","title":"can patch lazy before resolution"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can patch lazy(forwardRef) before resolution","location":{"column":3,"line":1040},"status":"passed","title":"can patch lazy(forwardRef) before resolution"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can patch lazy(memo) before resolution","location":{"column":3,"line":1125},"status":"passed","title":"can patch lazy(memo) before resolution"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can patch lazy(memo(forwardRef)) before resolution","location":{"column":3,"line":1210},"status":"passed","title":"can patch lazy(memo(forwardRef)) before resolution"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can patch both trees while suspense is displaying the fallback","location":{"column":3,"line":1295},"status":"passed","title":"can patch both trees while suspense is displaying the fallback"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh does not re-render ancestor components unnecessarily during a hot update","location":{"column":3,"line":1442},"status":"passed","title":"does not re-render ancestor components unnecessarily during a hot update"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh batches re-renders during a hot update","location":{"column":3,"line":1510},"status":"passed","title":"batches re-renders during a hot update"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh does not leak state between components","location":{"column":3,"line":1551},"status":"passed","title":"does not leak state between components"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can force remount by changing signature","location":{"column":3,"line":1641},"status":"passed","title":"can force remount by changing signature"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh keeps a valid tree when forcing remount","location":{"column":3,"line":1772},"status":"passed","title":"keeps a valid tree when forcing remount"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a <root> wrapper","location":{"column":3,"line":2004},"status":"passed","title":"can remount on signature change within a <root> wrapper"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a simple memo wrapper","location":{"column":3,"line":2010},"status":"passed","title":"can remount on signature change within a simple memo wrapper"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a lazy simple memo wrapper","location":{"column":3,"line":2016},"status":"passed","title":"can remount on signature change within a lazy simple memo wrapper"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within forwardRef","location":{"column":3,"line":2028},"status":"passed","title":"can remount on signature change within forwardRef"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within forwardRef render function","location":{"column":3,"line":2034},"status":"passed","title":"can remount on signature change within forwardRef render function"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within nested memo","location":{"column":3,"line":2040},"status":"passed","title":"can remount on signature change within nested memo"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a memo wrapper and custom comparison","location":{"column":3,"line":2048},"status":"passed","title":"can remount on signature change within a memo wrapper and custom comparison"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a class","location":{"column":3,"line":2054},"status":"passed","title":"can remount on signature change within a class"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a context provider","location":{"column":3,"line":2067},"status":"passed","title":"can remount on signature change within a context provider"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a context consumer","location":{"column":3,"line":2083},"status":"passed","title":"can remount on signature change within a context consumer"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a suspense node","location":{"column":3,"line":2095},"status":"passed","title":"can remount on signature change within a suspense node"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a mode node","location":{"column":3,"line":2111},"status":"passed","title":"can remount on signature change within a mode node"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a fragment node","location":{"column":3,"line":2126},"status":"passed","title":"can remount on signature change within a fragment node"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within multiple siblings","location":{"column":3,"line":2141},"status":"passed","title":"can remount on signature change within multiple siblings"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can remount on signature change within a profiler node","location":{"column":3,"line":2160},"status":"passed","title":"can remount on signature change within a profiler node"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh resets hooks with dependencies on hot reload","location":{"column":3,"line":2295},"status":"passed","title":"resets hooks with dependencies on hot reload"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh does not get into infinite loops during render phase updates","location":{"column":3,"line":2370},"status":"passed","title":"does not get into infinite loops during render phase updates"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can hot reload offscreen components","location":{"column":3,"line":2412},"status":"passed","title":"can hot reload offscreen components"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh remounts failed error boundaries (componentDidCatch)","location":{"column":3,"line":2510},"status":"passed","title":"remounts failed error boundaries (componentDidCatch)"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh remounts failed error boundaries (getDerivedStateFromError)","location":{"column":3,"line":2588},"status":"passed","title":"remounts failed error boundaries (getDerivedStateFromError)"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh remounts error boundaries that failed asynchronously after hot update","location":{"column":3,"line":2666},"status":"passed","title":"remounts error boundaries that failed asynchronously after hot update"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh remounts a failed root on mount","location":{"column":3,"line":2774},"status":"passed","title":"remounts a failed root on mount"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh does not retry an intentionally unmounted failed root","location":{"column":3,"line":2855},"status":"passed","title":"does not retry an intentionally unmounted failed root"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh remounts a failed root on update","location":{"column":3,"line":2884},"status":"passed","title":"remounts a failed root on update"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh regression test: does not get into an infinite loop","location":{"column":3,"line":3007},"status":"passed","title":"regression test: does not get into an infinite loop"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh remounts classes on every edit","location":{"column":3,"line":3062},"status":"passed","title":"remounts classes on every edit"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh updates refs when remounting","location":{"column":3,"line":3175},"status":"passed","title":"updates refs when remounting"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh remounts on conversion from class to function and back","location":{"column":3,"line":3249},"status":"passed","title":"remounts on conversion from class to function and back"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can find host instances for a family","location":{"column":3,"line":3361},"status":"passed","title":"can find host instances for a family"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can update multiple roots independently","location":{"column":3,"line":3469},"status":"passed","title":"can update multiple roots independently"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can detect likely component types","location":{"column":3,"line":3589},"status":"passed","title":"can detect likely component types"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh reports updated and remounted families to the caller","location":{"column":3,"line":3696},"status":"passed","title":"reports updated and remounted families to the caller"},{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can inject the runtime after the renderer executes","location":{"column":3,"line":3728},"status":"passed","title":"can inject the runtime after the renderer executes"}],"endTime":1639319028306,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-refresh/src/__tests__/ReactFresh-test.js","startTime":1639319019811,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers top-level function declarations","location":{"column":3,"line":40},"status":"passed","title":"registers top-level function declarations"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers top-level exported function declarations","location":{"column":3,"line":56},"status":"passed","title":"registers top-level exported function declarations"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers top-level exported named arrow functions","location":{"column":3,"line":81},"status":"passed","title":"registers top-level exported named arrow functions"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin uses original function declaration if it get reassigned","location":{"column":3,"line":100},"status":"passed","title":"uses original function declaration if it get reassigned"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin only registers pascal case functions","location":{"column":3,"line":113},"status":"passed","title":"only registers pascal case functions"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers top-level variable declarations with function expressions","location":{"column":3,"line":124},"status":"passed","title":"registers top-level variable declarations with function expressions"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers top-level variable declarations with arrow functions","location":{"column":3,"line":142},"status":"passed","title":"registers top-level variable declarations with arrow functions"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin ignores HOC definitions","location":{"column":3,"line":159},"status":"passed","title":"ignores HOC definitions"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin ignores complex definitions","location":{"column":3,"line":182},"status":"passed","title":"ignores complex definitions"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin ignores unnamed function declarations","location":{"column":3,"line":201},"status":"passed","title":"ignores unnamed function declarations"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers likely HOCs with inline functions","location":{"column":3,"line":209},"status":"passed","title":"registers likely HOCs with inline functions"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin ignores higher-order functions that are not HOCs","location":{"column":3,"line":239},"status":"passed","title":"ignores higher-order functions that are not HOCs"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers identifiers used in JSX at definition site","location":{"column":3,"line":253},"status":"passed","title":"registers identifiers used in JSX at definition site"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers identifiers used in React.createElement at definition site","location":{"column":3,"line":289},"status":"passed","title":"registers identifiers used in React.createElement at definition site"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin registers capitalized identifiers in HOC calls","location":{"column":3,"line":335},"status":"passed","title":"registers capitalized identifiers in HOC calls"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin generates signatures for function declarations calling hooks","location":{"column":3,"line":349},"status":"passed","title":"generates signatures for function declarations calling hooks"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin generates signatures for function expressions calling hooks","location":{"column":3,"line":361},"status":"passed","title":"generates signatures for function expressions calling hooks"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin includes custom hooks into the signatures","location":{"column":3,"line":394},"status":"passed","title":"includes custom hooks into the signatures"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin includes custom hooks into the signatures when commonjs target is used","location":{"column":3,"line":415},"status":"passed","title":"includes custom hooks into the signatures when commonjs target is used"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin generates valid signature for exotic ways to call Hooks","location":{"column":3,"line":435},"status":"passed","title":"generates valid signature for exotic ways to call Hooks"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin does not consider require-like methods to be HOCs","location":{"column":3,"line":456},"status":"passed","title":"does not consider require-like methods to be HOCs"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin can handle implicit arrow returns","location":{"column":3,"line":483},"status":"passed","title":"can handle implicit arrow returns"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin uses custom identifiers for $RefreshReg$ and $RefreshSig$","location":{"column":3,"line":496},"status":"passed","title":"uses custom identifiers for $RefreshReg$ and $RefreshSig$"},{"ancestorTitles":["ReactFreshBabelPlugin"],"failureMessages":[],"fullName":"ReactFreshBabelPlugin respects Babel's envName option","location":{"column":3,"line":513},"status":"passed","title":"respects Babel's envName option"}],"endTime":1639319028935,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-refresh/src/__tests__/ReactFreshBabelPlugin-test.js","startTime":1639319028373,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFresh"],"failureMessages":[],"fullName":"ReactFresh can update components managed by different renderers independently","location":{"column":3,"line":44},"status":"passed","title":"can update components managed by different renderers independently"}],"endTime":1639319029520,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-refresh/src/__tests__/ReactFreshMultipleRenderer-test.internal.js","startTime":1639319029002,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTestRenderer.act()"],"failureMessages":[],"fullName":"ReactTestRenderer.act() can use .act() to flush effects","location":{"column":3,"line":16},"status":"passed","title":"can use .act() to flush effects"},{"ancestorTitles":["ReactTestRenderer.act()"],"failureMessages":[],"fullName":"ReactTestRenderer.act() warns if you don't use .act","location":{"column":3,"line":41},"status":"passed","title":"warns if you don't use .act"},{"ancestorTitles":["ReactTestRenderer.act()","async"],"failureMessages":[],"fullName":"ReactTestRenderer.act() async should work with async/await","location":{"column":5,"line":59},"status":"passed","title":"should work with async/await"},{"ancestorTitles":["ReactTestRenderer.act()","async"],"failureMessages":[],"fullName":"ReactTestRenderer.act() async should not flush effects without also flushing microtasks","location":{"column":5,"line":86},"status":"passed","title":"should not flush effects without also flushing microtasks"}],"endTime":1639319029960,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactTestRendererAct-test.js","startTime":1639319029595,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer should warn if used to render a ReactDOM portal","location":{"column":3,"line":31},"status":"passed","title":"should warn if used to render a ReactDOM portal"},{"ancestorTitles":["ReactTestRenderer","timed out Suspense hidden subtrees should not be observable via toJSON"],"failureMessages":[],"fullName":"ReactTestRenderer timed out Suspense hidden subtrees should not be observable via toJSON for root Suspense components","location":{"column":5,"line":63},"status":"passed","title":"for root Suspense components"},{"ancestorTitles":["ReactTestRenderer","timed out Suspense hidden subtrees should not be observable via toJSON"],"failureMessages":[],"fullName":"ReactTestRenderer timed out Suspense hidden subtrees should not be observable via toJSON for nested Suspense components","location":{"column":5,"line":89},"status":"passed","title":"for nested Suspense components"}],"endTime":1639319030510,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.js","startTime":1639319030027,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should call all of the legacy lifecycle hooks","location":{"column":3,"line":20},"status":"passed","title":"should call all of the legacy lifecycle hooks"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should call all of the new lifecycle hooks","location":{"column":3,"line":65},"status":"passed","title":"should call all of the new lifecycle hooks"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present","location":{"column":3,"line":105},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present","location":{"column":3,"line":131},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should not call getSnapshotBeforeUpdate or componentDidUpdate when updating since refs wont exist","location":{"column":3,"line":157},"status":"passed","title":"should not call getSnapshotBeforeUpdate or componentDidUpdate when updating since refs wont exist"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should only render 1 level deep","location":{"column":3,"line":177},"status":"passed","title":"should only render 1 level deep"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should have shallow rendering","location":{"column":3,"line":194},"status":"passed","title":"should have shallow rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should handle Profiler","location":{"column":3,"line":218},"status":"passed","title":"should handle Profiler"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should enable shouldComponentUpdate to prevent a re-render","location":{"column":3,"line":246},"status":"passed","title":"should enable shouldComponentUpdate to prevent a re-render"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should enable PureComponent to prevent a re-render","location":{"column":3,"line":273},"status":"passed","title":"should enable PureComponent to prevent a re-render"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should not run shouldComponentUpdate during forced update","location":{"column":3,"line":297},"status":"passed","title":"should not run shouldComponentUpdate during forced update"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should rerender when calling forceUpdate","location":{"column":3,"line":337},"status":"passed","title":"should rerender when calling forceUpdate"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should shallow render a function component","location":{"column":3,"line":357},"status":"passed","title":"should shallow render a function component"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should shallow render a component returning strings directly from render","location":{"column":3,"line":388},"status":"passed","title":"should shallow render a component returning strings directly from render"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should shallow render a component returning numbers directly from render","location":{"column":3,"line":396},"status":"passed","title":"should shallow render a component returning numbers directly from render"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should shallow render a fragment","location":{"column":3,"line":404},"status":"passed","title":"should shallow render a fragment"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should shallow render a React.fragment","location":{"column":3,"line":424},"status":"passed","title":"should shallow render a React.fragment"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should throw for invalid elements","location":{"column":3,"line":452},"status":"passed","title":"should throw for invalid elements"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should have shallow unmounting","location":{"column":3,"line":473},"status":"passed","title":"should have shallow unmounting"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can shallow render to null","location":{"column":3,"line":490},"status":"passed","title":"can shallow render to null"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can shallow render with a ref","location":{"column":3,"line":503},"status":"passed","title":"can shallow render with a ref"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo lets you update shallowly rendered components","location":{"column":3,"line":515},"status":"passed","title":"lets you update shallowly rendered components"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can access the mounted component instance","location":{"column":3,"line":562},"status":"passed","title":"can access the mounted component instance"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can shallowly render components with contextTypes","location":{"column":3,"line":580},"status":"passed","title":"can shallowly render components with contextTypes"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo passes expected params to legacy component lifecycle methods","location":{"column":3,"line":598},"status":"passed","title":"passes expected params to legacy component lifecycle methods"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo passes expected params to new component lifecycle methods","location":{"column":3,"line":678},"status":"passed","title":"passes expected params to new component lifecycle methods"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can shallowly render components with ref as function","location":{"column":3,"line":746},"status":"passed","title":"can shallowly render components with ref as function"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can initialize state via static getDerivedStateFromProps","location":{"column":3,"line":779},"status":"passed","title":"can initialize state via static getDerivedStateFromProps"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can setState in componentWillMount when shallow rendering","location":{"column":3,"line":806},"status":"passed","title":"can setState in componentWillMount when shallow rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can setState in componentWillMount repeatedly when shallow rendering","location":{"column":3,"line":824},"status":"passed","title":"can setState in componentWillMount repeatedly when shallow rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can setState in componentWillMount with an updater function repeatedly when shallow rendering","location":{"column":3,"line":849},"status":"passed","title":"can setState in componentWillMount with an updater function repeatedly when shallow rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can setState in componentWillReceiveProps when shallow rendering","location":{"column":3,"line":874},"status":"passed","title":"can setState in componentWillReceiveProps when shallow rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can update state with static getDerivedStateFromProps when shallow rendering","location":{"column":3,"line":901},"status":"passed","title":"can update state with static getDerivedStateFromProps when shallow rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should not override state with stale values if prevState is spread within getDerivedStateFromProps","location":{"column":3,"line":937},"status":"passed","title":"should not override state with stale values if prevState is spread within getDerivedStateFromProps"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should pass previous state to shouldComponentUpdate even with getDerivedStateFromProps","location":{"column":3,"line":966},"status":"passed","title":"should pass previous state to shouldComponentUpdate even with getDerivedStateFromProps"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can setState with an updater function","location":{"column":3,"line":1004},"status":"passed","title":"can setState with an updater function"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can access component instance from setState updater function","location":{"column":3,"line":1036},"status":"passed","title":"can access component instance from setState updater function"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can setState with a callback","location":{"column":3,"line":1059},"status":"passed","title":"can setState with a callback"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can replaceState with a callback","location":{"column":3,"line":1089},"status":"passed","title":"can replaceState with a callback"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can forceUpdate with a callback","location":{"column":3,"line":1125},"status":"passed","title":"can forceUpdate with a callback"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can pass context when shallowly rendering","location":{"column":3,"line":1155},"status":"passed","title":"can pass context when shallowly rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should track context across updates","location":{"column":3,"line":1175},"status":"passed","title":"should track context across updates"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should filter context by contextTypes","location":{"column":3,"line":1205},"status":"passed","title":"should filter context by contextTypes"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo can fail context when shallowly rendering","location":{"column":3,"line":1225},"status":"passed","title":"can fail context when shallowly rendering"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should warn about propTypes (but only once)","location":{"column":3,"line":1246},"status":"passed","title":"should warn about propTypes (but only once)"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should enable rendering of cloned element","location":{"column":3,"line":1269},"status":"passed","title":"should enable rendering of cloned element"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo this.state should be updated on setState callback inside componentWillMount","location":{"column":3,"line":1296},"status":"passed","title":"this.state should be updated on setState callback inside componentWillMount"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should handle multiple callbacks","location":{"column":3,"line":1326},"status":"passed","title":"should handle multiple callbacks"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should call the setState callback even if shouldComponentUpdate = false","location":{"column":3,"line":1360},"status":"passed","title":"should call the setState callback even if shouldComponentUpdate = false"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo throws usefully when rendering badly-typed elements","location":{"column":3,"line":1393},"status":"passed","title":"throws usefully when rendering badly-typed elements"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should have initial state of null if not defined","location":{"column":3,"line":1415},"status":"passed","title":"should have initial state of null if not defined"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should invoke both deprecated and new lifecycles if both are present","location":{"column":3,"line":1430},"status":"passed","title":"should invoke both deprecated and new lifecycles if both are present"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should stop the update when setState returns null or undefined","location":{"column":3,"line":1474},"status":"passed","title":"should stop the update when setState returns null or undefined"},{"ancestorTitles":["ReactShallowRendererMemo"],"failureMessages":[],"fullName":"ReactShallowRendererMemo should not get this in a function component","location":{"column":3,"line":1504},"status":"passed","title":"should not get this in a function component"}],"endTime":1639319031064,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactShallowRendererMemo-test.js","startTime":1639319030572,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with useState","location":{"column":3,"line":19},"status":"passed","title":"should work with useState"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with updating a value from useState","location":{"column":3,"line":58},"status":"passed","title":"should work with updating a value from useState"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with updating a derived value from useState","location":{"column":3,"line":89},"status":"passed","title":"should work with updating a derived value from useState"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with useReducer","location":{"column":3,"line":144},"status":"passed","title":"should work with useReducer"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with a dispatched state change for a useReducer","location":{"column":3,"line":190},"status":"passed","title":"should work with a dispatched state change for a useReducer"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should not trigger effects","location":{"column":3,"line":230},"status":"passed","title":"should not trigger effects"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with useRef","location":{"column":3,"line":251},"status":"passed","title":"should work with useRef"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with useMemo","location":{"column":3,"line":269},"status":"passed","title":"should work with useMemo"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with useContext","location":{"column":3,"line":289},"status":"passed","title":"should work with useContext"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should not leak state when component type changes","location":{"column":3,"line":312},"status":"passed","title":"should not leak state when component type changes"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should work with with forwardRef + any hook","location":{"column":3,"line":359},"status":"passed","title":"should work with with forwardRef + any hook"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should update a value from useState outside the render","location":{"column":3,"line":377},"status":"passed","title":"should update a value from useState outside the render"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should ignore a foreign update outside the render","location":{"column":3,"line":431},"status":"passed","title":"should ignore a foreign update outside the render"},{"ancestorTitles":["ReactShallowRenderer with hooks"],"failureMessages":[],"fullName":"ReactShallowRenderer with hooks should not forget render phase updates","location":{"column":3,"line":458},"status":"passed","title":"should not forget render phase updates"}],"endTime":1639319031393,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactShallowRendererHooks-test.js","startTime":1639319031125,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should call all of the legacy lifecycle hooks","location":{"column":3,"line":20},"status":"passed","title":"should call all of the legacy lifecycle hooks"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should call all of the new lifecycle hooks","location":{"column":3,"line":63},"status":"passed","title":"should call all of the new lifecycle hooks"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present","location":{"column":3,"line":101},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present","location":{"column":3,"line":125},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should not call getSnapshotBeforeUpdate or componentDidUpdate when updating since refs wont exist","location":{"column":3,"line":149},"status":"passed","title":"should not call getSnapshotBeforeUpdate or componentDidUpdate when updating since refs wont exist"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should only render 1 level deep","location":{"column":3,"line":167},"status":"passed","title":"should only render 1 level deep"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should have shallow rendering","location":{"column":3,"line":183},"status":"passed","title":"should have shallow rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should handle ForwardRef","location":{"column":3,"line":205},"status":"passed","title":"should handle ForwardRef"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should handle Profiler","location":{"column":3,"line":227},"status":"passed","title":"should handle Profiler"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should enable shouldComponentUpdate to prevent a re-render","location":{"column":3,"line":253},"status":"passed","title":"should enable shouldComponentUpdate to prevent a re-render"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should enable PureComponent to prevent a re-render","location":{"column":3,"line":278},"status":"passed","title":"should enable PureComponent to prevent a re-render"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should not run shouldComponentUpdate during forced update","location":{"column":3,"line":300},"status":"passed","title":"should not run shouldComponentUpdate during forced update"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should rerender when calling forceUpdate","location":{"column":3,"line":338},"status":"passed","title":"should rerender when calling forceUpdate"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should shallow render a function component","location":{"column":3,"line":356},"status":"passed","title":"should shallow render a function component"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should shallow render a component returning strings directly from render","location":{"column":3,"line":385},"status":"passed","title":"should shallow render a component returning strings directly from render"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should shallow render a component returning numbers directly from render","location":{"column":3,"line":393},"status":"passed","title":"should shallow render a component returning numbers directly from render"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should shallow render a fragment","location":{"column":3,"line":401},"status":"passed","title":"should shallow render a fragment"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should shallow render a React.fragment","location":{"column":3,"line":421},"status":"passed","title":"should shallow render a React.fragment"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should throw for invalid elements","location":{"column":3,"line":449},"status":"passed","title":"should throw for invalid elements"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should have shallow unmounting","location":{"column":3,"line":470},"status":"passed","title":"should have shallow unmounting"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can shallow render to null","location":{"column":3,"line":487},"status":"passed","title":"can shallow render to null"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can shallow render with a ref","location":{"column":3,"line":500},"status":"passed","title":"can shallow render with a ref"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer lets you update shallowly rendered components","location":{"column":3,"line":512},"status":"passed","title":"lets you update shallowly rendered components"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can access the mounted component instance","location":{"column":3,"line":559},"status":"passed","title":"can access the mounted component instance"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can shallowly render components with contextTypes","location":{"column":3,"line":575},"status":"passed","title":"can shallowly render components with contextTypes"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer passes expected params to legacy component lifecycle methods","location":{"column":3,"line":591},"status":"passed","title":"passes expected params to legacy component lifecycle methods"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer passes expected params to new component lifecycle methods","location":{"column":3,"line":669},"status":"passed","title":"passes expected params to new component lifecycle methods"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can shallowly render components with ref as function","location":{"column":3,"line":735},"status":"passed","title":"can shallowly render components with ref as function"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can initialize state via static getDerivedStateFromProps","location":{"column":3,"line":766},"status":"passed","title":"can initialize state via static getDerivedStateFromProps"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can setState in componentWillMount when shallow rendering","location":{"column":3,"line":791},"status":"passed","title":"can setState in componentWillMount when shallow rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can setState in componentWillMount repeatedly when shallow rendering","location":{"column":3,"line":807},"status":"passed","title":"can setState in componentWillMount repeatedly when shallow rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can setState in componentWillMount with an updater function repeatedly when shallow rendering","location":{"column":3,"line":830},"status":"passed","title":"can setState in componentWillMount with an updater function repeatedly when shallow rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can setState in componentWillReceiveProps when shallow rendering","location":{"column":3,"line":853},"status":"passed","title":"can setState in componentWillReceiveProps when shallow rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can update state with static getDerivedStateFromProps when shallow rendering","location":{"column":3,"line":878},"status":"passed","title":"can update state with static getDerivedStateFromProps when shallow rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should not override state with stale values if prevState is spread within getDerivedStateFromProps","location":{"column":3,"line":912},"status":"passed","title":"should not override state with stale values if prevState is spread within getDerivedStateFromProps"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should pass previous state to shouldComponentUpdate even with getDerivedStateFromProps","location":{"column":3,"line":939},"status":"passed","title":"should pass previous state to shouldComponentUpdate even with getDerivedStateFromProps"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can setState with an updater function","location":{"column":3,"line":975},"status":"passed","title":"can setState with an updater function"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can access component instance from setState updater function","location":{"column":3,"line":1005},"status":"passed","title":"can access component instance from setState updater function"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can setState with a callback","location":{"column":3,"line":1026},"status":"passed","title":"can setState with a callback"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can replaceState with a callback","location":{"column":3,"line":1054},"status":"passed","title":"can replaceState with a callback"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can forceUpdate with a callback","location":{"column":3,"line":1088},"status":"passed","title":"can forceUpdate with a callback"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can pass context when shallowly rendering","location":{"column":3,"line":1116},"status":"passed","title":"can pass context when shallowly rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should track context across updates","location":{"column":3,"line":1134},"status":"passed","title":"should track context across updates"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should filter context by contextTypes","location":{"column":3,"line":1162},"status":"passed","title":"should filter context by contextTypes"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer can fail context when shallowly rendering","location":{"column":3,"line":1180},"status":"passed","title":"can fail context when shallowly rendering"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should warn about propTypes (but only once)","location":{"column":3,"line":1199},"status":"passed","title":"should warn about propTypes (but only once)"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should enable rendering of cloned element","location":{"column":3,"line":1220},"status":"passed","title":"should enable rendering of cloned element"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer this.state should be updated on setState callback inside componentWillMount","location":{"column":3,"line":1245},"status":"passed","title":"this.state should be updated on setState callback inside componentWillMount"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should handle multiple callbacks","location":{"column":3,"line":1273},"status":"passed","title":"should handle multiple callbacks"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should call the setState callback even if shouldComponentUpdate = false","location":{"column":3,"line":1305},"status":"passed","title":"should call the setState callback even if shouldComponentUpdate = false"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer throws usefully when rendering badly-typed elements","location":{"column":3,"line":1336},"status":"passed","title":"throws usefully when rendering badly-typed elements"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should have initial state of null if not defined","location":{"column":3,"line":1358},"status":"passed","title":"should have initial state of null if not defined"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should invoke both deprecated and new lifecycles if both are present","location":{"column":3,"line":1371},"status":"passed","title":"should invoke both deprecated and new lifecycles if both are present"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should stop the update when setState returns null or undefined","location":{"column":3,"line":1413},"status":"passed","title":"should stop the update when setState returns null or undefined"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should not get this in a function component","location":{"column":3,"line":1441},"status":"passed","title":"should not get this in a function component"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should handle memo","location":{"column":3,"line":1452},"status":"passed","title":"should handle memo"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should enable React.memo to prevent a re-render","location":{"column":3,"line":1461},"status":"passed","title":"should enable React.memo to prevent a re-render"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should respect a custom comparison function with React.memo","location":{"column":3,"line":1483},"status":"passed","title":"should respect a custom comparison function with React.memo"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should not call the comparison function with React.memo on the initial render","location":{"column":3,"line":1507},"status":"passed","title":"should not call the comparison function with React.memo on the initial render"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should handle memo(forwardRef())","location":{"column":3,"line":1518},"status":"passed","title":"should handle memo(forwardRef())"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should warn for forwardRef(memo())","location":{"column":3,"line":1542},"status":"passed","title":"should warn for forwardRef(memo())"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should let you change type","location":{"column":3,"line":1563},"status":"passed","title":"should let you change type"},{"ancestorTitles":["ReactShallowRenderer"],"failureMessages":[],"fullName":"ReactShallowRenderer should let you change class type","location":{"column":3,"line":1582},"status":"passed","title":"should let you change class type"}],"endTime":1639319032114,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactShallowRenderer-test.js","startTime":1639319031467,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTestRendererTraversal"],"failureMessages":[],"fullName":"ReactTestRendererTraversal initializes","location":{"column":3,"line":71},"status":"passed","title":"initializes"},{"ancestorTitles":["ReactTestRendererTraversal"],"failureMessages":[],"fullName":"ReactTestRendererTraversal searches via .find() / .findAll()","location":{"column":3,"line":83},"status":"passed","title":"searches via .find() / .findAll()"},{"ancestorTitles":["ReactTestRendererTraversal"],"failureMessages":[],"fullName":"ReactTestRendererTraversal searches via .findByType() / .findAllByType()","location":{"column":3,"line":138},"status":"passed","title":"searches via .findByType() / .findAllByType()"},{"ancestorTitles":["ReactTestRendererTraversal"],"failureMessages":[],"fullName":"ReactTestRendererTraversal searches via .findByProps() / .findAllByProps()","location":{"column":3,"line":162},"status":"passed","title":"searches via .findByProps() / .findAllByProps()"},{"ancestorTitles":["ReactTestRendererTraversal"],"failureMessages":[],"fullName":"ReactTestRendererTraversal skips special nodes","location":{"column":3,"line":185},"status":"passed","title":"skips special nodes"},{"ancestorTitles":["ReactTestRendererTraversal"],"failureMessages":[],"fullName":"ReactTestRendererTraversal can have special nodes as roots","location":{"column":3,"line":203},"status":"passed","title":"can have special nodes as roots"}],"endTime":1639319033255,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactTestRendererTraversal-test.js","startTime":1639319032334,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer renders a simple component","location":{"column":3,"line":52},"status":"passed","title":"renders a simple component"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer renders a top-level empty component","location":{"column":3,"line":64},"status":"passed","title":"renders a top-level empty component"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer exposes a type flag","location":{"column":3,"line":72},"status":"passed","title":"exposes a type flag"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer can render a composite component","location":{"column":3,"line":88},"status":"passed","title":"can render a composite component"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer renders some basics with an update","location":{"column":3,"line":111},"status":"passed","title":"renders some basics with an update"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer exposes the instance","location":{"column":3,"line":152},"status":"passed","title":"exposes the instance"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer updates types","location":{"column":3,"line":182},"status":"passed","title":"updates types"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer updates children","location":{"column":3,"line":198},"status":"passed","title":"updates children"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer does the full lifecycle","location":{"column":3,"line":234},"status":"passed","title":"does the full lifecycle"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer gives a ref to native components","location":{"column":3,"line":263},"status":"passed","title":"gives a ref to native components"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer warns correctly for refs on SFCs","location":{"column":3,"line":269},"status":"passed","title":"warns correctly for refs on SFCs"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer allows an optional createNodeMock function","location":{"column":3,"line":294},"status":"passed","title":"allows an optional createNodeMock function"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer supports unmounting when using refs","location":{"column":3,"line":355},"status":"passed","title":"supports unmounting when using refs"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer supports unmounting inner instances","location":{"column":3,"line":367},"status":"passed","title":"supports unmounting inner instances"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer supports updates when using refs","location":{"column":3,"line":389},"status":"passed","title":"supports updates when using refs"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer supports error boundaries","location":{"column":3,"line":407},"status":"passed","title":"supports error boundaries"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer can update text nodes","location":{"column":3,"line":471},"status":"passed","title":"can update text nodes"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer toTree() renders simple components returning host components","location":{"column":3,"line":520},"status":"passed","title":"toTree() renders simple components returning host components"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer toTree() handles nested Fragments","location":{"column":3,"line":545},"status":"passed","title":"toTree() handles nested Fragments"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer toTree() handles null rendering components","location":{"column":3,"line":567},"status":"passed","title":"toTree() handles null rendering components"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer toTree() handles simple components that return arrays","location":{"column":3,"line":590},"status":"passed","title":"toTree() handles simple components that return arrays"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer toTree() handles complicated tree of arrays","location":{"column":3,"line":630},"status":"passed","title":"toTree() handles complicated tree of arrays"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer toTree() handles complicated tree of fragments","location":{"column":3,"line":708},"status":"passed","title":"toTree() handles complicated tree of fragments"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer root instance and createNodeMock ref return the same value","location":{"column":3,"line":760},"status":"passed","title":"root instance and createNodeMock ref return the same value"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer toTree() renders complicated trees of composites and hosts","location":{"column":3,"line":771},"status":"passed","title":"toTree() renders complicated trees of composites and hosts"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer can update text nodes when rendered as root","location":{"column":3,"line":861},"status":"passed","title":"can update text nodes when rendered as root"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer can render and update root fragments","location":{"column":3,"line":870},"status":"passed","title":"can render and update root fragments"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer supports context providers and consumers","location":{"column":3,"line":895},"status":"passed","title":"supports context providers and consumers"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer supports modes","location":{"column":3,"line":932},"status":"passed","title":"supports modes"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer supports forwardRef","location":{"column":3,"line":969},"status":"passed","title":"supports forwardRef"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer can concurrently render context with a \"primary\" renderer","location":{"column":3,"line":1011},"status":"passed","title":"can concurrently render context with a \"primary\" renderer"},{"ancestorTitles":["ReactTestRenderer"],"failureMessages":[],"fullName":"ReactTestRenderer calling findByType() with an invalid component will fall back to \"Unknown\" for component name","location":{"column":3,"line":1026},"status":"passed","title":"calling findByType() with an invalid component will fall back to \"Unknown\" for component name"}],"endTime":1639319033766,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.internal.js","startTime":1639319033329,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTestRendererAsync"],"failureMessages":[],"fullName":"ReactTestRendererAsync flushAll flushes all work","location":{"column":3,"line":26},"status":"passed","title":"flushAll flushes all work"},{"ancestorTitles":["ReactTestRendererAsync"],"failureMessages":[],"fullName":"ReactTestRendererAsync flushAll returns array of yielded values","location":{"column":3,"line":50},"status":"passed","title":"flushAll returns array of yielded values"},{"ancestorTitles":["ReactTestRendererAsync"],"failureMessages":[],"fullName":"ReactTestRendererAsync flushThrough flushes until the expected values is yielded","location":{"column":3,"line":76},"status":"passed","title":"flushThrough flushes until the expected values is yielded"},{"ancestorTitles":["ReactTestRendererAsync"],"failureMessages":[],"fullName":"ReactTestRendererAsync supports high priority interruptions","location":{"column":3,"line":104},"status":"passed","title":"supports high priority interruptions"},{"ancestorTitles":["ReactTestRendererAsync","Jest matchers"],"failureMessages":[],"fullName":"ReactTestRendererAsync Jest matchers toFlushAndYieldThrough","location":{"column":5,"line":145},"status":"passed","title":"toFlushAndYieldThrough"},{"ancestorTitles":["ReactTestRendererAsync","Jest matchers"],"failureMessages":[],"fullName":"ReactTestRendererAsync Jest matchers toFlushAndYield","location":{"column":5,"line":167},"status":"passed","title":"toFlushAndYield"},{"ancestorTitles":["ReactTestRendererAsync","Jest matchers"],"failureMessages":[],"fullName":"ReactTestRendererAsync Jest matchers toFlushAndThrow","location":{"column":5,"line":201},"status":"passed","title":"toFlushAndThrow"},{"ancestorTitles":["ReactTestRendererAsync"],"failureMessages":[],"fullName":"ReactTestRendererAsync toHaveYielded","location":{"column":3,"line":240},"status":"passed","title":"toHaveYielded"},{"ancestorTitles":["ReactTestRendererAsync"],"failureMessages":[],"fullName":"ReactTestRendererAsync flush methods throw if log is not empty","location":{"column":3,"line":262},"status":"passed","title":"flush methods throw if log is not empty"}],"endTime":1639319034441,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-test-renderer/src/__tests__/ReactTestRendererAsync-test.js","startTime":1639319033839,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactServer"],"failureMessages":[],"fullName":"ReactServer can call render","location":{"column":3,"line":24},"status":"passed","title":"can call render"}],"endTime":1639319034722,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-server/src/__tests__/ReactServer-test.js","startTime":1639319034502,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription supports basic subscription pattern","location":{"column":3,"line":52},"status":"passed","title":"supports basic subscription pattern"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription should support observable types like RxJS ReplaySubject","location":{"column":3,"line":96},"status":"passed","title":"should support observable types like RxJS ReplaySubject"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription should unsubscribe from old sources and subscribe to new sources when memoized props change","location":{"column":3,"line":146},"status":"passed","title":"should unsubscribe from old sources and subscribe to new sources when memoized props change"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription should unsubscribe from old sources and subscribe to new sources when useCallback functions change","location":{"column":3,"line":207},"status":"passed","title":"should unsubscribe from old sources and subscribe to new sources when useCallback functions change"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription should ignore values emitted by a new subscribable until the commit phase","location":{"column":3,"line":265},"status":"passed","title":"should ignore values emitted by a new subscribable until the commit phase"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription should not drop values emitted between updates","location":{"column":3,"line":365},"status":"passed","title":"should not drop values emitted between updates"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription should guard against updates that happen after unmounting","location":{"column":3,"line":467},"status":"passed","title":"should guard against updates that happen after unmounting"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription does not return a value from the previous subscription if the source is updated","location":{"column":3,"line":530},"status":"passed","title":"does not return a value from the previous subscription if the source is updated"},{"ancestorTitles":["useSubscription"],"failureMessages":[],"fullName":"useSubscription should not tear if a mutation occurs during a concurrent update","location":{"column":3,"line":564},"status":"passed","title":"should not tear if a mutation occurs during a concurrent update"}],"endTime":1639319036256,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/use-subscription/src/__tests__/useSubscription-test.js","startTime":1639319034789,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should be able to inject ordering before plugins","location":{"column":3,"line":29},"status":"passed","title":"should be able to inject ordering before plugins"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should be able to inject plugins before and after ordering","location":{"column":3,"line":49},"status":"passed","title":"should be able to inject plugins before and after ordering"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should be able to inject repeated plugins and out-of-order","location":{"column":3,"line":69},"status":"passed","title":"should be able to inject repeated plugins and out-of-order"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should throw if plugin does not implement `extractEvents`","location":{"column":3,"line":90},"status":"passed","title":"should throw if plugin does not implement `extractEvents`"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should throw if plugin does not exist in ordering","location":{"column":3,"line":105},"status":"passed","title":"should throw if plugin does not exist in ordering"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should throw if ordering is injected more than once","location":{"column":3,"line":122},"status":"passed","title":"should throw if ordering is injected more than once"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should throw if different plugins injected using same name","location":{"column":3,"line":135},"status":"passed","title":"should throw if different plugins injected using same name"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should publish registration names of injected plugins","location":{"column":3,"line":149},"status":"passed","title":"should publish registration names of injected plugins"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should throw if multiple registration names collide","location":{"column":3,"line":189},"status":"passed","title":"should throw if multiple registration names collide"},{"ancestorTitles":["EventPluginRegistry"],"failureMessages":[],"fullName":"EventPluginRegistry should throw if an invalid event is published","location":{"column":3,"line":219},"status":"passed","title":"should throw if an invalid event is published"}],"endTime":1639319036564,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/EventPluginRegistry-test.internal.js","startTime":1639319036332,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should do nothing when no one wants to respond","location":{"column":3,"line":426},"status":"passed","title":"should do nothing when no one wants to respond"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder grandParent while capturing","location":{"column":3,"line":463},"status":"passed","title":"should grant responder grandParent while capturing"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder parent while capturing","location":{"column":3,"line":483},"status":"passed","title":"should grant responder parent while capturing"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder child while capturing","location":{"column":3,"line":507},"status":"passed","title":"should grant responder child while capturing"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder child while bubbling","location":{"column":3,"line":532},"status":"passed","title":"should grant responder child while bubbling"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder parent while bubbling","location":{"column":3,"line":561},"status":"passed","title":"should grant responder parent while bubbling"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder grandParent while bubbling","location":{"column":3,"line":591},"status":"passed","title":"should grant responder grandParent while bubbling"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder grandParent while capturing move","location":{"column":3,"line":633},"status":"passed","title":"should grant responder grandParent while capturing move"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder parent while capturing move","location":{"column":3,"line":663},"status":"passed","title":"should grant responder parent while capturing move"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder child while capturing move","location":{"column":3,"line":694},"status":"passed","title":"should grant responder child while capturing move"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder child while bubbling move","location":{"column":3,"line":729},"status":"passed","title":"should grant responder child while bubbling move"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder parent while bubbling move","location":{"column":3,"line":765},"status":"passed","title":"should grant responder parent while bubbling move"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should grant responder grandParent while bubbling move","location":{"column":3,"line":802},"status":"passed","title":"should grant responder grandParent while bubbling move"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should bubble negotiation to first common ancestor of responder","location":{"column":3,"line":848},"status":"passed","title":"should bubble negotiation to first common ancestor of responder"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should bubble negotiation to first common ancestor of responder then transfer","location":{"column":3,"line":890},"status":"passed","title":"should bubble negotiation to first common ancestor of responder then transfer"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should negotiate with deepest target on second touch if nothing is responder","location":{"column":3,"line":946},"status":"passed","title":"should negotiate with deepest target on second touch if nothing is responder"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should negotiate until first common ancestor when there are siblings","location":{"column":3,"line":1094},"status":"passed","title":"should negotiate until first common ancestor when there are siblings"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should notify of being rejected. responderStart/Move happens on current responder","location":{"column":3,"line":1188},"status":"passed","title":"should notify of being rejected. responderStart/Move happens on current responder"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should negotiate scroll","location":{"column":3,"line":1258},"status":"passed","title":"should negotiate scroll"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should cancel correctly","location":{"column":3,"line":1339},"status":"passed","title":"should cancel correctly"},{"ancestorTitles":["ResponderEventPlugin"],"failureMessages":[],"fullName":"ResponderEventPlugin should determine the first common ancestor correctly","location":{"column":3,"line":1377},"status":"passed","title":"should determine the first common ancestor correctly"}],"endTime":1639319037416,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/ResponderEventPlugin-test.internal.js","startTime":1639319036631,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactNativeError"],"failureMessages":[],"fullName":"ReactNativeError should throw error if null component registration getter is used","location":{"column":3,"line":40},"status":"passed","title":"should throw error if null component registration getter is used"},{"ancestorTitles":["ReactNativeError"],"failureMessages":[],"fullName":"ReactNativeError should be able to extract a component stack from a native view","location":{"column":3,"line":52},"status":"passed","title":"should be able to extract a component stack from a native view"}],"endTime":1639319038291,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/ReactNativeError-test.internal.js","startTime":1639319037483,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createReactNativeComponentClass"],"failureMessages":[],"fullName":"createReactNativeComponentClass should register viewConfigs","location":{"column":3,"line":27},"status":"passed","title":"should register viewConfigs"},{"ancestorTitles":["createReactNativeComponentClass"],"failureMessages":[],"fullName":"createReactNativeComponentClass should not allow viewConfigs with duplicate uiViewClassNames to be registered","location":{"column":3,"line":52},"status":"passed","title":"should not allow viewConfigs with duplicate uiViewClassNames to be registered"}],"endTime":1639319038605,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/createReactNativeComponentClass-test.internal.js","startTime":1639319038353,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["created with ReactFabric called with ReactNative"],"failureMessages":[],"fullName":"created with ReactFabric called with ReactNative find Fabric instances with the RN renderer","location":{"column":3,"line":37},"status":"passed","title":"find Fabric instances with the RN renderer"},{"ancestorTitles":["created with ReactFabric called with ReactNative"],"failureMessages":[],"fullName":"created with ReactFabric called with ReactNative find Fabric nodes with the RN renderer","location":{"column":3,"line":57},"status":"passed","title":"find Fabric nodes with the RN renderer"},{"ancestorTitles":["created with ReactFabric called with ReactNative"],"failureMessages":[],"fullName":"created with ReactFabric called with ReactNative dispatches commands on Fabric nodes with the RN renderer","location":{"column":3,"line":77},"status":"passed","title":"dispatches commands on Fabric nodes with the RN renderer"},{"ancestorTitles":["created with ReactNative called with ReactFabric"],"failureMessages":[],"fullName":"created with ReactNative called with ReactFabric find Paper instances with the Fabric renderer","location":{"column":3,"line":115},"status":"passed","title":"find Paper instances with the Fabric renderer"},{"ancestorTitles":["created with ReactNative called with ReactFabric"],"failureMessages":[],"fullName":"created with ReactNative called with ReactFabric find Paper nodes with the Fabric renderer","location":{"column":3,"line":135},"status":"passed","title":"find Paper nodes with the Fabric renderer"},{"ancestorTitles":["created with ReactNative called with ReactFabric"],"failureMessages":[],"fullName":"created with ReactNative called with ReactFabric dispatches commands on Paper nodes with the Fabric renderer","location":{"column":3,"line":155},"status":"passed","title":"dispatches commands on Paper nodes with the Fabric renderer"}],"endTime":1639319039702,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/ReactFabricAndNative-test.internal.js","startTime":1639319038666,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should be able to create and render a native component","location":{"column":3,"line":39},"status":"passed","title":"should be able to create and render a native component"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should be able to create and update a native component","location":{"column":3,"line":52},"status":"passed","title":"should be able to create and update a native component"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should not call UIManager.updateView after render for properties that have not changed","location":{"column":3,"line":73},"status":"passed","title":"should not call UIManager.updateView after render for properties that have not changed"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should call dispatchCommand for native refs","location":{"column":3,"line":99},"status":"passed","title":"should call dispatchCommand for native refs"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should warn and no-op if calling dispatchCommand on non native refs","location":{"column":3,"line":125},"status":"passed","title":"should warn and no-op if calling dispatchCommand on non native refs"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should not call UIManager.updateView from ref.setNativeProps for properties that have not changed","location":{"column":3,"line":154},"status":"passed","title":"should not call UIManager.updateView from ref.setNativeProps for properties that have not changed"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should call UIManager.measure on ref.measure","location":{"column":3,"line":187},"status":"passed","title":"should call UIManager.measure on ref.measure"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should call UIManager.measureInWindow on ref.measureInWindow","location":{"column":3,"line":213},"status":"passed","title":"should call UIManager.measureInWindow on ref.measureInWindow"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should support reactTag in ref.measureLayout","location":{"column":3,"line":239},"status":"passed","title":"should support reactTag in ref.measureLayout"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should support ref in ref.measureLayout of host components","location":{"column":3,"line":279},"status":"passed","title":"should support ref in ref.measureLayout of host components"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative returns the correct instance and calls it in the callback","location":{"column":3,"line":315},"status":"passed","title":"returns the correct instance and calls it in the callback"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative renders and reorders children","location":{"column":3,"line":336},"status":"passed","title":"renders and reorders children"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative calls setState with no arguments","location":{"column":3,"line":366},"status":"passed","title":"calls setState with no arguments"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should not throw when <View> is used inside of a <Text> ancestor","location":{"column":3,"line":381},"status":"passed","title":"should not throw when <View> is used inside of a <Text> ancestor"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should throw for text not inside of a <Text> ancestor","location":{"column":3,"line":411},"status":"passed","title":"should throw for text not inside of a <Text> ancestor"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative should not throw for text inside of an indirect <Text> ancestor","location":{"column":3,"line":439},"status":"passed","title":"should not throw for text inside of an indirect <Text> ancestor"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative findHostInstance_DEPRECATED should warn if used to find a host component inside StrictMode","location":{"column":3,"line":455},"status":"passed","title":"findHostInstance_DEPRECATED should warn if used to find a host component inside StrictMode"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative findHostInstance_DEPRECATED should warn if passed a component that is inside StrictMode","location":{"column":3,"line":491},"status":"passed","title":"findHostInstance_DEPRECATED should warn if passed a component that is inside StrictMode"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative findNodeHandle should warn if used to find a host component inside StrictMode","location":{"column":3,"line":528},"status":"passed","title":"findNodeHandle should warn if used to find a host component inside StrictMode"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative findNodeHandle should warn if passed a component that is inside StrictMode","location":{"column":3,"line":562},"status":"passed","title":"findNodeHandle should warn if passed a component that is inside StrictMode"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative blur on host component calls TextInputState","location":{"column":3,"line":597},"status":"passed","title":"blur on host component calls TextInputState"},{"ancestorTitles":["ReactNative"],"failureMessages":[],"fullName":"ReactNative focus on host component calls TextInputState","location":{"column":3,"line":614},"status":"passed","title":"focus on host component calls TextInputState"}],"endTime":1639319041083,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/ReactNativeMount-test.internal.js","startTime":1639319039763,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"fails to register the same event name with different types","location":{"column":1,"line":79},"status":"passed","title":"fails to register the same event name with different types"},{"ancestorTitles":[],"failureMessages":[],"fullName":"fails if unknown/unsupported event types are dispatched","location":{"column":1,"line":122},"status":"passed","title":"fails if unknown/unsupported event types are dispatched"},{"ancestorTitles":[],"failureMessages":[],"fullName":"handles events","location":{"column":1,"line":143},"status":"passed","title":"handles events"},{"ancestorTitles":[],"failureMessages":[],"fullName":"handles events on text nodes","location":{"column":1,"line":199},"status":"passed","title":"handles events on text nodes"},{"ancestorTitles":[],"failureMessages":[],"fullName":"handles when a responder is unmounted while a touch sequence is in progress","location":{"column":1,"line":282},"status":"passed","title":"handles when a responder is unmounted while a touch sequence is in progress"},{"ancestorTitles":[],"failureMessages":[],"fullName":"handles events without target","location":{"column":1,"line":371},"status":"passed","title":"handles events without target"},{"ancestorTitles":[],"failureMessages":[],"fullName":"dispatches event with target as instance","location":{"column":1,"line":461},"status":"passed","title":"dispatches event with target as instance"}],"endTime":1639319041748,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/ReactNativeEvents-test.internal.js","startTime":1639319041153,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should work with simple example","location":{"column":3,"line":16},"status":"passed","title":"should work with simple example"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should skip fields that are equal","location":{"column":3,"line":23},"status":"passed","title":"should skip fields that are equal"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should remove fields","location":{"column":3,"line":33},"status":"passed","title":"should remove fields"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should remove fields that are set to undefined","location":{"column":3,"line":37},"status":"passed","title":"should remove fields that are set to undefined"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should ignore invalid fields","location":{"column":3,"line":41},"status":"passed","title":"should ignore invalid fields"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should use the diff attribute","location":{"column":3,"line":45},"status":"passed","title":"should use the diff attribute"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should not use the diff attribute on addition/removal","location":{"column":3,"line":59},"status":"passed","title":"should not use the diff attribute on addition/removal"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should do deep diffs of Objects by default","location":{"column":3,"line":69},"status":"passed","title":"should do deep diffs of Objects by default"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should work with undefined styles","location":{"column":3,"line":79},"status":"passed","title":"should work with undefined styles"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should work with empty styles","location":{"column":3,"line":99},"status":"passed","title":"should work with empty styles"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should flatten nested styles and predefined styles","location":{"column":3,"line":105},"status":"passed","title":"should flatten nested styles and predefined styles"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should reset a value to a previous if it is removed","location":{"column":3,"line":129},"status":"passed","title":"should reset a value to a previous if it is removed"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should not clear removed props if they are still in another slot","location":{"column":3,"line":141},"status":"passed","title":"should not clear removed props if they are still in another slot"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should clear a prop if a later style is explicit null/undefined","location":{"column":3,"line":161},"status":"passed","title":"should clear a prop if a later style is explicit null/undefined"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should convert functions to booleans","location":{"column":3,"line":208},"status":"passed","title":"should convert functions to booleans"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should skip changed functions","location":{"column":3,"line":235},"status":"passed","title":"should skip changed functions"},{"ancestorTitles":["ReactNativeAttributePayload"],"failureMessages":[],"fullName":"ReactNativeAttributePayload should skip deeply-nested changed functions","location":{"column":3,"line":253},"status":"passed","title":"should skip deeply-nested changed functions"}],"endTime":1639319042026,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/ReactNativeAttributePayload-test.js","startTime":1639319041809,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should be able to create and render a native component","location":{"column":3,"line":48},"status":"passed","title":"should be able to create and render a native component"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should be able to create and update a native component","location":{"column":3,"line":60},"status":"passed","title":"should be able to create and update a native component"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should not call FabricUIManager.cloneNode after render for properties that have not changed","location":{"column":3,"line":90},"status":"passed","title":"should not call FabricUIManager.cloneNode after render for properties that have not changed"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should only pass props diffs to FabricUIManager.cloneNode","location":{"column":3,"line":151},"status":"passed","title":"should only pass props diffs to FabricUIManager.cloneNode"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should not call UIManager.updateView from ref.setNativeProps","location":{"column":3,"line":201},"status":"passed","title":"should not call UIManager.updateView from ref.setNativeProps"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should call dispatchCommand for native refs","location":{"column":3,"line":237},"status":"passed","title":"should call dispatchCommand for native refs"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should warn and no-op if calling dispatchCommand on non native refs","location":{"column":3,"line":263},"status":"passed","title":"should warn and no-op if calling dispatchCommand on non native refs"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should call FabricUIManager.measure on ref.measure","location":{"column":3,"line":292},"status":"passed","title":"should call FabricUIManager.measure on ref.measure"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should call FabricUIManager.measureInWindow on ref.measureInWindow","location":{"column":3,"line":318},"status":"passed","title":"should call FabricUIManager.measureInWindow on ref.measureInWindow"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should support ref in ref.measureLayout","location":{"column":3,"line":344},"status":"passed","title":"should support ref in ref.measureLayout"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric returns the correct instance and calls it in the callback","location":{"column":3,"line":380},"status":"passed","title":"returns the correct instance and calls it in the callback"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric renders and reorders children","location":{"column":3,"line":401},"status":"passed","title":"renders and reorders children"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric recreates host parents even if only children changed","location":{"column":3,"line":435},"status":"passed","title":"recreates host parents even if only children changed"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric calls setState with no arguments","location":{"column":3,"line":482},"status":"passed","title":"calls setState with no arguments"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should call complete after inserting children","location":{"column":3,"line":497},"status":"passed","title":"should call complete after inserting children"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should not throw when <View> is used inside of a <Text> ancestor","location":{"column":3,"line":522},"status":"passed","title":"should not throw when <View> is used inside of a <Text> ancestor"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should throw for text not inside of a <Text> ancestor","location":{"column":3,"line":551},"status":"passed","title":"should throw for text not inside of a <Text> ancestor"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric should not throw for text inside of an indirect <Text> ancestor","location":{"column":3,"line":579},"status":"passed","title":"should not throw for text inside of an indirect <Text> ancestor"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric dispatches events to the last committed props","location":{"column":3,"line":595},"status":"passed","title":"dispatches events to the last committed props"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric dispatches event with target as instance","location":{"column":3,"line":650},"status":"passed","title":"dispatches event with target as instance"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric findHostInstance_DEPRECATED should warn if used to find a host component inside StrictMode","location":{"column":3,"line":745},"status":"passed","title":"findHostInstance_DEPRECATED should warn if used to find a host component inside StrictMode"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric findHostInstance_DEPRECATED should warn if passed a component that is inside StrictMode","location":{"column":3,"line":781},"status":"passed","title":"findHostInstance_DEPRECATED should warn if passed a component that is inside StrictMode"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric findNodeHandle should warn if used to find a host component inside StrictMode","location":{"column":3,"line":818},"status":"passed","title":"findNodeHandle should warn if used to find a host component inside StrictMode"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric findNodeHandle should warn if passed a component that is inside StrictMode","location":{"column":3,"line":852},"status":"passed","title":"findNodeHandle should warn if passed a component that is inside StrictMode"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric blur on host component calls TextInputState","location":{"column":3,"line":887},"status":"passed","title":"blur on host component calls TextInputState"},{"ancestorTitles":["ReactFabric"],"failureMessages":[],"fullName":"ReactFabric focus on host component calls TextInputState","location":{"column":3,"line":904},"status":"passed","title":"focus on host component calls TextInputState"}],"endTime":1639319043655,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-native-renderer/src/__tests__/ReactFabric-test.internal.js","startTime":1639319042087,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFlightDOM"],"failureMessages":[],"fullName":"ReactFlightDOM should resolve HTML using Node streams","location":{"column":3,"line":107},"status":"passed","title":"should resolve HTML using Node streams"},{"ancestorTitles":["ReactFlightDOM"],"failureMessages":[],"fullName":"ReactFlightDOM [GATED, SHOULD FAIL] should resolve the root","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should resolve the root"},{"ancestorTitles":["ReactFlightDOM"],"failureMessages":[],"fullName":"ReactFlightDOM [GATED, SHOULD FAIL] should not get confused by $","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not get confused by $"},{"ancestorTitles":["ReactFlightDOM"],"failureMessages":[],"fullName":"ReactFlightDOM [GATED, SHOULD FAIL] should not get confused by @","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should not get confused by @"},{"ancestorTitles":["ReactFlightDOM"],"failureMessages":[],"fullName":"ReactFlightDOM [GATED, SHOULD FAIL] should progressively reveal Blocks","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should progressively reveal Blocks"}],"endTime":1639319044432,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-transport-dom-webpack/src/__tests__/ReactFlightDOM-test.js","startTime":1639319043730,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFlightDOMBrowser"],"failureMessages":[],"fullName":"ReactFlightDOMBrowser should resolve HTML using W3C streams","location":{"column":3,"line":44},"status":"passed","title":"should resolve HTML using W3C streams"}],"endTime":1639319044742,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-transport-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js","startTime":1639319044495,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactErrorProd"],"failureMessages":[],"fullName":"ReactErrorProd should throw with the correct number of `%s`s in the URL","location":{"column":3,"line":19},"status":"passed","title":"should throw with the correct number of `%s`s in the URL"}],"endTime":1639319044958,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/shared/__tests__/ReactErrorProd-test.internal.js","startTime":1639319044814,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactError"],"failureMessages":[],"fullName":"ReactError [GATED, SHOULD FAIL] should error with minified error code","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should error with minified error code"},{"ancestorTitles":["ReactError"],"failureMessages":[],"fullName":"ReactError [GATED, SHOULD FAIL] should serialize arguments","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should serialize arguments"}],"endTime":1639319045333,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/shared/__tests__/ReactError-test.internal.js","startTime":1639319045038,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactSymbols"],"failureMessages":[],"fullName":"ReactSymbols Symbol values should be unique","location":{"column":3,"line":26},"status":"passed","title":"Symbol values should be unique"},{"ancestorTitles":["ReactSymbols"],"failureMessages":[],"fullName":"ReactSymbols numeric values should be unique","location":{"column":3,"line":30},"status":"passed","title":"numeric values should be unique"}],"endTime":1639319045569,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/shared/__tests__/ReactSymbols-test.internal.js","startTime":1639319045412,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMFrameScheduling"],"failureMessages":[],"fullName":"ReactDOMFrameScheduling warns when requestAnimationFrame is not polyfilled in the browser","location":{"column":3,"line":25},"status":"passed","title":"warns when requestAnimationFrame is not polyfilled in the browser"},{"ancestorTitles":["ReactDOMFrameScheduling"],"failureMessages":[],"fullName":"ReactDOMFrameScheduling can import findDOMNode in Node environment","location":{"column":3,"line":50},"status":"passed","title":"can import findDOMNode in Node environment"}],"endTime":1639319045934,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/shared/__tests__/ReactDOMFrameScheduling-test.js","startTime":1639319045636,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils it should rethrow caught errors","location":{"column":3,"line":20},"status":"passed","title":"it should rethrow caught errors"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils should call the callback the passed arguments","location":{"column":3,"line":34},"status":"passed","title":"should call the callback the passed arguments"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils should call the callback with the provided context","location":{"column":3,"line":46},"status":"passed","title":"should call the callback with the provided context"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils should catch errors","location":{"column":3,"line":58},"status":"passed","title":"should catch errors"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils should return false from clearCaughtError if no error was thrown","location":{"column":3,"line":74},"status":"passed","title":"should return false from clearCaughtError if no error was thrown"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils can nest with same debug name","location":{"column":3,"line":81},"status":"passed","title":"can nest with same debug name"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils handles nested errors","location":{"column":3,"line":106},"status":"passed","title":"handles nested errors"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils handles nested errors in separate renderers","location":{"column":3,"line":129},"status":"passed","title":"handles nested errors in separate renderers"},{"ancestorTitles":["ReactErrorUtils"],"failureMessages":[],"fullName":"ReactErrorUtils can be shimmed","location":{"column":3,"line":176},"status":"passed","title":"can be shimmed"}],"endTime":1639319046195,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/shared/__tests__/ReactErrorUtils-test.internal.js","startTime":1639319046001,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Component stack trace displaying"],"failureMessages":[],"fullName":"Component stack trace displaying [GATED, SHOULD FAIL] should provide filenames in stack traces","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should provide filenames in stack traces"}],"endTime":1639319046498,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/shared/__tests__/describeComponentFrame-test.js","startTime":1639319046261,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should return the value of a traced function","location":{"column":5,"line":38},"status":"passed","title":"should return the value of a traced function"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should return the value of a clear function","location":{"column":5,"line":44},"status":"passed","title":"should return the value of a clear function"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should return the value of a wrapped function","location":{"column":5,"line":48},"status":"passed","title":"should return the value of a wrapped function"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should pass arguments through to a wrapped function","location":{"column":5,"line":56},"status":"passed","title":"should pass arguments through to a wrapped function"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should return an empty set when outside of a traced event","location":{"column":5,"line":68},"status":"passed","title":"should return an empty set when outside of a traced event"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should report the traced interaction from within the trace callback","location":{"column":5,"line":72},"status":"passed","title":"should report the traced interaction from within the trace callback"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should report the traced interaction from within wrapped callbacks","location":{"column":5,"line":85},"status":"passed","title":"should report the traced interaction from within wrapped callbacks"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should clear the interaction stack for traced callbacks","location":{"column":5,"line":108},"status":"passed","title":"should clear the interaction stack for traced callbacks"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should clear the interaction stack for wrapped callbacks","location":{"column":5,"line":138},"status":"passed","title":"should clear the interaction stack for wrapped callbacks"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled should support nested traced events","location":{"column":5,"line":175},"status":"passed","title":"should support nested traced events"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled","error handling"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled error handling should reset state appropriately when an error occurs in a trace callback","location":{"column":7,"line":252},"status":"passed","title":"should reset state appropriately when an error occurs in a trace callback"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled","error handling"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled error handling should reset state appropriately when an error occurs in a wrapped callback","location":{"column":7,"line":270},"status":"passed","title":"should reset state appropriately when an error occurs in a wrapped callback"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled","advanced integration"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled advanced integration should return a unique threadID per request","location":{"column":7,"line":294},"status":"passed","title":"should return a unique threadID per request"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled","advanced integration"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled advanced integration should expose the current set of interactions to be externally manipulated","location":{"column":7,"line":300},"status":"passed","title":"should expose the current set of interactions to be externally manipulated"},{"ancestorTitles":["Tracing","enableSchedulerTracing enabled","advanced integration"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing enabled advanced integration should expose a subscriber ref to be externally manipulated","location":{"column":7,"line":316},"status":"passed","title":"should expose a subscriber ref to be externally manipulated"},{"ancestorTitles":["Tracing","enableSchedulerTracing disabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing disabled should return the value of a traced function","location":{"column":5,"line":329},"status":"passed","title":"should return the value of a traced function"},{"ancestorTitles":["Tracing","enableSchedulerTracing disabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing disabled should return the value of a wrapped function","location":{"column":5,"line":335},"status":"passed","title":"should return the value of a wrapped function"},{"ancestorTitles":["Tracing","enableSchedulerTracing disabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing disabled should return null for traced interactions","location":{"column":5,"line":343},"status":"passed","title":"should return null for traced interactions"},{"ancestorTitles":["Tracing","enableSchedulerTracing disabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing disabled should execute traced callbacks","location":{"column":5,"line":347},"status":"passed","title":"should execute traced callbacks"},{"ancestorTitles":["Tracing","enableSchedulerTracing disabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing disabled should return the value of a clear function","location":{"column":5,"line":355},"status":"passed","title":"should return the value of a clear function"},{"ancestorTitles":["Tracing","enableSchedulerTracing disabled"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing disabled should execute wrapped callbacks","location":{"column":5,"line":359},"status":"passed","title":"should execute wrapped callbacks"},{"ancestorTitles":["Tracing","enableSchedulerTracing disabled","advanced integration"],"failureMessages":[],"fullName":"Tracing enableSchedulerTracing disabled advanced integration should not create unnecessary objects","location":{"column":7,"line":370},"status":"passed","title":"should not create unnecessary objects"}],"endTime":1639319046798,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/Tracing-test.internal.js","startTime":1639319046559,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Scheduling UMD bundle"],"failureMessages":[],"fullName":"Scheduling UMD bundle should define the same scheduling API","location":{"column":3,"line":53},"status":"passed","title":"should define the same scheduling API"},{"ancestorTitles":["Scheduling UMD bundle"],"failureMessages":[],"fullName":"Scheduling UMD bundle should define the same tracing API","location":{"column":3,"line":68},"status":"passed","title":"should define the same tracing API"}],"endTime":1639319047127,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/SchedulerUMDBundle-test.internal.js","startTime":1639319046871,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler flushes work incrementally","location":{"column":3,"line":45},"status":"passed","title":"flushes work incrementally"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler cancels work","location":{"column":3,"line":56},"status":"passed","title":"cancels work"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler executes the highest priority callbacks first","location":{"column":3,"line":72},"status":"passed","title":"executes the highest priority callbacks first"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler expires work","location":{"column":3,"line":90},"status":"passed","title":"expires work"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler has a default expiration of ~5 seconds","location":{"column":3,"line":136},"status":"passed","title":"has a default expiration of ~5 seconds"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler continues working on same task after yielding","location":{"column":3,"line":146},"status":"passed","title":"continues working on same task after yielding"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler continuation callbacks inherit the expiration of the previous callback","location":{"column":3,"line":194},"status":"passed","title":"continuation callbacks inherit the expiration of the previous callback"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler continuations are interrupted by higher priority work","location":{"column":3,"line":223},"status":"passed","title":"continuations are interrupted by higher priority work"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler continuations do not block higher priority work scheduled inside an executing callback","location":{"column":3,"line":251},"status":"passed","title":"continuations do not block higher priority work scheduled inside an executing callback"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler cancelling a continuation","location":{"column":3,"line":296},"status":"passed","title":"cancelling a continuation"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler top-level immediate callbacks fire in a subsequent task","location":{"column":3,"line":309},"status":"passed","title":"top-level immediate callbacks fire in a subsequent task"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler nested immediate callbacks are added to the queue of immediate callbacks","location":{"column":3,"line":328},"status":"passed","title":"nested immediate callbacks are added to the queue of immediate callbacks"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler wrapped callbacks have same signature as original callback","location":{"column":3,"line":347},"status":"passed","title":"wrapped callbacks have same signature as original callback"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler wrapped callbacks inherit the current priority","location":{"column":3,"line":352},"status":"passed","title":"wrapped callbacks inherit the current priority"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler wrapped callbacks inherit the current priority even when nested","location":{"column":3,"line":374},"status":"passed","title":"wrapped callbacks inherit the current priority even when nested"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler immediate callbacks fire even if there's an error","location":{"column":3,"line":396},"status":"passed","title":"immediate callbacks fire even if there's an error"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler multiple immediate callbacks can throw and there will be an error for each one","location":{"column":3,"line":418},"status":"passed","title":"multiple immediate callbacks can throw and there will be an error for each one"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler exposes the current priority level","location":{"column":3,"line":430},"status":"passed","title":"exposes the current priority level"},{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler adds extra function to the JS stack whose name includes the priority level","location":{"column":8,"line":457},"status":"pending","title":"adds extra function to the JS stack whose name includes the priority level"},{"ancestorTitles":["Scheduler","delayed tasks"],"failureMessages":[],"fullName":"Scheduler delayed tasks schedules a delayed task","location":{"column":5,"line":522},"status":"passed","title":"schedules a delayed task"},{"ancestorTitles":["Scheduler","delayed tasks"],"failureMessages":[],"fullName":"Scheduler delayed tasks schedules multiple delayed tasks","location":{"column":5,"line":546},"status":"passed","title":"schedules multiple delayed tasks"},{"ancestorTitles":["Scheduler","delayed tasks"],"failureMessages":[],"fullName":"Scheduler delayed tasks interleaves normal tasks and delayed tasks","location":{"column":5,"line":593},"status":"passed","title":"interleaves normal tasks and delayed tasks"},{"ancestorTitles":["Scheduler","delayed tasks"],"failureMessages":[],"fullName":"Scheduler delayed tasks interleaves delayed tasks with time-sliced tasks","location":{"column":5,"line":637},"status":"passed","title":"interleaves delayed tasks with time-sliced tasks"},{"ancestorTitles":["Scheduler","delayed tasks"],"failureMessages":[],"fullName":"Scheduler delayed tasks cancels a delayed task","location":{"column":5,"line":683},"status":"passed","title":"cancels a delayed task"},{"ancestorTitles":["Scheduler","delayed tasks"],"failureMessages":[],"fullName":"Scheduler delayed tasks gracefully handles scheduled tasks that are not a function","location":{"column":5,"line":715},"status":"passed","title":"gracefully handles scheduled tasks that are not a function"}],"endTime":1639319047516,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/Scheduler-test.js","startTime":1639319047193,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Tracing"],"failureMessages":[],"fullName":"Tracing should return the value of a traced function","location":{"column":3,"line":20},"status":"passed","title":"should return the value of a traced function"},{"ancestorTitles":["Tracing"],"failureMessages":[],"fullName":"Tracing should return the value of a wrapped function","location":{"column":3,"line":26},"status":"passed","title":"should return the value of a wrapped function"},{"ancestorTitles":["Tracing"],"failureMessages":[],"fullName":"Tracing should execute traced callbacks","location":{"column":3,"line":34},"status":"passed","title":"should execute traced callbacks"},{"ancestorTitles":["Tracing"],"failureMessages":[],"fullName":"Tracing should return the value of a clear function","location":{"column":3,"line":40},"status":"passed","title":"should return the value of a clear function"},{"ancestorTitles":["Tracing"],"failureMessages":[],"fullName":"Tracing should execute wrapped callbacks","location":{"column":3,"line":44},"status":"passed","title":"should execute wrapped callbacks"}],"endTime":1639319047731,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/Tracing-test.js","startTime":1639319047583,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["TracingSubscriptions","enabled"],"failureMessages":[],"fullName":"TracingSubscriptions enabled should lazily subscribe to tracing and unsubscribe again if there are no external subscribers","location":{"column":5,"line":112},"status":"passed","title":"should lazily subscribe to tracing and unsubscribe again if there are no external subscribers"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover onInteractionTraced/onWorkStarted within","location":{"column":7,"line":127},"status":"passed","title":"should cover onInteractionTraced/onWorkStarted within"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover onWorkStopped within trace","location":{"column":7,"line":168},"status":"passed","title":"should cover onWorkStopped within trace"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover onInteractionScheduledWorkCompleted within trace","location":{"column":7,"line":202},"status":"passed","title":"should cover onInteractionScheduledWorkCompleted within trace"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover the callback within trace","location":{"column":7,"line":230},"status":"passed","title":"should cover the callback within trace"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover onWorkScheduled within wrap","location":{"column":7,"line":246},"status":"passed","title":"should cover onWorkScheduled within wrap"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover onWorkStarted within wrap","location":{"column":7,"line":268},"status":"passed","title":"should cover onWorkStarted within wrap"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover onWorkStopped within wrap","location":{"column":7,"line":290},"status":"passed","title":"should cover onWorkStopped within wrap"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover the callback within wrap","location":{"column":7,"line":334},"status":"passed","title":"should cover the callback within wrap"},{"ancestorTitles":["TracingSubscriptions","enabled","error handling"],"failureMessages":[],"fullName":"TracingSubscriptions enabled error handling should cover onWorkCanceled within wrap","location":{"column":7,"line":359},"status":"passed","title":"should cover onWorkCanceled within wrap"},{"ancestorTitles":["TracingSubscriptions","enabled"],"failureMessages":[],"fullName":"TracingSubscriptions enabled calls lifecycle methods for trace","location":{"column":5,"line":383},"status":"passed","title":"calls lifecycle methods for trace"},{"ancestorTitles":["TracingSubscriptions","enabled"],"failureMessages":[],"fullName":"TracingSubscriptions enabled calls lifecycle methods for wrap","location":{"column":5,"line":451},"status":"passed","title":"calls lifecycle methods for wrap"},{"ancestorTitles":["TracingSubscriptions","enabled"],"failureMessages":[],"fullName":"TracingSubscriptions enabled should call the correct interaction subscriber methods when a wrapped callback is canceled","location":{"column":5,"line":503},"status":"passed","title":"should call the correct interaction subscriber methods when a wrapped callback is canceled"},{"ancestorTitles":["TracingSubscriptions","enabled"],"failureMessages":[],"fullName":"TracingSubscriptions enabled should not end an interaction twice if wrap is used to schedule follow up work within another wrap","location":{"column":5,"line":548},"status":"passed","title":"should not end an interaction twice if wrap is used to schedule follow up work within another wrap"},{"ancestorTitles":["TracingSubscriptions","enabled"],"failureMessages":[],"fullName":"TracingSubscriptions enabled should not decrement the interaction count twice if a wrapped function is run twice","location":{"column":5,"line":575},"status":"passed","title":"should not decrement the interaction count twice if a wrapped function is run twice"},{"ancestorTitles":["TracingSubscriptions","enabled"],"failureMessages":[],"fullName":"TracingSubscriptions enabled should unsubscribe","location":{"column":5,"line":608},"status":"passed","title":"should unsubscribe"}],"endTime":1639319048077,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/TracingSubscriptions-test.internal.js","startTime":1639319047804,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SchedulerNoDOM"],"failureMessages":[],"fullName":"SchedulerNoDOM runAllTimers flushes all scheduled callbacks","location":{"column":3,"line":41},"status":"passed","title":"runAllTimers flushes all scheduled callbacks"},{"ancestorTitles":["SchedulerNoDOM"],"failureMessages":[],"fullName":"SchedulerNoDOM executes callbacks in order of priority","location":{"column":3,"line":57},"status":"passed","title":"executes callbacks in order of priority"},{"ancestorTitles":["SchedulerNoDOM"],"failureMessages":[],"fullName":"SchedulerNoDOM handles errors","location":{"column":3,"line":78},"status":"passed","title":"handles errors"}],"endTime":1639319048313,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/SchedulerNoDOM-test.js","startTime":1639319048143,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Scheduler"],"failureMessages":[],"fullName":"Scheduler profiling APIs are not available","location":{"column":5,"line":49},"status":"passed","title":"profiling APIs are not available"}],"endTime":1639319048593,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/SchedulerProfiling-test.js","startTime":1639319048375,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask task that finishes before deadline","location":{"column":3,"line":154},"status":"passed","title":"task that finishes before deadline"},{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask task with continuation","location":{"column":3,"line":163},"status":"passed","title":"task with continuation"},{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask multiple tasks","location":{"column":3,"line":188},"status":"passed","title":"multiple tasks"},{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask cancels tasks","location":{"column":3,"line":203},"status":"passed","title":"cancels tasks"},{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask an error in one task does not affect execution of other tasks","location":{"column":3,"line":213},"status":"passed","title":"an error in one task does not affect execution of other tasks"},{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask schedule new task after queue has emptied","location":{"column":3,"line":228},"status":"passed","title":"schedule new task after queue has emptied"},{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask schedule new task after a cancellation","location":{"column":3,"line":245},"status":"passed","title":"schedule new task after a cancellation"},{"ancestorTitles":["SchedulerPostTask"],"failureMessages":[],"fullName":"SchedulerPostTask schedules tasks at different priorities","location":{"column":3,"line":264},"status":"passed","title":"schedules tasks at different priorities"}],"endTime":1639319048893,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/SchedulerPostTask-test.js","startTime":1639319048653,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser task that finishes before deadline","location":{"column":3,"line":147},"status":"passed","title":"task that finishes before deadline"},{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser task with continuation","location":{"column":3,"line":156},"status":"passed","title":"task with continuation"},{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser multiple tasks","location":{"column":3,"line":181},"status":"passed","title":"multiple tasks"},{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser multiple tasks with a yield in between","location":{"column":3,"line":193},"status":"passed","title":"multiple tasks with a yield in between"},{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser cancels tasks","location":{"column":3,"line":213},"status":"passed","title":"cancels tasks"},{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser throws when a task errors then continues in a new event","location":{"column":3,"line":222},"status":"passed","title":"throws when a task errors then continues in a new event"},{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser schedule new task after queue has emptied","location":{"column":3,"line":239},"status":"passed","title":"schedule new task after queue has emptied"},{"ancestorTitles":["SchedulerBrowser"],"failureMessages":[],"fullName":"SchedulerBrowser schedule new task after a cancellation","location":{"column":3,"line":256},"status":"passed","title":"schedule new task after a cancellation"}],"endTime":1639319049158,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/scheduler/src/__tests__/SchedulerBrowser-test.js","startTime":1639319048961,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because components can use hooks.\n      function ComponentWithHook() {\n        useHook();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because components can use hooks.\n      function ComponentWithHook() {\n        useHook();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because components can use hooks.\n      function createComponentWithHook() {\n        return function ComponentWithHook() {\n          useHook();\n        };\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because components can use hooks.\n      function createComponentWithHook() {\n        return function ComponentWithHook() {\n          useHook();\n        };\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can use hooks.\n      function useHookWithHook() {\n        useHook();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can use hooks.\n      function useHookWithHook() {\n        useHook();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can use hooks.\n      function createHook() {\n        return function useHookWithHook() {\n          useHook();\n        }\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can use hooks.\n      function createHook() {\n        return function useHookWithHook() {\n          useHook();\n        }\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because components can call functions.\n      function ComponentWithNormalFunction() {\n        doSomething();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because components can call functions.\n      function ComponentWithNormalFunction() {\n        doSomething();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because functions can call functions.\n      function normalFunctionWithNormalFunction() {\n        doSomething();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because functions can call functions.\n      function normalFunctionWithNormalFunction() {\n        doSomething();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because functions can call functions.\n      function normalFunctionWithConditionalFunction() {\n        if (cond) {\n          doSomething();\n        }\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because functions can call functions.\n      function normalFunctionWithConditionalFunction() {\n        if (cond) {\n          doSomething();\n        }\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because functions can call functions.\n      function functionThatStartsWithUseButIsntAHook() {\n        if (cond) {\n          userFetch();\n        }\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because functions can call functions.\n      function functionThatStartsWithUseButIsntAHook() {\n        if (cond) {\n          userFetch();\n        }\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid although unconditional return doesn't make sense and would fail other rules.\n      // We could make it invalid but it doesn't matter.\n      function useUnreachable() {\n        return;\n        useHook();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid although unconditional return doesn't make sense and would fail other rules.\n      // We could make it invalid but it doesn't matter.\n      function useUnreachable() {\n        return;\n        useHook();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can call hooks.\n      function useHook() { useState(); }\n      const whatever = function useHook() { useState(); };\n      const useHook1 = () => { useState(); };\n      let useHook2 = () => useState();\n      useHook2 = () => { useState(); };\n      ({useHook: () => { useState(); }});\n      ({useHook() { useState(); }});\n      const {useHook3 = () => { useState(); }} = {};\n      ({useHook = () => { useState(); }} = {});\n      Namespace.useHook = () => { useState(); };\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can call hooks.\n      function useHook() { useState(); }\n      const whatever = function useHook() { useState(); };\n      const useHook1 = () => { useState(); };\n      let useHook2 = () => useState();\n      useHook2 = () => { useState(); };\n      ({useHook: () => { useState(); }});\n      ({useHook() { useState(); }});\n      const {useHook3 = () => { useState(); }} = {};\n      ({useHook = () => { useState(); }} = {});\n      Namespace.useHook = () => { useState(); };\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can call hooks.\n      function useHook() {\n        useHook1();\n        useHook2();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can call hooks.\n      function useHook() {\n        useHook1();\n        useHook2();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can call hooks.\n      function createHook() {\n        return function useHook() {\n          useHook1();\n          useHook2();\n        };\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can call hooks.\n      function createHook() {\n        return function useHook() {\n          useHook1();\n          useHook2();\n        };\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can call hooks.\n      function useHook() {\n        useState() && a;\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can call hooks.\n      function useHook() {\n        useState() && a;\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can call hooks.\n      function useHook() {\n        return useHook1() + useHook2();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can call hooks.\n      function useHook() {\n        return useHook1() + useHook2();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can call hooks.\n      function useHook() {\n        return useHook1(useHook2());\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can call hooks.\n      function useHook() {\n        return useHook1(useHook2());\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can be used in anonymous arrow-function arguments\n      // to forwardRef.\n      const FancyButton = React.forwardRef((props, ref) => {\n        useHook();\n        return <button {...props} ref={ref} />\n      });\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can be used in anonymous arrow-function arguments\n      // to forwardRef.\n      const FancyButton = React.forwardRef((props, ref) => {\n        useHook();\n        return <button {...props} ref={ref} />\n      });\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can be used in anonymous function arguments to\n      // forwardRef.\n      const FancyButton = React.forwardRef(function (props, ref) {\n        useHook();\n        return <button {...props} ref={ref} />\n      });\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can be used in anonymous function arguments to\n      // forwardRef.\n      const FancyButton = React.forwardRef(function (props, ref) {\n        useHook();\n        return <button {...props} ref={ref} />\n      });\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can be used in anonymous function arguments to\n      // forwardRef.\n      const FancyButton = forwardRef(function (props, ref) {\n        useHook();\n        return <button {...props} ref={ref} />\n      });\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can be used in anonymous function arguments to\n      // forwardRef.\n      const FancyButton = forwardRef(function (props, ref) {\n        useHook();\n        return <button {...props} ref={ref} />\n      });\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can be used in anonymous function arguments to\n      // React.memo.\n      const MemoizedFunction = React.memo(props => {\n        useHook();\n        return <button {...props} />\n      });\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can be used in anonymous function arguments to\n      // React.memo.\n      const MemoizedFunction = React.memo(props => {\n        useHook();\n        return <button {...props} />\n      });\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because hooks can be used in anonymous function arguments to\n      // memo.\n      const MemoizedFunction = memo(function (props) {\n        useHook();\n        return <button {...props} />\n      });\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because hooks can be used in anonymous function arguments to\n      // memo.\n      const MemoizedFunction = memo(function (props) {\n        useHook();\n        return <button {...props} />\n      });\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because classes can call functions.\n      // We don't consider these to be hooks.\n      class C {\n        m() {\n          this.useHook();\n          super.useHook();\n        }\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because classes can call functions.\n      // We don't consider these to be hooks.\n      class C {\n        m() {\n          this.useHook();\n          super.useHook();\n        }\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid -- this is a regression test.\n      jest.useFakeTimers();\n      beforeEach(() => {\n        jest.useRealTimers();\n      })\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid -- this is a regression test.\n      jest.useFakeTimers();\n      beforeEach(() => {\n        jest.useRealTimers();\n      })\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because they're not matching use[A-Z].\n      fooState();\n      use();\n      _use();\n      _useState();\n      use_hook();\n      // also valid because it's not matching the PascalCase namespace\n      jest.useFakeTimer()\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because they're not matching use[A-Z].\n      fooState();\n      use();\n      _use();\n      _useState();\n      use_hook();\n      // also valid because it's not matching the PascalCase namespace\n      jest.useFakeTimer()\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Regression test for some internal code.\n      // This shows how the \"callback rule\" is more relaxed,\n      // and doesn't kick in unless we're confident we're in\n      // a component or a hook.\n      function makeListener(instance) {\n        each(pixelsWithInferredEvents, pixel => {\n          if (useExtendedSelector(pixel.id) && extendedButton) {\n            foo();\n          }\n        });\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Regression test for some internal code.\n      // This shows how the \"callback rule\" is more relaxed,\n      // and doesn't kick in unless we're confident we're in\n      // a component or a hook.\n      function makeListener(instance) {\n        each(pixelsWithInferredEvents, pixel => {\n          if (useExtendedSelector(pixel.id) && extendedButton) {\n            foo();\n          }\n        });\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // This is valid because \"use\"-prefixed functions called in\n      // unnamed function arguments are not assumed to be hooks.\n      React.unknownFunction((foo, bar) => {\n        if (foo) {\n          useNotAHook(bar)\n        }\n      });\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // This is valid because \"use\"-prefixed functions called in\n      // unnamed function arguments are not assumed to be hooks.\n      React.unknownFunction((foo, bar) => {\n        if (foo) {\n          useNotAHook(bar)\n        }\n      });\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // This is valid because \"use\"-prefixed functions called in\n      // unnamed function arguments are not assumed to be hooks.\n      unknownFunction(function(foo, bar) {\n        if (foo) {\n          useNotAHook(bar)\n        }\n      });\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // This is valid because \"use\"-prefixed functions called in\n      // unnamed function arguments are not assumed to be hooks.\n      unknownFunction(function(foo, bar) {\n        if (foo) {\n          useNotAHook(bar)\n        }\n      });\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Regression test for incorrectly flagged valid code.\n      function RegressionTest() {\n        const foo = cond ? a : b;\n        useState();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Regression test for incorrectly flagged valid code.\n      function RegressionTest() {\n        const foo = cond ? a : b;\n        useState();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because exceptions abort rendering\n      function RegressionTest() {\n        if (page == null) {\n          throw new Error('oh no!');\n        }\n        useState();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because exceptions abort rendering\n      function RegressionTest() {\n        if (page == null) {\n          throw new Error('oh no!');\n        }\n        useState();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because the loop doesn't change the order of hooks calls.\n      function RegressionTest() {\n        const res = [];\n        const additionalCond = true;\n        for (let i = 0; i !== 10 && additionalCond; ++i ) {\n          res.push(i);\n        }\n        React.useLayoutEffect(() => {});\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because the loop doesn't change the order of hooks calls.\n      function RegressionTest() {\n        const res = [];\n        const additionalCond = true;\n        for (let i = 0; i !== 10 && additionalCond; ++i ) {\n          res.push(i);\n        }\n        React.useLayoutEffect(() => {});\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Is valid but hard to compute by brute-forcing\n      function MyComponent() {\n        // 40 conditions\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n\n        // 10 hooks\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Is valid but hard to compute by brute-forcing\n      function MyComponent() {\n        // 40 conditions\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n        if (c) {} else {}\n\n        // 10 hooks\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n        useHook();\n      }\n    "},{"ancestorTitles":["react-hooks","valid"],"failureMessages":[],"fullName":"react-hooks valid \n      // Valid because the neither the condition nor the loop affect the hook call.\n      function App(props) {\n        const someObject = {propA: true};\n        for (const propName in someObject) {\n          if (propName === true) {\n          } else {\n          }\n        }\n        const [myState, setMyState] = useState(null);\n      }\n    ","location":{"column":32,"line":884},"status":"passed","title":"\n      // Valid because the neither the condition nor the loop affect the hook call.\n      function App(props) {\n        const someObject = {propA: true};\n        for (const propName in someObject) {\n          if (propName === true) {\n          } else {\n          }\n        }\n        const [myState, setMyState] = useState(null);\n      }\n    "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithConditionalHook() {\n          if (cond) {\n            useConditionalHook();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithConditionalHook() {\n          if (cond) {\n            useConditionalHook();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        Hook.use();\n        Hook._use();\n        Hook.useState();\n        Hook._useState();\n        Hook.use42();\n        Hook.useHook();\n        Hook.use_hook();\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        Hook.use();\n        Hook._use();\n        Hook.useState();\n        Hook._useState();\n        Hook.use42();\n        Hook.useHook();\n        Hook.use_hook();\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        class C {\n          m() {\n            This.useHook();\n            Super.useHook();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        class C {\n          m() {\n            This.useHook();\n            Super.useHook();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // This is a false positive (it's valid) that unfortunately \n        // we cannot avoid. Prefer to rename it to not start with \"use\"\n        class Foo extends Component {\n          render() {\n            if (cond) {\n              FooStore.useFeatureFlag();\n            }\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // This is a false positive (it's valid) that unfortunately \n        // we cannot avoid. Prefer to rename it to not start with \"use\"\n        class Foo extends Component {\n          render() {\n            if (cond) {\n              FooStore.useFeatureFlag();\n            }\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithConditionalHook() {\n          if (cond) {\n            Namespace.useConditionalHook();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithConditionalHook() {\n          if (cond) {\n            Namespace.useConditionalHook();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function createComponent() {\n          return function ComponentWithConditionalHook() {\n            if (cond) {\n              useConditionalHook();\n            }\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function createComponent() {\n          return function ComponentWithConditionalHook() {\n            if (cond) {\n              useConditionalHook();\n            }\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHookWithConditionalHook() {\n          if (cond) {\n            useConditionalHook();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHookWithConditionalHook() {\n          if (cond) {\n            useConditionalHook();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function createHook() {\n          return function useHookWithConditionalHook() {\n            if (cond) {\n              useConditionalHook();\n            }\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function createHook() {\n          return function useHookWithConditionalHook() {\n            if (cond) {\n              useConditionalHook();\n            }\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithTernaryHook() {\n          cond ? useTernaryHook() : null;\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithTernaryHook() {\n          cond ? useTernaryHook() : null;\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function ComponentWithHookInsideCallback() {\n          useEffect(() => {\n            useHookInsideCallback();\n          });\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function ComponentWithHookInsideCallback() {\n          useEffect(() => {\n            useHookInsideCallback();\n          });\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function createComponent() {\n          return function ComponentWithHookInsideCallback() {\n            useEffect(() => {\n              useHookInsideCallback();\n            });\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function createComponent() {\n          return function ComponentWithHookInsideCallback() {\n            useEffect(() => {\n              useHookInsideCallback();\n            });\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        const ComponentWithHookInsideCallback = React.forwardRef((props, ref) => {\n          useEffect(() => {\n            useHookInsideCallback();\n          });\n          return <button {...props} ref={ref} />\n        });\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        const ComponentWithHookInsideCallback = React.forwardRef((props, ref) => {\n          useEffect(() => {\n            useHookInsideCallback();\n          });\n          return <button {...props} ref={ref} />\n        });\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        const ComponentWithHookInsideCallback = React.memo(props => {\n          useEffect(() => {\n            useHookInsideCallback();\n          });\n          return <button {...props} />\n        });\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        const ComponentWithHookInsideCallback = React.memo(props => {\n          useEffect(() => {\n            useHookInsideCallback();\n          });\n          return <button {...props} />\n        });\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function ComponentWithHookInsideCallback() {\n          function handleClick() {\n            useState();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function ComponentWithHookInsideCallback() {\n          function handleClick() {\n            useState();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function createComponent() {\n          return function ComponentWithHookInsideCallback() {\n            function handleClick() {\n              useState();\n            }\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's a common misunderstanding.\n        // We *could* make it valid but the runtime error could be confusing.\n        function createComponent() {\n          return function ComponentWithHookInsideCallback() {\n            function handleClick() {\n              useState();\n            }\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithHookInsideLoop() {\n          while (cond) {\n            useHookInsideLoop();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function ComponentWithHookInsideLoop() {\n          while (cond) {\n            useHookInsideLoop();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function renderItem() {\n          useState();\n        }\n\n        function List(props) {\n          return props.items.map(renderItem);\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function renderItem() {\n          useState();\n        }\n\n        function List(props) {\n          return props.items.map(renderItem);\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Currently invalid because it violates the convention and removes the \"taint\"\n        // from a hook. We *could* make it valid to avoid some false positives but let's\n        // ensure that we don't break the \"renderItem\" and \"normalFunctionWithConditionalHook\"\n        // cases which must remain invalid.\n        function normalFunctionWithHook() {\n          useHookInsideNormalFunction();\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Currently invalid because it violates the convention and removes the \"taint\"\n        // from a hook. We *could* make it valid to avoid some false positives but let's\n        // ensure that we don't break the \"renderItem\" and \"normalFunctionWithConditionalHook\"\n        // cases which must remain invalid.\n        function normalFunctionWithHook() {\n          useHookInsideNormalFunction();\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function normalFunctionWithConditionalHook() {\n          if (cond) {\n            useHookInsideNormalFunction();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function normalFunctionWithConditionalHook() {\n          if (cond) {\n            useHookInsideNormalFunction();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHookInLoops() {\n          while (a) {\n            useHook1();\n            if (b) return;\n            useHook2();\n          }\n          while (c) {\n            useHook3();\n            if (d) return;\n            useHook4();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHookInLoops() {\n          while (a) {\n            useHook1();\n            if (b) return;\n            useHook2();\n          }\n          while (c) {\n            useHook3();\n            if (d) return;\n            useHook4();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHookInLoops() {\n          while (a) {\n            useHook1();\n            if (b) continue;\n            useHook2();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHookInLoops() {\n          while (a) {\n            useHook1();\n            if (b) continue;\n            useHook2();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useLabeledBlock() {\n          label: {\n            if (a) break label;\n            useHook();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useLabeledBlock() {\n          label: {\n            if (a) break label;\n            useHook();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Currently invalid.\n        // These are variations capturing the current heuristic--\n        // we only allow hooks in PascalCase or useFoo functions.\n        // We *could* make some of these valid. But before doing it,\n        // consider specific cases documented above that contain reasoning.\n        function a() { useState(); }\n        const whatever = function b() { useState(); };\n        const c = () => { useState(); };\n        let d = () => useState();\n        e = () => { useState(); };\n        ({f: () => { useState(); }});\n        ({g() { useState(); }});\n        const {j = () => { useState(); }} = {};\n        ({k = () => { useState(); }} = {});\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Currently invalid.\n        // These are variations capturing the current heuristic--\n        // we only allow hooks in PascalCase or useFoo functions.\n        // We *could* make some of these valid. But before doing it,\n        // consider specific cases documented above that contain reasoning.\n        function a() { useState(); }\n        const whatever = function b() { useState(); };\n        const c = () => { useState(); };\n        let d = () => useState();\n        e = () => { useState(); };\n        ({f: () => { useState(); }});\n        ({g() { useState(); }});\n        const {j = () => { useState(); }} = {};\n        ({k = () => { useState(); }} = {});\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          if (a) return;\n          useState();\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          if (a) return;\n          useState();\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          if (a) return;\n          if (b) {\n            console.log('true');\n          } else {\n            console.log('false');\n          }\n          useState();\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          if (a) return;\n          if (b) {\n            console.log('true');\n          } else {\n            console.log('false');\n          }\n          useState();\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          if (b) {\n            console.log('true');\n          } else {\n            console.log('false');\n          }\n          if (a) return;\n          useState();\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          if (b) {\n            console.log('true');\n          } else {\n            console.log('false');\n          }\n          if (a) return;\n          useState();\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          a && useHook1();\n          b && useHook2();\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          a && useHook1();\n          b && useHook2();\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          try {\n            f();\n            useState();\n          } catch {}\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook() {\n          try {\n            f();\n            useState();\n          } catch {}\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook({ bar }) {\n          let foo1 = bar && useState();\n          let foo2 = bar || useState();\n          let foo3 = bar ?? useState();\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        function useHook({ bar }) {\n          let foo1 = bar && useState();\n          let foo2 = bar || useState();\n          let foo3 = bar ?? useState();\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        const FancyButton = React.forwardRef((props, ref) => {\n          if (props.fancy) {\n            useCustomHook();\n          }\n          return <button ref={ref}>{props.children}</button>;\n        });\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        const FancyButton = React.forwardRef((props, ref) => {\n          if (props.fancy) {\n            useCustomHook();\n          }\n          return <button ref={ref}>{props.children}</button>;\n        });\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        const FancyButton = forwardRef(function(props, ref) {\n          if (props.fancy) {\n            useCustomHook();\n          }\n          return <button ref={ref}>{props.children}</button>;\n        });\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        const FancyButton = forwardRef(function(props, ref) {\n          if (props.fancy) {\n            useCustomHook();\n          }\n          return <button ref={ref}>{props.children}</button>;\n        });\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        const MemoizedButton = memo(function(props) {\n          if (props.fancy) {\n            useCustomHook();\n          }\n          return <button>{props.children}</button>;\n        });\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous and might not warn otherwise.\n        // This *must* be invalid.\n        const MemoizedButton = memo(function(props) {\n          if (props.fancy) {\n            useCustomHook();\n          }\n          return <button>{props.children}</button>;\n        });\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // This is invalid because \"use\"-prefixed functions used in named\n        // functions are assumed to be hooks.\n        React.unknownFunction(function notAComponent(foo, bar) {\n          useProbablyAHook(bar)\n        });\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // This is invalid because \"use\"-prefixed functions used in named\n        // functions are assumed to be hooks.\n        React.unknownFunction(function notAComponent(foo, bar) {\n          useProbablyAHook(bar)\n        });\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Invalid because it's dangerous.\n        // Normally, this would crash, but not if you use inline requires.\n        // This *must* be invalid.\n        // It's expected to have some false positives, but arguably\n        // they are confusing anyway due to the use*() convention\n        // already being associated with Hooks.\n        useState();\n        if (foo) {\n          const foo = React.useCallback(() => {});\n        }\n        useCustomHook();\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Invalid because it's dangerous.\n        // Normally, this would crash, but not if you use inline requires.\n        // This *must* be invalid.\n        // It's expected to have some false positives, but arguably\n        // they are confusing anyway due to the use*() convention\n        // already being associated with Hooks.\n        useState();\n        if (foo) {\n          const foo = React.useCallback(() => {});\n        }\n        useCustomHook();\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        // Technically this is a false positive.\n        // We *could* make it valid (and it used to be).\n        //\n        // However, top-level Hook-like calls can be very dangerous\n        // in environments with inline requires because they can mask\n        // the runtime error by accident.\n        // So we prefer to disallow it despite the false positive.\n\n        const {createHistory, useBasename} = require('history-2.1.2');\n        const browserHistory = useBasename(createHistory)({\n          basename: '/',\n        });\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        // Technically this is a false positive.\n        // We *could* make it valid (and it used to be).\n        //\n        // However, top-level Hook-like calls can be very dangerous\n        // in environments with inline requires because they can mask\n        // the runtime error by accident.\n        // So we prefer to disallow it despite the false positive.\n\n        const {createHistory, useBasename} = require('history-2.1.2');\n        const browserHistory = useBasename(createHistory)({\n          basename: '/',\n        });\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        class ClassComponentWithFeatureFlag extends React.Component {\n          render() {\n            if (foo) {\n              useFeatureFlag();\n            }\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        class ClassComponentWithFeatureFlag extends React.Component {\n          render() {\n            if (foo) {\n              useFeatureFlag();\n            }\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        class ClassComponentWithHook extends React.Component {\n          render() {\n            React.useState();\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        class ClassComponentWithHook extends React.Component {\n          render() {\n            React.useState();\n          }\n        }\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        (class {useHook = () => { useState(); }});\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        (class {useHook = () => { useState(); }});\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        (class {useHook() { useState(); }});\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        (class {useHook() { useState(); }});\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        (class {h = () => { useState(); }});\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        (class {h = () => { useState(); }});\n      "},{"ancestorTitles":["react-hooks","invalid"],"failureMessages":[],"fullName":"react-hooks invalid \n        (class {i() { useState(); }});\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        (class {i() { useState(); }});\n      "}],"endTime":1639319050921,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/eslint-plugin-react-hooks/__tests__/ESLintRulesOfHooks-test.js","startTime":1639319049225,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example({ prop }) {\n  const bar = useEffect(<T>(a: T): Hello => {\n    prop();\n  }, [prop]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example({ prop }) {\n  const bar = useEffect(<T>(a: T): Hello => {\n    prop();\n  }, [prop]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","valid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint valid \nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = ({}: any);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = ({}: any);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n","location":{"column":32,"line":892},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      "},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Thing() {\n  useEffect(async () => {});\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: babel-eslint","invalid"],"failureMessages":[],"fullName":"react-hooks parser: babel-eslint invalid \nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example({ prop }) {\n  const bar = useEffect(<T>(a: T): Hello => {\n    prop();\n  }, [prop]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example({ prop }) {\n  const bar = useEffect(<T>(a: T): Hello => {\n    prop();\n  }, [prop]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","valid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser valid \nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = ({}: any);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = ({}: any);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n","location":{"column":32,"line":892},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      "},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Thing() {\n  useEffect(async () => {});\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @babel/eslint-parser","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @babel/eslint-parser invalid \nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber);\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber);\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction App() {\n  const foo = {x: 1};\n  React.useEffect(() => {\n    const bar = {x: 2};\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const foo = {x: 1};\n  React.useEffect(() => {\n    const bar = {x: 2};\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x valid \nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {} as string;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {} as string;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction App() {\n  const foo = {x: 1};\n  const bar = {x: 2};\n  useEffect(() => {\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction App() {\n  const foo = {x: 1};\n  const bar = {x: 2};\n  useEffect(() => {\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    toppings: pizza?.toppings,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    toppings: pizza?.toppings,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber + state);\n  }, [])\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber + state);\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useMemo(() => {\n    const someNumber: typeof state = 2;\n    console.log(someNumber);\n  }, [state])\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useMemo(() => {\n    const someNumber: typeof state = 2;\n    console.log(someNumber);\n  }, [state])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = {} as any;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {} as any;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n","location":{"column":32,"line":892},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      "},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Thing() {\n  useEffect(async () => {});\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@2.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@2.x invalid \nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber);\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber);\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction App() {\n  const foo = {x: 1};\n  React.useEffect(() => {\n    const bar = {x: 2};\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const foo = {x: 1};\n  React.useEffect(() => {\n    const bar = {x: 2};\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x valid \nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {} as string;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {} as string;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction App() {\n  const foo = {x: 1};\n  const bar = {x: 2};\n  useEffect(() => {\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction App() {\n  const foo = {x: 1};\n  const bar = {x: 2};\n  useEffect(() => {\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    toppings: pizza?.toppings,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    toppings: pizza?.toppings,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber + state);\n  }, [])\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber + state);\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useMemo(() => {\n    const someNumber: typeof state = 2;\n    console.log(someNumber);\n  }, [state])\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useMemo(() => {\n    const someNumber: typeof state = 2;\n    console.log(someNumber);\n  }, [state])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = {} as any;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {} as any;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n","location":{"column":32,"line":892},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      "},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Thing() {\n  useEffect(async () => {});\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@3.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@3.x invalid \nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber);\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber);\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction App() {\n  const foo = {x: 1};\n  React.useEffect(() => {\n    const bar = {x: 2};\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const foo = {x: 1};\n  React.useEffect(() => {\n    const bar = {x: 2};\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    const local = {};\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  {\n    const local2 = {};\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    });\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1, local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = someFunc();\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local2]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(unresolved);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [,,,local,,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ foo }) {\n  useEffect(() => {\n    console.log(foo.length);\n    console.log(foo.slice(0));\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, [history]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {});\n  useLayoutEffect(() => {});\n  useImperativeHandle(props.innerRef, () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.bar, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props.foo, props.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props.foo, props.bar, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n\n  let color = someFunc();\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz, color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar?.baz ?? null);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar);\n    console.log(props.foo?.bar);\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.foo?.bar);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useMemo(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.toString());\n  }, [props.foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo.bar.toString());\n  }, [props?.foo?.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, [props?.foo.bar?.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myEffect = () => {\n    // Doesn't use anything\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  function myEffect() {\n    console.log(global);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nfunction MyComponent() {\n  const myEffect = () => {\n    otherThing()\n  }\n  const otherThing = () => {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({delay}) {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [,myEffect,,]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nlet local = {};\nfunction myEffect() {\n  console.log(local);\n}\nfunction MyComponent() {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, [myEffect]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, [props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useWithoutEffectSuffix(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  return renderHelperConfusedWithEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local = {};\nuseEffect(() => {\n  console.log(local);\n}, []);\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst local1 = {};\n{\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2, foo }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n  const [startTransition1] = useTransition();\n  const [startTransition2, isPending2] = useTransition();\n  const [startTransition3] = React.useTransition();\n  const [startTransition4, isPending4] = React.useTransition();\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n    startTransition1();\n    startTransition2();\n    startTransition3();\n    startTransition4();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    console.log(isPending2);\n    console.log(isPending4);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n    isPending2, isPending4,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch\n\n    // In this test, we don't specify static deps.\n    // That should be okay.\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({ maybeRef2 }) {\n  const definitelyRef1 = useRef();\n  const definitelyRef2 = useRef();\n  const maybeRef1 = useSomeOtherRefyThing();\n\n  const [state1, setState1] = useState();\n  const [state2, setState2] = React.useState();\n  const [state3, dispatch1] = useReducer();\n  const [state4, dispatch2] = React.useReducer();\n\n  const [state5, maybeSetState] = useFunnyState();\n  const [state6, maybeDispatch] = useFunnyReducer();\n\n  const mySetState = useCallback(() => {}, []);\n  let myDispatch = useCallback(() => {}, []);\n\n  useEffect(() => {\n    // Known to be static\n    console.log(definitelyRef1.current);\n    console.log(definitelyRef2.current);\n    console.log(maybeRef1.current);\n    console.log(maybeRef2.current);\n    setState1();\n    setState2();\n    dispatch1();\n    dispatch2();\n\n    // Dynamic\n    console.log(state1);\n    console.log(state2);\n    console.log(state3);\n    console.log(state4);\n    console.log(state5);\n    console.log(state6);\n    mySetState();\n    myDispatch();\n\n    // Not sure; assume dynamic\n    maybeSetState();\n    maybeDispatch();\n  }, [\n    // Dynamic\n    state1, state2, state3, state4, state5, state6,\n    maybeRef1, maybeRef2,\n\n    // Not sure; assume dynamic\n    mySetState, myDispatch,\n    maybeSetState, maybeDispatch,\n\n    // In this test, we specify static deps.\n    // That should be okay too!\n    definitelyRef1, definitelyRef2, setState1, setState2, dispatch1, dispatch2\n  ]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }))\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [props.hello])\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let obj = someFunc();\n  useEffect(() => {\n    obj.foo = true;\n  }, [obj]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n  }, [foo.bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef?.current?.toString())\n    };\n  }, []);\n  return <div />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current = {};\n    return () => {\n      console.log(myRef.current.toString())\n    };\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    const node = myRef.current;\n    node.addEventListener('mousemove', handleMove);\n    return () => node.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useCallback(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      console.log(myRef.current)\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => window.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useMyThing() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {\n      return () => window.removeEventListener('mousemove', handleMove);\n    };\n    window.addEventListener('mousemove', handleMove);\n    return () => {};\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n  }, [local1, local2, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = props.local;\n  useEffect(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Foo({ activeTab }) {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  useEffect(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props]);\n  const fn2 = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo]);\n  const fn3 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar]);\n  const fn4 = useMemo(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n\n  function handleNext1(value) {\n    let value2 = value * 100;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(foo(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(value);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(c => c + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(c => c + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      dispatch('inc');\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  const [count, dispatch] = useReducer((state, action) => {\n    if (action === 'inc') {\n      return state + 1;\n    }\n  }, 0);\n\n  const tick = () => {\n    dispatch('inc');\n  };\n\n  useEffect(() => {\n    let id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    setPodcasts([]);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withFetch(fetchPodcasts) {\n  return function Podcasts({ id }) {\n    let [podcasts, setPodcasts] = useState(null);\n    useEffect(() => {\n      fetchPodcasts(id).then(setPodcasts);\n    }, [id]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Podcasts({ id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    function doFetch({ fetchPodcasts }) {\n      fetchPodcasts(id).then(setPodcasts);\n    }\n    doFetch({ fetchPodcasts: API.fetchPodcasts });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + 1;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nimport increment from './increment';\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction withStuff(increment) {\n  return function Counter() {\n    let [count, setCount] = useState(0);\n\n    useEffect(() => {\n      let id = setInterval(() => {\n        setCount(count => count + increment);\n      }, 1000);\n      return () => clearInterval(id);\n    }, []);\n\n    return <h1>{count}</h1>;\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction App() {\n  const [query, setQuery] = useState('react');\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    let ignore = false;\n    fetchSomething();\n    async function fetchSomething() {\n      const result = await (await fetch('http://hn.algolia.com/api/v1/search?query=' + query)).json();\n      if (!ignore) setState(result);\n    }\n    return () => { ignore = true; };\n  }, [query]);\n  return (\n    <>\n      <input value={query} onChange={e => setQuery(e.target.value)} />\n      {JSON.stringify(state)}\n    </>\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    if (prop) {\n      foo();\n    }\n  }, [prop]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    const handleResize = () => setState(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    arguments\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example() {\n  useEffect(() => {\n    const bar = () => {\n      arguments;\n    };\n    bar();\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, [props.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props?.upperViewHeight]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(foo){\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  const foo = \"hi!\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let {foo} = {foo: 1};\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo(){\n  let [foo] = [1];\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction useFoo() {\n  const foo = \"fine\";\n  if (true) {\n    // Shadowed variable with constant construction in a nested scope is fine.\n    const foo = {};\n  }\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent({foo}) {\n  return useMemo(() => foo, [foo])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","valid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x valid \nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":884},"status":"passed","title":"\nfunction MyComponent() {\n  const foo = true ? \"fine\" : \"also fine\";\n  return useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo({ Component }) {\n  React.useEffect(() => {\n    console.log(<Component />);\n  }, []);\n};\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo({ Component }) {\n  React.useEffect(() => {\n    console.log(<Component />);\n  }, []);\n};\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {} as string;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {} as string;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction App() {\n  const foo = {x: 1};\n  const bar = {x: 2};\n  useEffect(() => {\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction App() {\n  const foo = {x: 1};\n  const bar = {x: 2};\n  useEffect(() => {\n    const baz = bar as typeof foo;\n    console.log(baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    toppings: pizza?.toppings,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    toppings: pizza?.toppings,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const pizza = {};\n\n  useEffect(() => ({\n    crust: pizza?.crust,\n    density: pizza?.crust.density,\n  }), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props.upperViewHeight;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example(props) {\n  useEffect(() => {\n    let topHeight = 0;\n    topHeight = props?.upperViewHeight;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber + state);\n  }, [])\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useEffect(() => {\n    const someNumber: typeof state = 2;\n    setState(prevState => prevState + someNumber + state);\n  }, [])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useMemo(() => {\n    const someNumber: typeof state = 2;\n    console.log(someNumber);\n  }, [state])\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const [state, setState] = React.useState<number>(0);\n\n  useMemo(() => {\n    const someNumber: typeof state = 2;\n    console.log(someNumber);\n  }, [state])\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = {} as any;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {} as any;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar?.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCallback(() => {\n    console.log(props.foo?.bar.toString());\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  let local = 42;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = /foo/;\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const value = useMemo(() => { return 2*2; });\n  const fn = useCallback(() => { alert('foo'); });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ fn1, fn2 }) {\n  const value = useMemo(fn1);\n  const fn = useCallback(fn2);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    if (true) {\n      console.log(local);\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    try {\n      console.log(local);\n    } finally {}\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    function inner() {\n      console.log(local);\n    }\n    inner();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  {\n    const local2 = someFunc();\n    useEffect(() => {\n      console.log(local1);\n      console.log(local2);\n    }, []);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  const local2 = {};\n  useMemo(() => {\n    console.log(local1);\n  }, [local1, local2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = someFunc();\n  function MyNestedComponent() {\n    const local2 = {};\n    useCallback(() => {\n      console.log(local1);\n      console.log(local2);\n    }, [local1]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useCallback(() => {}, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let local = props.foo;\n  useCallback(() => {}, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return history.listen();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history.foo.bar[2].dobedo.listen(),\n      history.foo.bar().dobedo.listen[2]\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ history }) {\n  useEffect(() => {\n    return [\n      history?.foo\n    ];\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {}, ['foo']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, ['foo', 'bar']);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ foo, bar, baz }) {\n  useEffect(() => {\n    console.log(foo, bar, baz);\n  }, [42, false, null]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const dependencies = [];\n  useEffect(() => {}, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, dependencies);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const dependencies = [local];\n  useEffect(() => {\n    console.log(local);\n  }, [...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = someFunc();\n  useEffect(() => {\n    console.log(local);\n  }, [local, ...dependencies]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [computeCacheKey(local)]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.items[0]);\n  }, [props.items, props.items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ items }) {\n  useEffect(() => {\n    console.log(items[0]);\n  }, [items, items[0]]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, [props, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useCallback(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  useEffect(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {id: 42};\n  const fn = useCallback(() => {\n    console.log(local);\n  }, [local.id, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let color = {}\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(color);\n  }, [props.foo, props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n  }, [props.foo.bar.baz, props.foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar.baz);\n    console.log(props.foo.fizz.bizz);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props.foo.bar);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const fn = useCallback(() => {\n    console.log(props);\n    console.log(props.hello);\n  }, [props.foo.bar.baz]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [local, local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {\n    const local1 = {};\n    console.log(local1);\n  }, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = {};\n  useCallback(() => {}, [local1]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [c, a, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, [a, c, g]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let a, b, c, d, e, f, g;\n  useEffect(() => {\n    console.log(b, e, d, c, a, g, f);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const local = {};\n  useEffect(() => {\n    console.log(props.foo);\n    console.log(props.bar);\n    console.log(local);\n  }, [props]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCallback(() => {\n    console.log(props.foo);\n  }, []);\n  React.useMemo(() => {\n    console.log(props.foo);\n  }, []);\n  React.notReactiveHook(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n  useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useEffect(() => {\n    console.log(props.foo);\n  }, []);\n  React.useCustomEffect(() => {\n    console.log(props.foo);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a ? local : b]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, [a && local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  const [state, setState] = useState();\n  useEffect(() => {\n    ref.current = {};\n    setState(state + 1);\n  }, [ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.focus();\n    console.log(ref2.current.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1.current, ref2.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1?.current?.focus();\n    console.log(ref2?.current?.textContent);\n    alert(props.someOtherRefs.current.innerHTML);\n    fetch(props.color);\n  }, [ref1?.current, ref2?.current, props.someOtherRefs, props.color]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  useEffect(() => {\n    ref1.current.scrollTop = 0;\n    ref2.current.scrollTop = 0;\n  }, [ref1.current, ref2.current, activeTab]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({ activeTab, initY }) {\n  const ref1 = useRef();\n  const ref2 = useRef();\n  const fn = useCallback(() => {\n    ref1.current.scrollTop = initY;\n    ref2.current.scrollTop = initY;\n  }, [ref1.current, ref2.current, activeTab, initY]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const ref = useRef();\n  useEffect(() => {\n    console.log(ref.current);\n  }, [ref.current, ref]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n","location":{"column":32,"line":892},"status":"passed","title":"\nconst MyComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    focus() {\n      alert(props.hello);\n    }\n  }), [])\n});\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.onChange) {\n      props.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props?.onChange) {\n      props?.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    function play() {\n      props.onPlay();\n    }\n    function pause() {\n      props.onPause();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    if (props.foo.onChange) {\n      props.foo.onChange();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, [skillsCount, props.isEditMode, props.toggleEditMode]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const [skillsCount] = useState();\n  useEffect(() => {\n    if (skillsCount === 0 && !props.isEditMode) {\n      props.toggleEditMode();\n    }\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    externalCall(props);\n    props.onChange();\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  useEffect(() => {\n    props.onChange();\n    externalCall(props);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let value4;\n  let asyncValue;\n  useEffect(() => {\n    if (value4) {\n      value = {};\n    }\n    value2 = 100;\n    value = 43;\n    value4 = true;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let value;\n  let value2;\n  let value3;\n  let asyncValue;\n  useEffect(() => {\n    value = {};\n    value2 = 100;\n    value = 43;\n    console.log(value2);\n    console.log(value3);\n    setTimeout(() => {\n      asyncValue = 100;\n    });\n  }, [value, value2, value3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef?.current?.addEventListener('mousemove', handleMove);\n    return () => myRef?.current?.removeEventListener('mousemove', handleMove);\n  }, []);\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const myRef = useRef();\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  });\n  return <div ref={myRef} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMove = () => {};\n    myRef.current.addEventListener('mousemove', handleMove);\n    return () => myRef.current.removeEventListener('mousemove', handleMove);\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef) {\n  useEffect(() => {\n    const handleMouse = () => {};\n    myRef.current.addEventListener('mousemove', handleMouse);\n    myRef.current.addEventListener('mousein', handleMouse);\n    return function() {\n      setTimeout(() => {\n        myRef.current.removeEventListener('mousemove', handleMouse);\n        myRef.current.removeEventListener('mousein', handleMouse);\n      });\n    }\n  }, [myRef]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction useMyThing(myRef, active) {\n  useEffect(() => {\n    const handleMove = () => {};\n    if (active) {\n      myRef.current.addEventListener('mousemove', handleMove);\n      return function() {\n        setTimeout(() => {\n          myRef.current.removeEventListener('mousemove', handleMove);\n        });\n      }\n    }\n  }, [myRef, active]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        function MyComponent() {\n          const myRef = useRef();\n          useLayoutEffect_SAFE_FOR_SSR(() => {\n            const handleMove = () => {};\n            myRef.current.addEventListener('mousemove', handleMove);\n            return () => myRef.current.removeEventListener('mousemove', handleMove);\n          });\n          return <div ref={myRef} />;\n        }\n      "},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local1 = 42;\n  const local2 = '42';\n  const local3 = null;\n  const local4 = {};\n  useEffect(() => {\n    console.log(local1);\n    console.log(local2);\n    console.log(local3);\n    console.log(local4);\n  }, [local1, local3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [window]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\n\nfunction MyComponent() {\n  useEffect(() => {\n    console.log(MutableStore.hello);\n  }, [MutableStore.hello]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      console.log(MutableStore.hello.world, props.foo, x, y, z, global.stuff);\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    useEffect(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore.hello.world, props.foo, x, y, z, global.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nimport MutableStore from 'store';\nlet z = {};\n\nfunction MyComponent(props) {\n  let x = props.foo;\n  {\n    let y = props.bar;\n    const fn = useCallback(() => {\n      // nothing\n    }, [MutableStore?.hello?.world, props.foo, x, y, z, global?.stuff]);\n  }\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    setTimeout(() => console.log(taint));\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  function handleChange() {}\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let [, dispatch] = React.useReducer();\n  let taint = props.foo;\n\n  // Shouldn't affect anything\n  const handleChange = () => {};\n\n  function handleNext1(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n  const handleNext2 = (value) => {\n    setState(taint(value));\n    console.log('hello');\n  };\n  let handleNext3 = function(value) {\n    console.log(taint);\n    dispatch({ type: 'x', value });\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, []);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, []);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  function handleNext(value) {\n    setState(value);\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n\n  const handleNext = (value) => {\n    setState(value);\n  };\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n\n  return <div onClick={handleNext} />;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    return Store.subscribe(handleNext2);\n  }, [handleNext2]);\n  useMemo(() => {\n    return Store.subscribe(handleNext3);\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  function handleNext1() {\n    console.log('hello');\n  }\n  const handleNext2 = () => {\n    console.log('hello');\n  };\n  let handleNext3 = function() {\n    console.log('hello');\n  };\n  useEffect(() => {\n    handleNext1();\n    return Store.subscribe(() => handleNext1());\n  }, [handleNext1]);\n  useLayoutEffect(() => {\n    handleNext2();\n    return Store.subscribe(() => handleNext2());\n  }, [handleNext2]);\n  useMemo(() => {\n    handleNext3();\n    return Store.subscribe(() => handleNext3());\n  }, [handleNext3]);\n  return (\n    <div\n      onClick={() => {\n        handleNext1();\n        setTimeout(handleNext2);\n        setTimeout(() => {\n          handleNext3();\n        });\n      }}\n    />\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  const handleNext1 = () => {\n    console.log('hello');\n  };\n  function handleNext2() {\n    console.log('hello');\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n  useEffect(() => {\n    return Store.subscribe(handleNext1);\n    return Store.subscribe(handleNext2);\n  }, [handleNext1, handleNext2]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let handleNext = () => {\n    console.log('hello');\n  };\n  if (props.foo) {\n    handleNext = () => {\n      console.log('hello');\n    };\n  }\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let [, setState] = useState();\n  let taint = props.foo;\n\n  function handleNext(value) {\n    let value2 = value * taint;\n    setState(value2);\n    console.log('hello');\n  }\n\n  useEffect(() => {\n    return Store.subscribe(handleNext);\n  }, [handleNext]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let [increment, setIncrement] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  let [count, setCount] = useState(0);\n  let increment = useCustomHook();\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ step }) {\n  let [count, setCount] = useState(0);\n\n  function increment(x) {\n    return x + step;\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => increment(count));\n    }, 1000);\n    return () => clearInterval(id);\n  }, [increment]);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter({ increment }) {\n  let [count, setCount] = useState(0);\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount(count => count + increment);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  function tick() {\n    setCount(count + 1);\n  }\n\n  useEffect(() => {\n    let id = setInterval(() => {\n      tick();\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts() {\n  useEffect(() => {\n    alert(podcasts);\n  }, []);\n  let [podcasts, setPodcasts] = useState(null);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ api: { fetchPodcasts }, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, fetchPodcasts2, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    setTimeout(() => {\n      console.log(id);\n      fetchPodcasts(id).then(setPodcasts);\n      fetchPodcasts2(id).then(setPodcasts);\n    });\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Podcasts({ fetchPodcasts, id }) {\n  let [podcasts, setPodcasts] = useState(null);\n  useEffect(() => {\n    console.log(fetchPodcasts);\n    fetchPodcasts?.(id).then(setPodcasts);\n  }, [id]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(() => {\n    const fetchData = async () => {};\n    fetchData();\n  }, [fetchData]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    setState({});\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello() {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData.then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ country }) {\n  const [data, setData] = useState(0);\n  useEffect(() => {\n    fetchData(country).then(setData);\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Hello({ prop1, prop2 }) {\n  const [state, setState] = useState(0);\n  useEffect(() => {\n    if (prop1) {\n      setState(prop2);\n    }\n  });\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {}, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Thing() {\n  useEffect(async () => {});\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Thing() {\n  useEffect(async () => {});\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example() {\n  const foo = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Example({ prop }) {\n  const foo = useCallback(() => {\n    prop.hello(foo);\n  }, [foo]);\n  const bar = useCallback(() => {\n    foo();\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  function myEffect() {\n    console.log(local);\n  }\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = function() {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = () => {\n    otherThing();\n  };\n  const otherThing = () => {\n    console.log(local);\n  };\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  const myEffect = debounce(() => {\n    console.log(local);\n  }, delay);\n  useEffect(myEffect, [local]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent({myEffect}) {\n  useEffect(myEffect, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(debounce(() => {\n    console.log(local);\n  }, delay), []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent() {\n  const local = {};\n  useEffect(() => {\n    console.log(local);\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction MyComponent(props) {\n  let foo = {}\n  useEffect(() => {\n    foo.bar.baz = 43;\n    props.foo.bar.baz = 1;\n  }, []);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = [];\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = () => {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = function bar(){};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = class {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = true ? {} : \"fine\";\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar || {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ?? {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar && {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = bar ? baz ? {} : null : null;\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  let foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  var foo = {};\n  useMemo(() => foo, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useCallback(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Component() {\n  const foo = {};\n  useImperativeHandle(\n    ref,\n    () => {\n       console.log(foo);\n    },\n    [foo]\n  );\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = section.section_components?.edges ?? [];\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo(section) {\n  const foo = {};\n  console.log(foo);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <>Hi!</>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = <div>Hi!</div>;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = bar = {};\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new String('foo'); // Note 'foo' will be boxed, and thus an object and thus compared by reference.\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = new Map([]);\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = /reg/;\n  useMemo(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  class Bar {};\n  useMemo(() => {\n    console.log(new Bar());\n  }, [Bar]);\n}\n"},{"ancestorTitles":["react-hooks","parser: @typescript-eslint/parser@4.x","invalid"],"failureMessages":[],"fullName":"react-hooks parser: @typescript-eslint/parser@4.x invalid \nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n","location":{"column":32,"line":892},"status":"passed","title":"\nfunction Foo() {\n  const foo = {};\n  useLayoutEffect(() => {\n    console.log(foo);\n  }, [foo]);\n  useEffect(() => {\n    console.log(foo);\n  }, [foo]);\n}\n"}],"endTime":1639319061260,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/eslint-plugin-react-hooks/__tests__/ESLintRuleExhaustiveDeps-test.js","startTime":1639319051002,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getLanesFromTransportDecimalBitmask"],"failureMessages":[],"fullName":"getLanesFromTransportDecimalBitmask should return array of lane numbers from bitmask string","location":{"column":3,"line":20},"status":"passed","title":"should return array of lane numbers from bitmask string"},{"ancestorTitles":["getLanesFromTransportDecimalBitmask"],"failureMessages":[],"fullName":"getLanesFromTransportDecimalBitmask should return empty array if laneBitmaskString is not a bitmask","location":{"column":3,"line":39},"status":"passed","title":"should return empty array if laneBitmaskString is not a bitmask"},{"ancestorTitles":["getLanesFromTransportDecimalBitmask"],"failureMessages":[],"fullName":"getLanesFromTransportDecimalBitmask should ignore lanes outside REACT_TOTAL_NUM_LANES","location":{"column":3,"line":46},"status":"passed","title":"should ignore lanes outside REACT_TOTAL_NUM_LANES"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should throw given an empty timeline","location":{"column":3,"line":60},"status":"passed","title":"should throw given an empty timeline"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should throw given a timeline with no Profile event","location":{"column":3,"line":64},"status":"passed","title":"should throw given a timeline with no Profile event"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should return empty data given a timeline with no React scheduling profiling marks","location":{"column":3,"line":73},"status":"passed","title":"should return empty data given a timeline with no React scheduling profiling marks"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should error if events and measures are incomplete","location":{"column":3,"line":95},"status":"passed","title":"should error if events and measures are incomplete"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should error if work is completed without being started","location":{"column":3,"line":105},"status":"passed","title":"should error if work is completed without being started"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should process complete set of events (page load sample data)","location":{"column":3,"line":115},"status":"passed","title":"should process complete set of events (page load sample data)"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should process forced update event","location":{"column":3,"line":308},"status":"passed","title":"should process forced update event"},{"ancestorTitles":["preprocessData"],"failureMessages":[],"fullName":"preprocessData should populate other user timing marks","location":{"column":3,"line":324},"status":"passed","title":"should populate other user timing marks"}],"endTime":1639319061732,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-devtools-scheduling-profiler/src/import-worker/__tests__/preprocessData-test.js","startTime":1639319061329,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["clamp"],"failureMessages":[],"fullName":"clamp should return min if value < min","location":{"column":74,"line":17},"status":"passed","title":"should return min if value < min"},{"ancestorTitles":["clamp"],"failureMessages":[],"fullName":"clamp should return value if min <= value <= max","location":{"column":3,"line":18},"status":"passed","title":"should return value if min <= value <= max"},{"ancestorTitles":["clamp"],"failureMessages":[],"fullName":"clamp should return max if max < value","location":{"column":3,"line":25},"status":"passed","title":"should return max if max < value"}],"endTime":1639319061963,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-devtools-scheduling-profiler/src/view-base/utils/__tests__/clamp-test.js","startTime":1639319061799,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["clampState"],"failureMessages":[],"fullName":"clampState should passthrough offset if state fits within container","location":{"column":3,"line":19},"status":"passed","title":"should passthrough offset if state fits within container"},{"ancestorTitles":["clampState"],"failureMessages":[],"fullName":"clampState should clamp offset if offset causes content to go out of container","location":{"column":3,"line":38},"status":"passed","title":"should clamp offset if offset causes content to go out of container"},{"ancestorTitles":["clampState"],"failureMessages":[],"fullName":"clampState should passthrough length if container fits in content","location":{"column":3,"line":74},"status":"passed","title":"should passthrough length if container fits in content"},{"ancestorTitles":["clampState"],"failureMessages":[],"fullName":"clampState should clamp length to minimum of max(minContentLength, containerLength)","location":{"column":3,"line":101},"status":"passed","title":"should clamp length to minimum of max(minContentLength, containerLength)"},{"ancestorTitles":["clampState"],"failureMessages":[],"fullName":"clampState should clamp length to maximum of max(containerLength, maxContentLength)","location":{"column":3,"line":120},"status":"passed","title":"should clamp length to maximum of max(containerLength, maxContentLength)"},{"ancestorTitles":["translateState"],"failureMessages":[],"fullName":"translateState should translate state by delta and leave length unchanged","location":{"column":3,"line":141},"status":"passed","title":"should translate state by delta and leave length unchanged"},{"ancestorTitles":["translateState"],"failureMessages":[],"fullName":"translateState should clamp resulting offset","location":{"column":3,"line":151},"status":"passed","title":"should clamp resulting offset"},{"ancestorTitles":["zoomState"],"failureMessages":[],"fullName":"zoomState should scale width by multiplier","location":{"column":3,"line":170},"status":"passed","title":"should scale width by multiplier"},{"ancestorTitles":["zoomState"],"failureMessages":[],"fullName":"zoomState should clamp zoomed state","location":{"column":3,"line":184},"status":"passed","title":"should clamp zoomed state"},{"ancestorTitles":["zoomState"],"failureMessages":[],"fullName":"zoomState should maintain containerStart<->fixedPoint distance","location":{"column":3,"line":198},"status":"passed","title":"should maintain containerStart<->fixedPoint distance"},{"ancestorTitles":["moveStateToRange"],"failureMessages":[],"fullName":"moveStateToRange should set [rangeStart, rangeEnd] = container","location":{"column":3,"line":222},"status":"passed","title":"should set [rangeStart, rangeEnd] = container"},{"ancestorTitles":["areScrollStatesEqual"],"failureMessages":[],"fullName":"areScrollStatesEqual should return true if equal","location":{"column":3,"line":244},"status":"passed","title":"should return true if equal"},{"ancestorTitles":["areScrollStatesEqual"],"failureMessages":[],"fullName":"areScrollStatesEqual should return false if not equal","location":{"column":3,"line":253},"status":"passed","title":"should return false if not equal"}],"endTime":1639319062250,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-devtools-scheduling-profiler/src/view-base/utils/__tests__/scrollState-test.js","startTime":1639319062030,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["pointEqualToPoint"],"failureMessages":[],"fullName":"pointEqualToPoint should return true when 2 points have the same values","location":{"column":3,"line":23},"status":"passed","title":"should return true when 2 points have the same values"},{"ancestorTitles":["pointEqualToPoint"],"failureMessages":[],"fullName":"pointEqualToPoint should return false when 2 points have different values","location":{"column":3,"line":31},"status":"passed","title":"should return false when 2 points have different values"},{"ancestorTitles":["sizeEqualToSize"],"failureMessages":[],"fullName":"sizeEqualToSize should return true when 2 sizes have the same values","location":{"column":3,"line":41},"status":"passed","title":"should return true when 2 sizes have the same values"},{"ancestorTitles":["sizeEqualToSize"],"failureMessages":[],"fullName":"sizeEqualToSize should return false when 2 sizes have different values","location":{"column":3,"line":56},"status":"passed","title":"should return false when 2 sizes have different values"},{"ancestorTitles":["rectEqualToRect"],"failureMessages":[],"fullName":"rectEqualToRect should return true when 2 rects have the same values","location":{"column":3,"line":73},"status":"passed","title":"should return true when 2 rects have the same values"},{"ancestorTitles":["rectEqualToRect"],"failureMessages":[],"fullName":"rectEqualToRect should return false when 2 rects have different values","location":{"column":3,"line":88},"status":"passed","title":"should return false when 2 rects have different values"},{"ancestorTitles":["sizeIsValid"],"failureMessages":[],"fullName":"sizeIsValid should return true when the size has non-negative width and height","location":{"column":3,"line":105},"status":"passed","title":"should return true when the size has non-negative width and height"},{"ancestorTitles":["sizeIsValid"],"failureMessages":[],"fullName":"sizeIsValid should return false when the size has negative width or height","location":{"column":3,"line":110},"status":"passed","title":"should return false when the size has negative width or height"},{"ancestorTitles":["sizeIsEmpty"],"failureMessages":[],"fullName":"sizeIsEmpty should return true when the size has negative area","location":{"column":3,"line":118},"status":"passed","title":"should return true when the size has negative area"},{"ancestorTitles":["sizeIsEmpty"],"failureMessages":[],"fullName":"sizeIsEmpty should return true when the size has zero area","location":{"column":3,"line":123},"status":"passed","title":"should return true when the size has zero area"},{"ancestorTitles":["sizeIsEmpty"],"failureMessages":[],"fullName":"sizeIsEmpty should return false when the size has positive area","location":{"column":3,"line":129},"status":"passed","title":"should return false when the size has positive area"},{"ancestorTitles":["rectIntersectsRect"],"failureMessages":[],"fullName":"rectIntersectsRect should return true when 2 rects intersect","location":{"column":3,"line":136},"status":"passed","title":"should return true when 2 rects intersect"},{"ancestorTitles":["rectIntersectsRect"],"failureMessages":[],"fullName":"rectIntersectsRect should return false when 2 rects do not intersect","location":{"column":3,"line":162},"status":"passed","title":"should return false when 2 rects do not intersect"},{"ancestorTitles":["intersectionOfRects"],"failureMessages":[],"fullName":"intersectionOfRects should return intersection when 2 rects intersect","location":{"column":3,"line":181},"status":"passed","title":"should return intersection when 2 rects intersect"},{"ancestorTitles":["rectContainsPoint"],"failureMessages":[],"fullName":"rectContainsPoint should return true if point is on the rect's edge","location":{"column":3,"line":209},"status":"passed","title":"should return true if point is on the rect's edge"},{"ancestorTitles":["rectContainsPoint"],"failureMessages":[],"fullName":"rectContainsPoint should return true if point is in rect","location":{"column":3,"line":230},"status":"passed","title":"should return true if point is in rect"},{"ancestorTitles":["rectContainsPoint"],"failureMessages":[],"fullName":"rectContainsPoint should return false if point is not in rect","location":{"column":3,"line":239},"status":"passed","title":"should return false if point is not in rect"},{"ancestorTitles":["unionOfRects"],"failureMessages":[],"fullName":"unionOfRects should return zero rect if no rects are provided","location":{"column":3,"line":250},"status":"passed","title":"should return zero rect if no rects are provided"},{"ancestorTitles":["unionOfRects"],"failureMessages":[],"fullName":"unionOfRects should return rect if 1 rect is provided","location":{"column":3,"line":257},"status":"passed","title":"should return rect if 1 rect is provided"},{"ancestorTitles":["unionOfRects"],"failureMessages":[],"fullName":"unionOfRects should return union of rects if more than one rect is provided","location":{"column":3,"line":263},"status":"passed","title":"should return union of rects if more than one rect is provided"}],"endTime":1639319062571,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-devtools-scheduling-profiler/src/view-base/__tests__/geometry-test.js","startTime":1639319062317,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["hslaColorToString"],"failureMessages":[],"fullName":"hslaColorToString should transform colors to strings","location":{"column":89,"line":17},"status":"passed","title":"should transform colors to strings"},{"ancestorTitles":["dimmedColor"],"failureMessages":[],"fullName":"dimmedColor should dim luminosity using delta","location":{"column":3,"line":24},"status":"passed","title":"should dim luminosity using delta"},{"ancestorTitles":["ColorGenerator","colorForID"],"failureMessages":[],"fullName":"ColorGenerator colorForID should generate a color for an ID","location":{"column":5,"line":42},"status":"passed","title":"should generate a color for an ID"},{"ancestorTitles":["ColorGenerator","colorForID"],"failureMessages":[],"fullName":"ColorGenerator colorForID should generate colors deterministically given an ID","location":{"column":5,"line":53},"status":"passed","title":"should generate colors deterministically given an ID"},{"ancestorTitles":["ColorGenerator","colorForID"],"failureMessages":[],"fullName":"ColorGenerator colorForID should generate different colors for different IDs","location":{"column":5,"line":62},"status":"passed","title":"should generate different colors for different IDs"},{"ancestorTitles":["ColorGenerator","colorForID"],"failureMessages":[],"fullName":"ColorGenerator colorForID should return colors that have been set manually","location":{"column":5,"line":68},"status":"passed","title":"should return colors that have been set manually"},{"ancestorTitles":["ColorGenerator","colorForID"],"failureMessages":[],"fullName":"ColorGenerator colorForID should generate colors from fixed color spaces","location":{"column":5,"line":76},"status":"passed","title":"should generate colors from fixed color spaces"},{"ancestorTitles":["ColorGenerator","colorForID"],"failureMessages":[],"fullName":"ColorGenerator colorForID should generate colors from range color spaces","location":{"column":5,"line":82},"status":"passed","title":"should generate colors from range color spaces"}],"endTime":1639319062838,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-devtools-scheduling-profiler/src/content-views/utils/__tests__/colors-test.js","startTime":1639319062638,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFetchBrowser"],"failureMessages":[],"fullName":"ReactFetchBrowser [GATED, SHOULD FAIL] exports something","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] exports something"}],"endTime":1639319063060,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-fetch/src/__tests__/ReactFetchBrowser-test.js","startTime":1639319062905,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFetchNode"],"failureMessages":[],"fullName":"ReactFetchNode [GATED, SHOULD FAIL] can read text","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can read text"},{"ancestorTitles":["ReactFetchNode"],"failureMessages":[],"fullName":"ReactFetchNode [GATED, SHOULD FAIL] can read json","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can read json"}],"endTime":1639319063298,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-fetch/src/__tests__/ReactFetchNode-test.js","startTime":1639319063127,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART should have the correct lifecycle state","location":{"column":3,"line":131},"status":"passed","title":"should have the correct lifecycle state"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART should render a reasonable SVG structure in SVG mode","location":{"column":3,"line":139},"status":"passed","title":"should render a reasonable SVG structure in SVG mode"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART should be able to reorder components","location":{"column":3,"line":168},"status":"passed","title":"should be able to reorder components"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART should be able to reorder many components","location":{"column":3,"line":214},"status":"passed","title":"should be able to reorder many components"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART renders composite with lifecycle inside group","location":{"column":3,"line":242},"status":"passed","title":"renders composite with lifecycle inside group"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART resolves refs before componentDidMount","location":{"column":3,"line":265},"status":"passed","title":"resolves refs before componentDidMount"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART resolves refs before componentDidUpdate","location":{"column":3,"line":296},"status":"passed","title":"resolves refs before componentDidUpdate"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART adds and updates event handlers","location":{"column":3,"line":332},"status":"passed","title":"adds and updates event handlers"},{"ancestorTitles":["ReactART"],"failureMessages":[],"fullName":"ReactART can concurrently render with a \"primary\" renderer while sharing context","location":{"column":3,"line":363},"status":"passed","title":"can concurrently render with a \"primary\" renderer while sharing context"},{"ancestorTitles":["ReactARTComponents"],"failureMessages":[],"fullName":"ReactARTComponents should generate a <Shape> with props for drawing the Circle","location":{"column":3,"line":416},"status":"passed","title":"should generate a <Shape> with props for drawing the Circle"},{"ancestorTitles":["ReactARTComponents"],"failureMessages":[],"fullName":"ReactARTComponents should warn if radius is missing on a Circle component","location":{"column":3,"line":423},"status":"passed","title":"should warn if radius is missing on a Circle component"},{"ancestorTitles":["ReactARTComponents"],"failureMessages":[],"fullName":"ReactARTComponents should generate a <Shape> with props for drawing the Rectangle","location":{"column":3,"line":435},"status":"passed","title":"should generate a <Shape> with props for drawing the Rectangle"},{"ancestorTitles":["ReactARTComponents"],"failureMessages":[],"fullName":"ReactARTComponents should warn if width/height is missing on a Rectangle component","location":{"column":3,"line":442},"status":"passed","title":"should warn if width/height is missing on a Rectangle component"},{"ancestorTitles":["ReactARTComponents"],"failureMessages":[],"fullName":"ReactARTComponents should generate a <Shape> with props for drawing the Wedge","location":{"column":3,"line":455},"status":"passed","title":"should generate a <Shape> with props for drawing the Wedge"},{"ancestorTitles":["ReactARTComponents"],"failureMessages":[],"fullName":"ReactARTComponents should return null if startAngle equals to endAngle on Wedge","location":{"column":3,"line":462},"status":"passed","title":"should return null if startAngle equals to endAngle on Wedge"},{"ancestorTitles":["ReactARTComponents"],"failureMessages":[],"fullName":"ReactARTComponents should warn if outerRadius/startAngle/endAngle is missing on a Wedge component","location":{"column":3,"line":469},"status":"passed","title":"should warn if outerRadius/startAngle/endAngle is missing on a Wedge component"}],"endTime":1639319063951,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-art/src/__tests__/ReactART-test.js","startTime":1639319063365,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactFlightDOMRelay"],"failureMessages":[],"fullName":"ReactFlightDOMRelay can render a server component","location":{"column":3,"line":61},"status":"passed","title":"can render a server component"},{"ancestorTitles":["ReactFlightDOMRelay"],"failureMessages":[],"fullName":"ReactFlightDOMRelay [GATED, SHOULD FAIL] can transfer a Block to the client and render there","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can transfer a Block to the client and render there"},{"ancestorTitles":["ReactFlightDOMRelay"],"failureMessages":[],"fullName":"ReactFlightDOMRelay [GATED, SHOULD FAIL] can reasonably handle different element types","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] can reasonably handle different element types"},{"ancestorTitles":["ReactFlightDOMRelay"],"failureMessages":[],"fullName":"ReactFlightDOMRelay can handle a subset of Hooks","location":{"column":3,"line":188},"status":"passed","title":"can handle a subset of Hooks"},{"ancestorTitles":["ReactFlightDOMRelay"],"failureMessages":[],"fullName":"ReactFlightDOMRelay can handle a subset of Hooks, with element as root","location":{"column":3,"line":217},"status":"passed","title":"can handle a subset of Hooks, with element as root"}],"endTime":1639319064616,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-transport-dom-relay/src/__tests__/ReactFlightDOMRelay-test.internal.js","startTime":1639319064018,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache throws a promise if the requested value is not in the cache","location":{"column":3,"line":108},"status":"passed","title":"throws a promise if the requested value is not in the cache"},{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache throws an error on the subsequent read if the promise is rejected","location":{"column":3,"line":128},"status":"passed","title":"throws an error on the subsequent read if the promise is rejected"},{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache warns if non-primitive key is passed to a resource without a hash function","location":{"column":3,"line":156},"status":"passed","title":"warns if non-primitive key is passed to a resource without a hash function"},{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache evicts least recently used values","location":{"column":3,"line":193},"status":"passed","title":"evicts least recently used values"},{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache preloads during the render phase","location":{"column":3,"line":273},"status":"passed","title":"preloads during the render phase"},{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache if a thenable resolves multiple times, does not update the first cached value","location":{"column":3,"line":301},"status":"passed","title":"if a thenable resolves multiple times, does not update the first cached value"},{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache throws if read is called outside render","location":{"column":3,"line":373},"status":"passed","title":"throws if read is called outside render"},{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache throws if preload is called outside render","location":{"column":3,"line":379},"status":"passed","title":"throws if preload is called outside render"}],"endTime":1639319065268,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-cache/src/__tests__/ReactCacheOld-test.internal.js","startTime":1639319064683,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useFocus hasPointerEvents=true","disabled"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true disabled [GATED, SHOULD FAIL] does not call callbacks","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not call callbacks"},{"ancestorTitles":["useFocus hasPointerEvents=true","onBlur"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onBlur [GATED, SHOULD FAIL] is called after \"blur\" event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" event"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocus"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocus [GATED, SHOULD FAIL] is called after \"focus\" event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" event"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocus"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocus [GATED, SHOULD FAIL] is not called if descendants of target receive focus","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called if descendants of target receive focus"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocusChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocusChange [GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocusChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocusChange [GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocusVisibleChange [GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" if keyboard navigation is active","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" if keyboard navigation is active"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocusVisibleChange [GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocusVisibleChange [GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard"},{"ancestorTitles":["useFocus hasPointerEvents=true","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true onFocusVisibleChange [GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants"},{"ancestorTitles":["useFocus hasPointerEvents=true","nested Focus components"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=true nested Focus components [GATED, SHOULD FAIL] propagates events in the correct order","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] propagates events in the correct order"},{"ancestorTitles":["useFocus hasPointerEvents=false","disabled"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false disabled [GATED, SHOULD FAIL] does not call callbacks","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not call callbacks"},{"ancestorTitles":["useFocus hasPointerEvents=false","onBlur"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onBlur [GATED, SHOULD FAIL] is called after \"blur\" event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" event"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocus"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocus [GATED, SHOULD FAIL] is called after \"focus\" event","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" event"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocus"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocus [GATED, SHOULD FAIL] is not called if descendants of target receive focus","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called if descendants of target receive focus"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocusChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocusChange [GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocusChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocusChange [GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocusVisibleChange [GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" if keyboard navigation is active","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" if keyboard navigation is active"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocusVisibleChange [GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocusVisibleChange [GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard"},{"ancestorTitles":["useFocus hasPointerEvents=false","onFocusVisibleChange"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false onFocusVisibleChange [GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"blur\" and \"focus\" events on descendants"},{"ancestorTitles":["useFocus hasPointerEvents=false","nested Focus components"],"failureMessages":[],"fullName":"useFocus hasPointerEvents=false nested Focus components [GATED, SHOULD FAIL] propagates events in the correct order","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] propagates events in the correct order"}],"endTime":1639319066990,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-interactions/events/src/dom/create-event-handle/__tests__/useFocus-test.internal.js","startTime":1639319065343,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useFocus","disabled"],"failureMessages":[],"fullName":"useFocus disabled [GATED, SHOULD FAIL] prevents custom events being dispatched","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] prevents custom events being dispatched"},{"ancestorTitles":["useFocus","onFocusWithinChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinChange [GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on focus target","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on focus target"},{"ancestorTitles":["useFocus","onFocusWithinChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinChange [GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on descendants","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on descendants"},{"ancestorTitles":["useFocus","onFocusWithinChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinChange [GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on focus target if keyboard was used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on focus target if keyboard was used"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on descendants if keyboard was used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on descendants if keyboard was used"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree"},{"ancestorTitles":["useFocus"],"failureMessages":[],"fullName":"useFocus [GATED, SHOULD FAIL] should correctly handle focus visibility when typing into an input","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle focus visibility when typing into an input"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a focused element is unmounted"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a nested focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a nested focused element is unmounted"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after many elements are unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after many elements are unmounted"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a nested focused element is unmounted (with scope query)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a nested focused element is unmounted (with scope query)"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a focused suspended element is hidden","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a focused suspended element is hidden"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a focused suspended element is hidden then shown","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a focused suspended element is hidden then shown"},{"ancestorTitles":["useFocus","disabled"],"failureMessages":[],"fullName":"useFocus disabled [GATED, SHOULD FAIL] prevents custom events being dispatched","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] prevents custom events being dispatched"},{"ancestorTitles":["useFocus","onFocusWithinChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinChange [GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on focus target","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on focus target"},{"ancestorTitles":["useFocus","onFocusWithinChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinChange [GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on descendants","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"blur\" and \"focus\" events on descendants"},{"ancestorTitles":["useFocus","onFocusWithinChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinChange [GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on focus target if keyboard was used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on focus target if keyboard was used"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on descendants if keyboard was used","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after \"focus\" and \"blur\" on descendants if keyboard was used"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called if non-keyboard event is dispatched on target previously focused with keyboard"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is not called after \"focus\" and \"blur\" events without keyboard"},{"ancestorTitles":["useFocus","onFocusWithinVisibleChange"],"failureMessages":[],"fullName":"useFocus onFocusWithinVisibleChange [GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is only called once when focus moves within and outside the subtree"},{"ancestorTitles":["useFocus"],"failureMessages":[],"fullName":"useFocus [GATED, SHOULD FAIL] should correctly handle focus visibility when typing into an input","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly handle focus visibility when typing into an input"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a focused element is unmounted"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a nested focused element is unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a nested focused element is unmounted"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after many elements are unmounted","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after many elements are unmounted"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a nested focused element is unmounted (with scope query)","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a nested focused element is unmounted (with scope query)"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a focused suspended element is hidden","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a focused suspended element is hidden"},{"ancestorTitles":["useFocus","onBeforeBlurWithin"],"failureMessages":[],"fullName":"useFocus onBeforeBlurWithin [GATED, SHOULD FAIL] is called after a focused suspended element is hidden then shown","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] is called after a focused suspended element is hidden then shown"}],"endTime":1639319069427,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-interactions/events/src/dom/create-event-handle/__tests__/useFocusWithin-test.internal.js","startTime":1639319067056,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class preserves the name of the class for use in error messages","location":{"column":3,"line":53},"status":"passed","title":"preserves the name of the class for use in error messages"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class throws if no render function is defined","location":{"column":3,"line":58},"status":"passed","title":"throws if no render function is defined"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class renders a simple stateless component with prop","location":{"column":3,"line":71},"status":"passed","title":"renders a simple stateless component with prop"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class renders based on state using initial values in this.props","location":{"column":3,"line":81},"status":"passed","title":"renders based on state using initial values in this.props"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class renders based on state using props in the constructor","location":{"column":3,"line":94},"status":"passed","title":"renders based on state using props in the constructor"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class sets initial state with value returned by static getDerivedStateFromProps","location":{"column":3,"line":115},"status":"passed","title":"sets initial state with value returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class warns if getDerivedStateFromProps is not static","location":{"column":3,"line":131},"status":"passed","title":"warns if getDerivedStateFromProps is not static"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class warns if getDerivedStateFromError is not static","location":{"column":3,"line":146},"status":"passed","title":"warns if getDerivedStateFromError is not static"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class warns if getSnapshotBeforeUpdate is static","location":{"column":3,"line":161},"status":"passed","title":"warns if getSnapshotBeforeUpdate is static"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class warns if state not initialized before static getDerivedStateFromProps","location":{"column":3,"line":174},"status":"passed","title":"warns if state not initialized before static getDerivedStateFromProps"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class updates initial state with values returned by static getDerivedStateFromProps","location":{"column":3,"line":194},"status":"passed","title":"updates initial state with values returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class renders updated state with values returned by static getDerivedStateFromProps","location":{"column":3,"line":212},"status":"passed","title":"renders updated state with values returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class renders based on context in the constructor","location":{"column":3,"line":233},"status":"passed","title":"renders based on context in the constructor"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class renders only once when setting state in componentWillMount","location":{"column":3,"line":264},"status":"passed","title":"renders only once when setting state in componentWillMount"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class should warn with non-object in the initial state property","location":{"column":3,"line":283},"status":"passed","title":"should warn with non-object in the initial state property"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class should render with null in the initial state property","location":{"column":3,"line":300},"status":"passed","title":"should render with null in the initial state property"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class setState through an event handler","location":{"column":3,"line":313},"status":"passed","title":"setState through an event handler"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class should not implicitly bind event handlers","location":{"column":3,"line":333},"status":"passed","title":"should not implicitly bind event handlers"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class renders using forceUpdate even when there is no state","location":{"column":3,"line":350},"status":"passed","title":"renders using forceUpdate even when there is no state"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class will call all the normal life cycle methods","location":{"column":3,"line":374},"status":"passed","title":"will call all the normal life cycle methods"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class warns when classic properties are defined on the instance, but does not invoke them.","location":{"column":3,"line":423},"status":"passed","title":"warns when classic properties are defined on the instance, but does not invoke them."},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class does not warn about getInitialState() on class components if state is also defined.","location":{"column":3,"line":457},"status":"passed","title":"does not warn about getInitialState() on class components if state is also defined."},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class should warn when misspelling shouldComponentUpdate","location":{"column":3,"line":470},"status":"passed","title":"should warn when misspelling shouldComponentUpdate"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class should warn when misspelling componentWillReceiveProps","location":{"column":3,"line":488},"status":"passed","title":"should warn when misspelling componentWillReceiveProps"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class should warn when misspelling UNSAFE_componentWillReceiveProps","location":{"column":3,"line":505},"status":"passed","title":"should warn when misspelling UNSAFE_componentWillReceiveProps"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class should throw AND warn when trying to access classic APIs","location":{"column":3,"line":522},"status":"passed","title":"should throw AND warn when trying to access classic APIs"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class supports this.context passed via getChildContext","location":{"column":3,"line":538},"status":"passed","title":"supports this.context passed via getChildContext"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class supports classic refs","location":{"column":3,"line":557},"status":"passed","title":"supports classic refs"},{"ancestorTitles":["ReactES6Class"],"failureMessages":[],"fullName":"ReactES6Class supports drilling through to the DOM using findDOMNode","location":{"column":3,"line":567},"status":"passed","title":"supports drilling through to the DOM using findDOMNode"}],"endTime":1639319069910,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactES6Class-test.js","startTime":1639319069493,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass preserves the name of the class for use in error messages","location":{"column":5,"line":430},"status":"passed","title":"preserves the name of the class for use in error messages"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass throws if no render function is defined","location":{"column":5,"line":433},"status":"passed","title":"throws if no render function is defined"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass renders a simple stateless component with prop","location":{"column":5,"line":446},"status":"passed","title":"renders a simple stateless component with prop"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass renders based on state using initial values in this.props","location":{"column":5,"line":450},"status":"passed","title":"renders based on state using initial values in this.props"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass renders based on state using props in the constructor","location":{"column":5,"line":453},"status":"passed","title":"renders based on state using props in the constructor"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass sets initial state with value returned by static getDerivedStateFromProps","location":{"column":5,"line":458},"status":"passed","title":"sets initial state with value returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass warns if getDerivedStateFromProps is not static","location":{"column":5,"line":484},"status":"passed","title":"warns if getDerivedStateFromProps is not static"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass warns if getDerivedStateFromError is not static","location":{"column":5,"line":503},"status":"passed","title":"warns if getDerivedStateFromError is not static"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass warns if getSnapshotBeforeUpdate is static","location":{"column":5,"line":522},"status":"passed","title":"warns if getSnapshotBeforeUpdate is static"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass warns if state not initialized before static getDerivedStateFromProps","location":{"column":5,"line":540},"status":"passed","title":"warns if state not initialized before static getDerivedStateFromProps"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass updates initial state with values returned by static getDerivedStateFromProps","location":{"column":5,"line":566},"status":"passed","title":"updates initial state with values returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass renders updated state with values returned by static getDerivedStateFromProps","location":{"column":5,"line":591},"status":"passed","title":"renders updated state with values returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass renders based on context in the constructor","location":{"column":5,"line":617},"status":"passed","title":"renders based on context in the constructor"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass renders only once when setting state in componentWillMount","location":{"column":5,"line":620},"status":"passed","title":"renders only once when setting state in componentWillMount"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass should warn with non-object in the initial state property","location":{"column":5,"line":625},"status":"passed","title":"should warn with non-object in the initial state property"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass should render with null in the initial state property","location":{"column":5,"line":630},"status":"passed","title":"should render with null in the initial state property"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass setState through an event handler","location":{"column":5,"line":633},"status":"passed","title":"setState through an event handler"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass should not implicitly bind event handlers","location":{"column":5,"line":638},"status":"passed","title":"should not implicitly bind event handlers"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass renders using forceUpdate even when there is no state","location":{"column":5,"line":642},"status":"passed","title":"renders using forceUpdate even when there is no state"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass will call all the normal life cycle methods","location":{"column":5,"line":647},"status":"passed","title":"will call all the normal life cycle methods"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass warns when classic properties are defined on the instance, but does not invoke them.","location":{"column":5,"line":670},"status":"passed","title":"warns when classic properties are defined on the instance, but does not invoke them."},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass does not warn about getInitialState() on class components if state is also defined.","location":{"column":5,"line":688},"status":"passed","title":"does not warn about getInitialState() on class components if state is also defined."},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass should warn when misspelling shouldComponentUpdate","location":{"column":5,"line":707},"status":"passed","title":"should warn when misspelling shouldComponentUpdate"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass should warn when misspelling componentWillReceiveProps","location":{"column":5,"line":715},"status":"passed","title":"should warn when misspelling componentWillReceiveProps"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass should warn when misspelling UNSAFE_componentWillReceiveProps","location":{"column":5,"line":722},"status":"passed","title":"should warn when misspelling UNSAFE_componentWillReceiveProps"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass should throw AND warn when trying to access classic APIs","location":{"column":5,"line":729},"status":"passed","title":"should throw AND warn when trying to access classic APIs"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass supports this.context passed via getChildContext","location":{"column":5,"line":738},"status":"passed","title":"supports this.context passed via getChildContext"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass supports classic refs","location":{"column":5,"line":741},"status":"passed","title":"supports classic refs"},{"ancestorTitles":["ReactTypeScriptClass"],"failureMessages":[],"fullName":"ReactTypeScriptClass supports drilling through to the DOM using findDOMNode","location":{"column":5,"line":745},"status":"passed","title":"supports drilling through to the DOM using findDOMNode"}],"endTime":1639319072204,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactTypeScriptClass-test.ts","startTime":1639319069977,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should work without a ref to be forwarded","location":{"column":3,"line":28},"status":"passed","title":"should work without a ref to be forwarded"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should forward a ref for a single child","location":{"column":3,"line":48},"status":"passed","title":"should forward a ref for a single child"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should forward a ref for multiple children","location":{"column":3,"line":71},"status":"passed","title":"should forward a ref for multiple children"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should maintain child instance and ref through updates","location":{"column":3,"line":100},"status":"passed","title":"should maintain child instance and ref through updates"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should not break lifecycle error handling","location":{"column":3,"line":137},"status":"passed","title":"should not break lifecycle error handling"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should not re-run the render callback on a deep setState","location":{"column":3,"line":195},"status":"passed","title":"should not re-run the render callback on a deep setState"}],"endTime":1639319072726,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/forwardRef-test.internal.js","startTime":1639319072270,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx allows static methods to be called using the type property","location":{"column":3,"line":44},"status":"passed","title":"allows static methods to be called using the type property"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx identifies valid elements","location":{"column":3,"line":56},"status":"passed","title":"identifies valid elements"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx is indistinguishable from a plain object","location":{"column":3,"line":97},"status":"passed","title":"is indistinguishable from a plain object"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx should use default prop value when removing a prop","location":{"column":3,"line":103},"status":"passed","title":"should use default prop value when removing a prop"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx should normalize props with default values","location":{"column":3,"line":122},"status":"passed","title":"should normalize props with default values"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx throws when changing a prop (in dev) after element creation","location":{"column":3,"line":141},"status":"passed","title":"throws when changing a prop (in dev) after element creation"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx throws when adding a prop (in dev) after element creation","location":{"column":3,"line":169},"status":"passed","title":"throws when adding a prop (in dev) after element creation"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx does not warn for NaN props","location":{"column":3,"line":198},"status":"passed","title":"does not warn for NaN props"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx should warn when `key` is being accessed on composite element","location":{"column":3,"line":210},"status":"passed","title":"should warn when `key` is being accessed on composite element"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx warns when a jsxs is passed something that is not an array","location":{"column":3,"line":238},"status":"passed","title":"warns when a jsxs is passed something that is not an array"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx should warn when `key` is being accessed on a host element","location":{"column":3,"line":253},"status":"passed","title":"should warn when `key` is being accessed on a host element"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx should warn when `ref` is being accessed","location":{"column":3,"line":266},"status":"passed","title":"should warn when `ref` is being accessed"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx identifies elements, but not JSON, if Symbols are supported","location":{"column":3,"line":290},"status":"passed","title":"identifies elements, but not JSON, if Symbols are supported"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx should warn when unkeyed children are passed to jsx","location":{"column":3,"line":343},"status":"passed","title":"should warn when unkeyed children are passed to jsx"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx should not warn when unkeyed children are passed to jsxs","location":{"column":3,"line":397},"status":"passed","title":"should not warn when unkeyed children are passed to jsxs"},{"ancestorTitles":["ReactElement.jsx"],"failureMessages":[],"fullName":"ReactElement.jsx does not call lazy initializers eagerly","location":{"column":3,"line":419},"status":"passed","title":"does not call lazy initializers eagerly"}],"endTime":1639319074002,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactElementJSX-test.js","startTime":1639319072793,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator warns for keys for arrays of elements in children position","location":{"column":3,"line":46},"status":"passed","title":"warns for keys for arrays of elements in children position"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator warns for keys for arrays of elements with owner info","location":{"column":3,"line":54},"status":"passed","title":"warns for keys for arrays of elements with owner info"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator warns for keys for iterables of elements in rest args","location":{"column":3,"line":76},"status":"passed","title":"warns for keys for iterables of elements in rest args"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator does not warn for arrays of elements with keys","location":{"column":3,"line":94},"status":"passed","title":"does not warn for arrays of elements with keys"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator does not warn for iterable elements with keys","location":{"column":3,"line":100},"status":"passed","title":"does not warn for iterable elements with keys"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator does not warn for numeric keys in entry iterable as a child","location":{"column":3,"line":119},"status":"passed","title":"does not warn for numeric keys in entry iterable as a child"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator does not warn when the element is directly as children","location":{"column":3,"line":136},"status":"passed","title":"does not warn when the element is directly as children"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator does not warn when the child array contains non-elements","location":{"column":3,"line":145},"status":"passed","title":"does not warn when the child array contains non-elements"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should give context for PropType errors in nested components.","location":{"column":3,"line":149},"status":"passed","title":"should give context for PropType errors in nested components."},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should update component stack after receiving next element","location":{"column":3,"line":175},"status":"passed","title":"should update component stack after receiving next element"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator gives a helpful error when passing null, undefined, or boolean","location":{"column":3,"line":208},"status":"passed","title":"gives a helpful error when passing null, undefined, or boolean"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should check default prop values","location":{"column":3,"line":246},"status":"passed","title":"should check default prop values"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should not check the default for explicit null","location":{"column":3,"line":258},"status":"passed","title":"should not check the default for explicit null"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should check declared prop types","location":{"column":3,"line":268},"status":"passed","title":"should check declared prop types"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should warn on invalid prop types","location":{"column":3,"line":290},"status":"passed","title":"should warn on invalid prop types"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should warn on invalid context types","location":{"column":3,"line":311},"status":"passed","title":"should warn on invalid context types"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should warn if getDefaultProps is specified on the class","location":{"column":3,"line":328},"status":"passed","title":"should warn if getDefaultProps is specified on the class"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator should warn if component declares PropTypes instead of propTypes","location":{"column":3,"line":346},"status":"passed","title":"should warn if component declares PropTypes instead of propTypes"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator warns for fragments with illegal attributes","location":{"column":3,"line":366},"status":"passed","title":"warns for fragments with illegal attributes"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator warns for fragments with refs","location":{"column":3,"line":379},"status":"passed","title":"warns for fragments with refs"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator does not warn for fragments of multiple elements without keys","location":{"column":3,"line":398},"status":"passed","title":"does not warn for fragments of multiple elements without keys"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator warns for fragments of multiple elements with same key","location":{"column":3,"line":407},"status":"passed","title":"warns for fragments of multiple elements with same key"},{"ancestorTitles":["ReactJSXElementValidator"],"failureMessages":[],"fullName":"ReactJSXElementValidator does not call lazy initializers eagerly","location":{"column":3,"line":421},"status":"passed","title":"does not call lazy initializers eagerly"}],"endTime":1639319075762,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactJSXElementValidator-test.js","startTime":1639319074069,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ProfilerDOM"],"failureMessages":[],"fullName":"ProfilerDOM [GATED, SHOULD FAIL] should correctly trace interactions for async roots","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should correctly trace interactions for async roots"}],"endTime":1639319076063,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactProfilerDOM-test.internal.js","startTime":1639319075829,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactDOMTracing","interaction tracing","hidden"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hidden [GATED, SHOULD FAIL] traces interaction through hidden subtree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] traces interaction through hidden subtree"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hidden"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hidden [GATED, SHOULD FAIL] traces interaction through hidden subtree when there is other pending traced work","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] traces interaction through hidden subtree when there is other pending traced work"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hidden"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hidden [GATED, SHOULD FAIL] traces interaction through hidden subtree that schedules more idle/never work","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] traces interaction through hidden subtree that schedules more idle/never work"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hidden"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hidden [GATED, SHOULD FAIL] does not continue interactions across pre-existing idle work","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] does not continue interactions across pre-existing idle work"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hidden"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hidden [GATED, SHOULD FAIL] should properly trace interactions when there is work of interleaved priorities","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should properly trace interactions when there is work of interleaved priorities"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hidden"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hidden [GATED, SHOULD FAIL] should properly trace interactions through a multi-pass SuspenseList render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should properly trace interactions through a multi-pass SuspenseList render"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hydration"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hydration [GATED, SHOULD FAIL] traces interaction across hydration","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] traces interaction across hydration"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hydration"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hydration [GATED, SHOULD FAIL] traces interaction across suspended hydration","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] traces interaction across suspended hydration"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hydration"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hydration [GATED, SHOULD FAIL] traces interaction across suspended hydration from server","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] traces interaction across suspended hydration from server"},{"ancestorTitles":["ReactDOMTracing","interaction tracing","hydration"],"failureMessages":[],"fullName":"ReactDOMTracing interaction tracing hydration [GATED, SHOULD FAIL] traces interaction across client-rendered hydration","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] traces interaction across client-rendered hydration"}],"endTime":1639319076982,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactDOMTracing-test.internal.js","startTime":1639319076130,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactStrictMode"],"failureMessages":[],"fullName":"ReactStrictMode should appear in the client component stack","location":{"column":3,"line":26},"status":"passed","title":"should appear in the client component stack"},{"ancestorTitles":["ReactStrictMode"],"failureMessages":[],"fullName":"ReactStrictMode should appear in the SSR component stack","location":{"column":3,"line":47},"status":"passed","title":"should appear in the SSR component stack"},{"ancestorTitles":["ReactStrictMode"],"failureMessages":[],"fullName":"ReactStrictMode should invoke precommit lifecycle methods twice","location":{"column":3,"line":66},"status":"passed","title":"should invoke precommit lifecycle methods twice"},{"ancestorTitles":["ReactStrictMode"],"failureMessages":[],"fullName":"ReactStrictMode should invoke setState callbacks twice","location":{"column":3,"line":178},"status":"passed","title":"should invoke setState callbacks twice"},{"ancestorTitles":["ReactStrictMode"],"failureMessages":[],"fullName":"ReactStrictMode should invoke precommit lifecycle methods twice in DEV","location":{"column":3,"line":212},"status":"passed","title":"should invoke precommit lifecycle methods twice in DEV"},{"ancestorTitles":["ReactStrictMode"],"failureMessages":[],"fullName":"ReactStrictMode should invoke setState callbacks twice in DEV","location":{"column":3,"line":319},"status":"passed","title":"should invoke setState callbacks twice in DEV"},{"ancestorTitles":["Concurrent Mode"],"failureMessages":[],"fullName":"Concurrent Mode [GATED, SHOULD FAIL] should warn about unsafe legacy lifecycle methods anywhere in the tree","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should warn about unsafe legacy lifecycle methods anywhere in the tree"},{"ancestorTitles":["Concurrent Mode"],"failureMessages":[],"fullName":"Concurrent Mode [GATED, SHOULD FAIL] should coalesce warnings by lifecycle name","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should coalesce warnings by lifecycle name"},{"ancestorTitles":["Concurrent Mode"],"failureMessages":[],"fullName":"Concurrent Mode [GATED, SHOULD FAIL] should warn about components not present during the initial render","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] should warn about components not present during the initial render"},{"ancestorTitles":["Concurrent Mode"],"failureMessages":[],"fullName":"Concurrent Mode should also warn inside of \"strict\" mode trees","location":{"column":3,"line":560},"status":"passed","title":"should also warn inside of \"strict\" mode trees"},{"ancestorTitles":["symbol checks"],"failureMessages":[],"fullName":"symbol checks should switch from StrictMode to a Fragment and reset state","location":{"column":3,"line":617},"status":"passed","title":"should switch from StrictMode to a Fragment and reset state"},{"ancestorTitles":["symbol checks"],"failureMessages":[],"fullName":"symbol checks should switch from a Fragment to StrictMode and reset state","location":{"column":3,"line":653},"status":"passed","title":"should switch from a Fragment to StrictMode and reset state"},{"ancestorTitles":["symbol checks"],"failureMessages":[],"fullName":"symbol checks should update with StrictMode without losing state","location":{"column":3,"line":689},"status":"passed","title":"should update with StrictMode without losing state"},{"ancestorTitles":["string refs"],"failureMessages":[],"fullName":"string refs should warn within a strict tree","location":{"column":3,"line":729},"status":"passed","title":"should warn within a strict tree"},{"ancestorTitles":["string refs"],"failureMessages":[],"fullName":"string refs should warn within a strict tree","location":{"column":3,"line":764},"status":"passed","title":"should warn within a strict tree"},{"ancestorTitles":["context legacy"],"failureMessages":[],"fullName":"context legacy should warn if the legacy context API have been used in strict mode","location":{"column":3,"line":815},"status":"passed","title":"should warn if the legacy context API have been used in strict mode"}],"endTime":1639319078324,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactStrictMode-test.js","startTime":1639319077049,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["onlyChild"],"failureMessages":[],"fullName":"onlyChild should fail when passed two children","location":{"column":3,"line":29},"status":"passed","title":"should fail when passed two children"},{"ancestorTitles":["onlyChild"],"failureMessages":[],"fullName":"onlyChild should fail when passed nully values","location":{"column":3,"line":41},"status":"passed","title":"should fail when passed nully values"},{"ancestorTitles":["onlyChild"],"failureMessages":[],"fullName":"onlyChild should fail when key/value objects","location":{"column":3,"line":53},"status":"passed","title":"should fail when key/value objects"},{"ancestorTitles":["onlyChild"],"failureMessages":[],"fullName":"onlyChild should not fail when passed interpolated single child","location":{"column":3,"line":60},"status":"passed","title":"should not fail when passed interpolated single child"},{"ancestorTitles":["onlyChild"],"failureMessages":[],"fullName":"onlyChild should return the only child","location":{"column":3,"line":67},"status":"passed","title":"should return the only child"}],"endTime":1639319078744,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/onlyChild-test.js","startTime":1639319078406,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass preserves the name of the class for use in error messages","location":{"column":3,"line":63},"status":"passed","title":"preserves the name of the class for use in error messages"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass throws if no render function is defined","location":{"column":3,"line":77},"status":"passed","title":"throws if no render function is defined"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass renders a simple stateless component with prop","location":{"column":3,"line":96},"status":"passed","title":"renders a simple stateless component with prop"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass renders based on state using initial values in this.props","location":{"column":3,"line":122},"status":"passed","title":"renders based on state using initial values in this.props"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass renders based on state using props in the constructor","location":{"column":3,"line":148},"status":"passed","title":"renders based on state using props in the constructor"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass sets initial state with value returned by static getDerivedStateFromProps","location":{"column":3,"line":186},"status":"passed","title":"sets initial state with value returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass warns if getDerivedStateFromProps is not static","location":{"column":3,"line":218},"status":"passed","title":"warns if getDerivedStateFromProps is not static"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass warns if getDerivedStateFromError is not static","location":{"column":3,"line":245},"status":"passed","title":"warns if getDerivedStateFromError is not static"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass warns if getSnapshotBeforeUpdate is static","location":{"column":3,"line":272},"status":"passed","title":"warns if getSnapshotBeforeUpdate is static"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass warns if state not initialized before static getDerivedStateFromProps","location":{"column":3,"line":298},"status":"passed","title":"warns if state not initialized before static getDerivedStateFromProps"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass updates initial state with values returned by static getDerivedStateFromProps","location":{"column":3,"line":329},"status":"passed","title":"updates initial state with values returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass renders updated state with values returned by static getDerivedStateFromProps","location":{"column":3,"line":359},"status":"passed","title":"renders updated state with values returned by static getDerivedStateFromProps"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass renders based on context in the constructor","location":{"column":3,"line":396},"status":"passed","title":"renders based on context in the constructor"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass renders only once when setting state in componentWillMount","location":{"column":3,"line":454},"status":"passed","title":"renders only once when setting state in componentWillMount"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass should warn with non-object in the initial state property","location":{"column":3,"line":488},"status":"passed","title":"should warn with non-object in the initial state property"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass should render with null in the initial state property","location":{"column":3,"line":511},"status":"passed","title":"should render with null in the initial state property"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass setState through an event handler","location":{"column":3,"line":530},"status":"passed","title":"setState through an event handler"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass should not implicitly bind event handlers","location":{"column":3,"line":565},"status":"passed","title":"should not implicitly bind event handlers"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass renders using forceUpdate even when there is no state","location":{"column":3,"line":598},"status":"passed","title":"renders using forceUpdate even when there is no state"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass will call all the normal life cycle methods","location":{"column":3,"line":630},"status":"passed","title":"will call all the normal life cycle methods"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass warns when classic properties are defined on the instance, but does not invoke them.","location":{"column":3,"line":702},"status":"passed","title":"warns when classic properties are defined on the instance, but does not invoke them."},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass does not warn about getInitialState() on class components if state is also defined.","location":{"column":3,"line":741},"status":"passed","title":"does not warn about getInitialState() on class components if state is also defined."},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass should warn when misspelling shouldComponentUpdate","location":{"column":3,"line":769},"status":"passed","title":"should warn when misspelling shouldComponentUpdate"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass should warn when misspelling componentWillReceiveProps","location":{"column":3,"line":796},"status":"passed","title":"should warn when misspelling componentWillReceiveProps"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass should warn when misspelling UNSAFE_componentWillReceiveProps","location":{"column":3,"line":823},"status":"passed","title":"should warn when misspelling UNSAFE_componentWillReceiveProps"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass should throw AND warn when trying to access classic APIs","location":{"column":3,"line":850},"status":"passed","title":"should throw AND warn when trying to access classic APIs"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass supports this.context passed via getChildContext","location":{"column":3,"line":871},"status":"passed","title":"supports this.context passed via getChildContext"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass supports classic refs","location":{"column":3,"line":920},"status":"passed","title":"supports classic refs"},{"ancestorTitles":["ReactCoffeeScriptClass"],"failureMessages":[],"fullName":"ReactCoffeeScriptClass supports drilling through to the DOM using findDOMNode","location":{"column":3,"line":943},"status":"passed","title":"supports drilling through to the DOM using findDOMNode"}],"endTime":1639319079696,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactCoffeeScriptClass-test.coffee","startTime":1639319079204,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should clone a DOM component with new props","location":{"column":3,"line":35},"status":"passed","title":"should clone a DOM component with new props"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should clone a composite component with new props","location":{"column":3,"line":54},"status":"passed","title":"should clone a composite component with new props"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone does not fail if config has no prototype","location":{"column":3,"line":78},"status":"passed","title":"does not fail if config has no prototype"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should keep the original ref if it is not overridden","location":{"column":3,"line":83},"status":"passed","title":"should keep the original ref if it is not overridden"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should transfer the key property","location":{"column":3,"line":102},"status":"passed","title":"should transfer the key property"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should transfer children","location":{"column":3,"line":112},"status":"passed","title":"should transfer children"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should shallow clone children","location":{"column":3,"line":125},"status":"passed","title":"should shallow clone children"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should accept children as rest arguments","location":{"column":3,"line":138},"status":"passed","title":"should accept children as rest arguments"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should override children if undefined is provided as an argument","location":{"column":3,"line":155},"status":"passed","title":"should override children if undefined is provided as an argument"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should support keys and refs","location":{"column":3,"line":175},"status":"passed","title":"should support keys and refs"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should steal the ref if a new ref is specified","location":{"column":3,"line":202},"status":"passed","title":"should steal the ref if a new ref is specified"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should overwrite props","location":{"column":3,"line":225},"status":"passed","title":"should overwrite props"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should normalize props with default values","location":{"column":3,"line":238},"status":"passed","title":"should normalize props with default values"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone warns for keys for arrays of elements in rest args","location":{"column":3,"line":259},"status":"passed","title":"warns for keys for arrays of elements in rest args"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone does not warns for arrays of elements with keys","location":{"column":3,"line":265},"status":"passed","title":"does not warns for arrays of elements with keys"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone does not warn when the element is directly in rest args","location":{"column":3,"line":269},"status":"passed","title":"does not warn when the element is directly in rest args"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone does not warn when the array contains a non-element","location":{"column":3,"line":273},"status":"passed","title":"does not warn when the array contains a non-element"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should check declared prop types after clone","location":{"column":3,"line":277},"status":"passed","title":"should check declared prop types after clone"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should ignore key and ref warning getters","location":{"column":3,"line":310},"status":"passed","title":"should ignore key and ref warning getters"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should ignore undefined key and ref","location":{"column":3,"line":317},"status":"passed","title":"should ignore undefined key and ref"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone should extract null key and ref","location":{"column":3,"line":339},"status":"passed","title":"should extract null key and ref"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone throws an error if passed null","location":{"column":3,"line":361},"status":"passed","title":"throws an error if passed null"},{"ancestorTitles":["ReactElementClone"],"failureMessages":[],"fullName":"ReactElementClone throws an error if passed undefined","location":{"column":3,"line":368},"status":"passed","title":"throws an error if passed undefined"}],"endTime":1639319080095,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactElementClone-test.js","startTime":1639319079762,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should throw when `render` is not specified","location":{"column":3,"line":32},"status":"passed","title":"should throw when `render` is not specified"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should copy prop types onto the Constructor","location":{"column":3,"line":40},"status":"passed","title":"should copy prop types onto the Constructor"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should warn on invalid prop types","location":{"column":3,"line":55},"status":"passed","title":"should warn on invalid prop types"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should warn on invalid context types","location":{"column":3,"line":73},"status":"passed","title":"should warn on invalid context types"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should throw on invalid child context types","location":{"column":3,"line":91},"status":"passed","title":"should throw on invalid child context types"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should warn when misspelling shouldComponentUpdate","location":{"column":3,"line":109},"status":"passed","title":"should warn when misspelling shouldComponentUpdate"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should warn when misspelling componentWillReceiveProps","location":{"column":3,"line":144},"status":"passed","title":"should warn when misspelling componentWillReceiveProps"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should warn when misspelling UNSAFE_componentWillReceiveProps","location":{"column":3,"line":161},"status":"passed","title":"should warn when misspelling UNSAFE_componentWillReceiveProps"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should throw if a reserved property is in statics","location":{"column":3,"line":178},"status":"passed","title":"should throw if a reserved property is in statics"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should warn when using deprecated non-static spec keys","location":{"column":3,"line":202},"status":"pending","title":"should warn when using deprecated non-static spec keys"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should support statics","location":{"column":3,"line":231},"status":"passed","title":"should support statics"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should work with object getInitialState() return values","location":{"column":3,"line":261},"status":"passed","title":"should work with object getInitialState() return values"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should work with getDerivedStateFromProps() return values","location":{"column":3,"line":277},"status":"passed","title":"should work with getDerivedStateFromProps() return values"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration renders based on context getInitialState","location":{"column":3,"line":294},"status":"passed","title":"renders based on context getInitialState"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should throw with non-object getInitialState() return values","location":{"column":3,"line":324},"status":"passed","title":"should throw with non-object getInitialState() return values"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should work with a null getInitialState() return value","location":{"column":3,"line":343},"status":"passed","title":"should work with a null getInitialState() return value"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should throw when using legacy factories","location":{"column":3,"line":357},"status":"passed","title":"should throw when using legacy factories"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration replaceState and callback works","location":{"column":3,"line":373},"status":"passed","title":"replaceState and callback works"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration getDerivedStateFromProps updates state when props change","location":{"column":3,"line":392},"status":"passed","title":"getDerivedStateFromProps updates state when props change"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should support the new static getDerivedStateFromProps method","location":{"column":3,"line":424},"status":"passed","title":"should support the new static getDerivedStateFromProps method"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration warns if getDerivedStateFromProps is not static","location":{"column":3,"line":446},"status":"passed","title":"warns if getDerivedStateFromProps is not static"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration warns if getDerivedStateFromError is not static","location":{"column":3,"line":464},"status":"passed","title":"warns if getDerivedStateFromError is not static"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration warns if getSnapshotBeforeUpdate is static","location":{"column":3,"line":482},"status":"passed","title":"warns if getSnapshotBeforeUpdate is static"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should warn if state is not properly initialized before getDerivedStateFromProps","location":{"column":3,"line":502},"status":"passed","title":"should warn if state is not properly initialized before getDerivedStateFromProps"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present","location":{"column":3,"line":524},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new static gDSFP is present"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present","location":{"column":3,"line":571},"status":"passed","title":"should not invoke deprecated lifecycles (cWM/cWRP/cWU) if new getSnapshotBeforeUpdate is present"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration should invoke both deprecated and new lifecycles if both are present","location":{"column":3,"line":614},"status":"passed","title":"should invoke both deprecated and new lifecycles if both are present"},{"ancestorTitles":["create-react-class-integration"],"failureMessages":[],"fullName":"create-react-class-integration isMounted works","location":{"column":3,"line":667},"status":"passed","title":"isMounted works"}],"endTime":1639319082080,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/createReactClassIntegration-test.js","startTime":1639319080162,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator warns for keys for arrays of elements in rest args","location":{"column":3,"line":41},"status":"passed","title":"warns for keys for arrays of elements in rest args"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator warns for keys for arrays of elements with owner info","location":{"column":3,"line":50},"status":"passed","title":"warns for keys for arrays of elements with owner info"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator warns for keys for arrays with no owner or parent info","location":{"column":3,"line":77},"status":"passed","title":"warns for keys for arrays with no owner or parent info"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator warns for keys for arrays of elements with no owner info","location":{"column":3,"line":94},"status":"passed","title":"warns for keys for arrays of elements with no owner info"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator warns for keys with component stack info","location":{"column":3,"line":107},"status":"passed","title":"warns for keys with component stack info"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not warn for keys when passing children down","location":{"column":3,"line":131},"status":"passed","title":"does not warn for keys when passing children down"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator warns for keys for iterables of elements in rest args","location":{"column":3,"line":149},"status":"passed","title":"warns for keys for iterables of elements in rest args"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not warns for arrays of elements with keys","location":{"column":3,"line":170},"status":"passed","title":"does not warns for arrays of elements with keys"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not warns for iterable elements with keys","location":{"column":3,"line":177},"status":"passed","title":"does not warns for iterable elements with keys"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not warn when the element is directly in rest args","location":{"column":3,"line":198},"status":"passed","title":"does not warn when the element is directly in rest args"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not warn when the array contains a non-element","location":{"column":3,"line":207},"status":"passed","title":"does not warn when the array contains a non-element"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should give context for PropType errors in nested components.","location":{"column":3,"line":211},"status":"passed","title":"should give context for PropType errors in nested components."},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator gives a helpful error when passing invalid types","location":{"column":3,"line":235},"status":"passed","title":"gives a helpful error when passing invalid types"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator includes the owner name when passing null, undefined, boolean, or number","location":{"column":3,"line":291},"status":"passed","title":"includes the owner name when passing null, undefined, boolean, or number"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should check default prop values","location":{"column":3,"line":312},"status":"passed","title":"should check default prop values"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should not check the default for explicit null","location":{"column":3,"line":330},"status":"passed","title":"should not check the default for explicit null"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should check declared prop types","location":{"column":3,"line":350},"status":"passed","title":"should check declared prop types"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should warn if a PropType creator is used as a PropType","location":{"column":3,"line":382},"status":"passed","title":"should warn if a PropType creator is used as a PropType"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should warn if component declares PropTypes instead of propTypes","location":{"column":3,"line":405},"status":"passed","title":"should warn if component declares PropTypes instead of propTypes"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator warns for fragments with illegal attributes","location":{"column":3,"line":426},"status":"passed","title":"warns for fragments with illegal attributes"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should warn when accessing .type on an element factory","location":{"column":5,"line":442},"status":"passed","title":"should warn when accessing .type on an element factory"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not warn when using DOM node as children","location":{"column":3,"line":471},"status":"passed","title":"does not warn when using DOM node as children"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator should not enumerate enumerable numbers (#4776)","location":{"column":3,"line":486},"status":"passed","title":"should not enumerate enumerable numbers (#4776)"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not blow up with inlined children","location":{"column":3,"line":506},"status":"passed","title":"does not blow up with inlined children"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not blow up on key warning with undefined type","location":{"column":3,"line":522},"status":"passed","title":"does not blow up on key warning with undefined type"},{"ancestorTitles":["ReactElementValidator"],"failureMessages":[],"fullName":"ReactElementValidator does not call lazy initializers eagerly","location":{"column":3,"line":536},"status":"passed","title":"does not call lazy initializers eagerly"}],"endTime":1639319083896,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactElementValidator-test.internal.js","startTime":1639319082146,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should filter out context not in contextTypes","location":{"column":3,"line":38},"status":"passed","title":"should filter out context not in contextTypes"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should pass next context to lifecycles","location":{"column":3,"line":71},"status":"passed","title":"should pass next context to lifecycles"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should check context types","location":{"column":3,"line":149},"status":"passed","title":"should check context types"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should check child context types","location":{"column":3,"line":214},"status":"passed","title":"should check child context types"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator warns of incorrect prop types on context provider","location":{"column":3,"line":255},"status":"passed","title":"warns of incorrect prop types on context provider"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should warn (but not error) if getChildContext method is missing","location":{"column":3,"line":279},"status":"passed","title":"should warn (but not error) if getChildContext method is missing"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should pass parent context if getChildContext method is missing","location":{"column":3,"line":315},"status":"passed","title":"should pass parent context if getChildContext method is missing"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should pass next context to lifecycles","location":{"column":3,"line":364},"status":"passed","title":"should pass next context to lifecycles"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should re-render PureComponents when context Provider updates","location":{"column":3,"line":438},"status":"passed","title":"should re-render PureComponents when context Provider updates"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should warn if both contextType and contextTypes are defined","location":{"column":3,"line":471},"status":"passed","title":"should warn if both contextType and contextTypes are defined"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should warn if an invalid contextType is defined","location":{"column":3,"line":537},"status":"passed","title":"should warn if an invalid contextType is defined"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should not warn when class contextType is null","location":{"column":3,"line":574},"status":"passed","title":"should not warn when class contextType is null"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should warn when class contextType is undefined","location":{"column":3,"line":586},"status":"passed","title":"should warn when class contextType is undefined"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should warn when class contextType is an object","location":{"column":3,"line":610},"status":"passed","title":"should warn when class contextType is an object"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should warn when class contextType is a primitive","location":{"column":3,"line":633},"status":"passed","title":"should warn when class contextType is a primitive"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should warn if you define contextType on a function component","location":{"column":3,"line":652},"status":"passed","title":"should warn if you define contextType on a function component"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator should honor a displayName if set on the context type","location":{"column":3,"line":677},"status":"passed","title":"should honor a displayName if set on the context type"},{"ancestorTitles":["ReactContextValidator"],"failureMessages":[],"fullName":"ReactContextValidator warns if displayName is set on the consumer type","location":{"column":3,"line":697},"status":"passed","title":"warns if displayName is set on the consumer type"}],"endTime":1639319085452,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactContextValidator-test.js","startTime":1639319083963,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactPureComponent"],"failureMessages":[],"fullName":"ReactPureComponent should render","location":{"column":3,"line":21},"status":"passed","title":"should render"},{"ancestorTitles":["ReactPureComponent"],"failureMessages":[],"fullName":"ReactPureComponent can override shouldComponentUpdate","location":{"column":3,"line":64},"status":"passed","title":"can override shouldComponentUpdate"},{"ancestorTitles":["ReactPureComponent"],"failureMessages":[],"fullName":"ReactPureComponent extends React.Component","location":{"column":3,"line":87},"status":"passed","title":"extends React.Component"},{"ancestorTitles":["ReactPureComponent"],"failureMessages":[],"fullName":"ReactPureComponent should warn when shouldComponentUpdate is defined on React.PureComponent","location":{"column":3,"line":101},"status":"passed","title":"should warn when shouldComponentUpdate is defined on React.PureComponent"}],"endTime":1639319085767,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactPureComponent-test.js","startTime":1639319085527,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactProfiler DevTools integration"],"failureMessages":[],"fullName":"ReactProfiler DevTools integration should auto-Profile all fibers if the DevTools hook is detected","location":{"column":3,"line":56},"status":"passed","title":"should auto-Profile all fibers if the DevTools hook is detected"},{"ancestorTitles":["ReactProfiler DevTools integration"],"failureMessages":[],"fullName":"ReactProfiler DevTools integration should reset the fiber stack correctly after an error when profiling host roots","location":{"column":3,"line":123},"status":"passed","title":"should reset the fiber stack correctly after an error when profiling host roots"},{"ancestorTitles":["ReactProfiler DevTools integration"],"failureMessages":[],"fullName":"ReactProfiler DevTools integration should store traced interactions on the HostNode so DevTools can access them","location":{"column":3,"line":160},"status":"passed","title":"should store traced interactions on the HostNode so DevTools can access them"},{"ancestorTitles":["ReactProfiler DevTools integration"],"failureMessages":[],"fullName":"ReactProfiler DevTools integration regression test: #17159","location":{"column":3,"line":181},"status":"passed","title":"regression test: #17159"}],"endTime":1639319086178,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactProfilerDevToolsIntegration-test.internal.js","startTime":1639319085836,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactClassEquivalence"],"failureMessages":[],"fullName":"ReactClassEquivalence tests the same thing for es6 classes and CoffeeScript","location":{"column":3,"line":15},"status":"passed","title":"tests the same thing for es6 classes and CoffeeScript"},{"ancestorTitles":["ReactClassEquivalence"],"failureMessages":[],"fullName":"ReactClassEquivalence tests the same thing for es6 classes and TypeScript","location":{"column":3,"line":21},"status":"passed","title":"tests the same thing for es6 classes and TypeScript"}],"endTime":1639319098507,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactClassEquivalence-test.js","startTime":1639319086254,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:enabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:enabled enableProfilerTimer:enabled should warn if required params are missing","location":{"column":13,"line":132},"status":"passed","title":"should warn if required params are missing"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:enabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:enabled enableProfilerTimer:enabled should support an empty Profiler (with no children)","location":{"column":11,"line":141},"status":"passed","title":"should support an empty Profiler (with no children)"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:enabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:enabled enableProfilerTimer:enabled should render children","location":{"column":11,"line":159},"status":"passed","title":"should render children"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:enabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:enabled enableProfilerTimer:enabled should support nested Profilers","location":{"column":11,"line":173},"status":"passed","title":"should support nested Profilers"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:enabled enableProfilerTimer:disabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:enabled enableProfilerTimer:disabled should support an empty Profiler (with no children)","location":{"column":11,"line":141},"status":"passed","title":"should support an empty Profiler (with no children)"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:enabled enableProfilerTimer:disabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:enabled enableProfilerTimer:disabled should render children","location":{"column":11,"line":159},"status":"passed","title":"should render children"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:enabled enableProfilerTimer:disabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:enabled enableProfilerTimer:disabled should support nested Profilers","location":{"column":11,"line":173},"status":"passed","title":"should support nested Profilers"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:disabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:disabled enableProfilerTimer:enabled should warn if required params are missing","location":{"column":13,"line":132},"status":"passed","title":"should warn if required params are missing"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:disabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:disabled enableProfilerTimer:enabled should support an empty Profiler (with no children)","location":{"column":11,"line":141},"status":"passed","title":"should support an empty Profiler (with no children)"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:disabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:disabled enableProfilerTimer:enabled should render children","location":{"column":11,"line":159},"status":"passed","title":"should render children"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:disabled enableProfilerTimer:enabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:disabled enableProfilerTimer:enabled should support nested Profilers","location":{"column":11,"line":173},"status":"passed","title":"should support nested Profilers"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:disabled enableProfilerTimer:disabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:disabled enableProfilerTimer:disabled should support an empty Profiler (with no children)","location":{"column":11,"line":141},"status":"passed","title":"should support an empty Profiler (with no children)"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:disabled enableProfilerTimer:disabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:disabled enableProfilerTimer:disabled should render children","location":{"column":11,"line":159},"status":"passed","title":"should render children"},{"ancestorTitles":["Profiler","works in profiling and non-profiling bundles","enableSchedulerTracing:disabled enableProfilerTimer:disabled"],"failureMessages":[],"fullName":"Profiler works in profiling and non-profiling bundles enableSchedulerTracing:disabled enableProfilerTimer:disabled should support nested Profilers","location":{"column":11,"line":173},"status":"passed","title":"should support nested Profilers"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled should handle errors thrown","location":{"column":7,"line":208},"status":"passed","title":"should handle errors thrown"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled is not invoked until the commit phase","location":{"column":7,"line":242},"status":"passed","title":"is not invoked until the commit phase"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled does not record times for components outside of Profiler tree","location":{"column":7,"line":267},"status":"passed","title":"does not record times for components outside of Profiler tree"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled does not report work done on a sibling","location":{"column":7,"line":316},"status":"passed","title":"does not report work done on a sibling"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled logs render times for both mount and update","location":{"column":7,"line":401},"status":"passed","title":"logs render times for both mount and update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled includes render times of nested Profilers in their parent times","location":{"column":7,"line":472},"status":"passed","title":"includes render times of nested Profilers in their parent times"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled traces sibling Profilers separately","location":{"column":7,"line":507},"status":"passed","title":"traces sibling Profilers separately"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled does not include time spent outside of profile root","location":{"column":7,"line":540},"status":"passed","title":"does not include time spent outside of profile root"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled is not called when blocked by sCU false","location":{"column":7,"line":565},"status":"passed","title":"is not called when blocked by sCU false"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled decreases actual time but not base time when sCU prevents an update","location":{"column":7,"line":605},"status":"passed","title":"decreases actual time but not base time when sCU prevents an update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled includes time spent in render phase lifecycles","location":{"column":7,"line":647},"status":"passed","title":"includes time spent in render phase lifecycles"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions should accumulate actual time after a scheduling interruptions","location":{"column":9,"line":700},"status":"passed","title":"should accumulate actual time after a scheduling interruptions"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions should not include time between frames","location":{"column":9,"line":734},"status":"passed","title":"should not include time between frames"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions should report the expected times when a high-pri update replaces a mount in-progress","location":{"column":9,"line":784},"status":"passed","title":"should report the expected times when a high-pri update replaces a mount in-progress"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions should report the expected times when a high-priority update replaces a low-priority update","location":{"column":9,"line":837},"status":"passed","title":"should report the expected times when a high-priority update replaces a low-priority update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions should report the expected times when a high-priority update interrupts a low-priority update","location":{"column":9,"line":918},"status":"passed","title":"should report the expected times when a high-priority update interrupts a low-priority update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback enabled should accumulate actual time after an error handled by componentDidCatch()","location":{"column":13,"line":1042},"status":"passed","title":"should accumulate actual time after an error handled by componentDidCatch()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback enabled should accumulate actual time after an error handled by getDerivedStateFromError()","location":{"column":13,"line":1121},"status":"passed","title":"should accumulate actual time after an error handled by getDerivedStateFromError()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback enabled should reset the fiber stack correct after a \"complete\" phase error","location":{"column":13,"line":1179},"status":"passed","title":"should reset the fiber stack correct after a \"complete\" phase error"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback disabled should accumulate actual time after an error handled by componentDidCatch()","location":{"column":13,"line":1042},"status":"passed","title":"should accumulate actual time after an error handled by componentDidCatch()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback disabled should accumulate actual time after an error handled by getDerivedStateFromError()","location":{"column":13,"line":1121},"status":"passed","title":"should accumulate actual time after an error handled by getDerivedStateFromError()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback disabled should reset the fiber stack correct after a \"complete\" phase error","location":{"column":13,"line":1179},"status":"passed","title":"should reset the fiber stack correct after a \"complete\" phase error"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled reflects the most recently rendered id value","location":{"column":7,"line":1221},"status":"passed","title":"reflects the most recently rendered id value"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:enabled should not be called until after mutations","location":{"column":7,"line":1259},"status":"passed","title":"should not be called until after mutations"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:enabled should report time spent in layout effects and commit lifecycles","location":{"column":7,"line":1302},"status":"passed","title":"should report time spent in layout effects and commit lifecycles"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:enabled should report time spent in layout effects and commit lifecycles with cascading renders","location":{"column":7,"line":1398},"status":"passed","title":"should report time spent in layout effects and commit lifecycles with cascading renders"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:enabled should bubble time spent in layout effects to higher profilers","location":{"column":7,"line":1492},"status":"passed","title":"should bubble time spent in layout effects to higher profilers"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:enabled should properly report time in layout effects even when there are errors","location":{"column":7,"line":1580},"status":"passed","title":"should properly report time in layout effects even when there are errors"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:enabled should properly report time in layout effect cleanup functions even when there are errors","location":{"column":7,"line":1668},"status":"passed","title":"should properly report time in layout effect cleanup functions even when there are errors"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:enabled should report interactions that were active","location":{"column":9,"line":1800},"status":"passed","title":"should report interactions that were active"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:enabled should report time spent in passive effects","location":{"column":7,"line":1868},"status":"passed","title":"should report time spent in passive effects"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:enabled should report time spent in passive effects with cascading renders","location":{"column":7,"line":1964},"status":"passed","title":"should report time spent in passive effects with cascading renders"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:enabled should bubble time spent in effects to higher profilers","location":{"column":7,"line":2012},"status":"passed","title":"should bubble time spent in effects to higher profilers"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:enabled should properly report time in passive effects even when there are errors","location":{"column":7,"line":2100},"status":"passed","title":"should properly report time in passive effects even when there are errors"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:enabled should properly report time in passive effect cleanup functions even when there are errors","location":{"column":7,"line":2188},"status":"passed","title":"should properly report time in passive effect cleanup functions even when there are errors"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:enabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:enabled should report interactions that were active","location":{"column":9,"line":2323},"status":"passed","title":"should report interactions that were active"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled should handle errors thrown","location":{"column":7,"line":208},"status":"passed","title":"should handle errors thrown"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled is not invoked until the commit phase","location":{"column":7,"line":242},"status":"passed","title":"is not invoked until the commit phase"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled does not record times for components outside of Profiler tree","location":{"column":7,"line":267},"status":"passed","title":"does not record times for components outside of Profiler tree"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled does not report work done on a sibling","location":{"column":7,"line":316},"status":"passed","title":"does not report work done on a sibling"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled logs render times for both mount and update","location":{"column":7,"line":401},"status":"passed","title":"logs render times for both mount and update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled includes render times of nested Profilers in their parent times","location":{"column":7,"line":472},"status":"passed","title":"includes render times of nested Profilers in their parent times"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled traces sibling Profilers separately","location":{"column":7,"line":507},"status":"passed","title":"traces sibling Profilers separately"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled does not include time spent outside of profile root","location":{"column":7,"line":540},"status":"passed","title":"does not include time spent outside of profile root"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled is not called when blocked by sCU false","location":{"column":7,"line":565},"status":"passed","title":"is not called when blocked by sCU false"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled decreases actual time but not base time when sCU prevents an update","location":{"column":7,"line":605},"status":"passed","title":"decreases actual time but not base time when sCU prevents an update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled includes time spent in render phase lifecycles","location":{"column":7,"line":647},"status":"passed","title":"includes time spent in render phase lifecycles"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions should accumulate actual time after a scheduling interruptions","location":{"column":9,"line":700},"status":"passed","title":"should accumulate actual time after a scheduling interruptions"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions should not include time between frames","location":{"column":9,"line":734},"status":"passed","title":"should not include time between frames"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions should report the expected times when a high-pri update replaces a mount in-progress","location":{"column":9,"line":784},"status":"passed","title":"should report the expected times when a high-pri update replaces a mount in-progress"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions should report the expected times when a high-priority update replaces a low-priority update","location":{"column":9,"line":837},"status":"passed","title":"should report the expected times when a high-priority update replaces a low-priority update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions should report the expected times when a high-priority update interrupts a low-priority update","location":{"column":9,"line":918},"status":"passed","title":"should report the expected times when a high-priority update interrupts a low-priority update"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback enabled should accumulate actual time after an error handled by componentDidCatch()","location":{"column":13,"line":1042},"status":"passed","title":"should accumulate actual time after an error handled by componentDidCatch()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback enabled should accumulate actual time after an error handled by getDerivedStateFromError()","location":{"column":13,"line":1121},"status":"passed","title":"should accumulate actual time after an error handled by getDerivedStateFromError()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback enabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback enabled should reset the fiber stack correct after a \"complete\" phase error","location":{"column":13,"line":1179},"status":"passed","title":"should reset the fiber stack correct after a \"complete\" phase error"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback disabled should accumulate actual time after an error handled by componentDidCatch()","location":{"column":13,"line":1042},"status":"passed","title":"should accumulate actual time after an error handled by componentDidCatch()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback disabled should accumulate actual time after an error handled by getDerivedStateFromError()","location":{"column":13,"line":1121},"status":"passed","title":"should accumulate actual time after an error handled by getDerivedStateFromError()"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled","with regard to interruptions","replayFailedUnitOfWorkWithInvokeGuardedCallback disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled with regard to interruptions replayFailedUnitOfWorkWithInvokeGuardedCallback disabled should reset the fiber stack correct after a \"complete\" phase error","location":{"column":13,"line":1179},"status":"passed","title":"should reset the fiber stack correct after a \"complete\" phase error"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled reflects the most recently rendered id value","location":{"column":7,"line":1221},"status":"passed","title":"reflects the most recently rendered id value"},{"ancestorTitles":["Profiler","onRender enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onRender enableSchedulerTracing:disabled should not be called until after mutations","location":{"column":7,"line":1259},"status":"passed","title":"should not be called until after mutations"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:disabled should report time spent in layout effects and commit lifecycles","location":{"column":7,"line":1302},"status":"passed","title":"should report time spent in layout effects and commit lifecycles"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:disabled should report time spent in layout effects and commit lifecycles with cascading renders","location":{"column":7,"line":1398},"status":"passed","title":"should report time spent in layout effects and commit lifecycles with cascading renders"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:disabled should bubble time spent in layout effects to higher profilers","location":{"column":7,"line":1492},"status":"passed","title":"should bubble time spent in layout effects to higher profilers"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:disabled should properly report time in layout effects even when there are errors","location":{"column":7,"line":1580},"status":"passed","title":"should properly report time in layout effects even when there are errors"},{"ancestorTitles":["Profiler","onCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onCommit enableSchedulerTracing:disabled should properly report time in layout effect cleanup functions even when there are errors","location":{"column":7,"line":1668},"status":"passed","title":"should properly report time in layout effect cleanup functions even when there are errors"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:disabled should report time spent in passive effects","location":{"column":7,"line":1868},"status":"passed","title":"should report time spent in passive effects"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:disabled should report time spent in passive effects with cascading renders","location":{"column":7,"line":1964},"status":"passed","title":"should report time spent in passive effects with cascading renders"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:disabled should bubble time spent in effects to higher profilers","location":{"column":7,"line":2012},"status":"passed","title":"should bubble time spent in effects to higher profilers"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:disabled should properly report time in passive effects even when there are errors","location":{"column":7,"line":2100},"status":"passed","title":"should properly report time in passive effects even when there are errors"},{"ancestorTitles":["Profiler","onPostCommit enableSchedulerTracing:disabled"],"failureMessages":[],"fullName":"Profiler onPostCommit enableSchedulerTracing:disabled should properly report time in passive effect cleanup functions even when there are errors","location":{"column":7,"line":2188},"status":"passed","title":"should properly report time in passive effect cleanup functions even when there are errors"},{"ancestorTitles":["Profiler","interaction tracing","error handling"],"failureMessages":[],"fullName":"Profiler interaction tracing error handling should cover errors thrown in onWorkScheduled","location":{"column":7,"line":2448},"status":"passed","title":"should cover errors thrown in onWorkScheduled"},{"ancestorTitles":["Profiler","interaction tracing","error handling"],"failureMessages":[],"fullName":"Profiler interaction tracing error handling should cover errors thrown in onWorkStarted","location":{"column":7,"line":2483},"status":"passed","title":"should cover errors thrown in onWorkStarted"},{"ancestorTitles":["Profiler","interaction tracing","error handling"],"failureMessages":[],"fullName":"Profiler interaction tracing error handling should cover errors thrown in onWorkStopped","location":{"column":7,"line":2514},"status":"passed","title":"should cover errors thrown in onWorkStopped"},{"ancestorTitles":["Profiler","interaction tracing","error handling"],"failureMessages":[],"fullName":"Profiler interaction tracing error handling should cover errors thrown in onInteractionScheduledWorkCompleted","location":{"column":7,"line":2549},"status":"passed","title":"should cover errors thrown in onInteractionScheduledWorkCompleted"},{"ancestorTitles":["Profiler","interaction tracing"],"failureMessages":[],"fullName":"Profiler interaction tracing should properly trace work scheduled during the begin render phase","location":{"column":5,"line":2594},"status":"passed","title":"should properly trace work scheduled during the begin render phase"},{"ancestorTitles":["Profiler","interaction tracing"],"failureMessages":[],"fullName":"Profiler interaction tracing should associate traced events with their subsequent commits","location":{"column":5,"line":2622},"status":"passed","title":"should associate traced events with their subsequent commits"},{"ancestorTitles":["Profiler","interaction tracing"],"failureMessages":[],"fullName":"Profiler interaction tracing should not mark an interaction complete while passive effects are outstanding","location":{"column":5,"line":2893},"status":"passed","title":"should not mark an interaction complete while passive effects are outstanding"},{"ancestorTitles":["Profiler","interaction tracing"],"failureMessages":[],"fullName":"Profiler interaction tracing should report the expected times when a high-priority update interrupts a low-priority update","location":{"column":5,"line":2934},"status":"passed","title":"should report the expected times when a high-priority update interrupts a low-priority update"},{"ancestorTitles":["Profiler","interaction tracing"],"failureMessages":[],"fullName":"Profiler interaction tracing should trace work spawned by a commit phase lifecycle and setState callback","location":{"column":5,"line":3126},"status":"passed","title":"should trace work spawned by a commit phase lifecycle and setState callback"},{"ancestorTitles":["Profiler","interaction tracing"],"failureMessages":[],"fullName":"Profiler interaction tracing should trace interactions associated with a parent component state update","location":{"column":5,"line":3372},"status":"passed","title":"should trace interactions associated with a parent component state update"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense traces both the temporary placeholder and the finished render for an interaction","location":{"column":7,"line":3463},"status":"passed","title":"traces both the temporary placeholder and the finished render for an interaction"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense does not prematurely complete for suspended sync renders","location":{"column":7,"line":3555},"status":"passed","title":"does not prematurely complete for suspended sync renders"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense traces cascading work after suspended sync renders","location":{"column":7,"line":3599},"status":"passed","title":"traces cascading work after suspended sync renders"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense does not prematurely complete for suspended renders that have exceeded their deadline","location":{"column":7,"line":3675},"status":"passed","title":"does not prematurely complete for suspended renders that have exceeded their deadline"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense decrements interaction count correctly if suspense loads before placeholder is shown","location":{"column":7,"line":3723},"status":"passed","title":"decrements interaction count correctly if suspense loads before placeholder is shown"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense handles high-pri renderers between suspended and resolved (sync) trees","location":{"column":7,"line":3766},"status":"passed","title":"handles high-pri renderers between suspended and resolved (sync) trees"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense handles high-pri renderers between suspended and resolved (async) trees","location":{"column":7,"line":3872},"status":"passed","title":"handles high-pri renderers between suspended and resolved (async) trees"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense does not trace Promises flagged with __reactDoNotTraceInteractions","location":{"column":7,"line":3979},"status":"passed","title":"does not trace Promises flagged with __reactDoNotTraceInteractions"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense should properly report base duration wrt suspended subtrees","location":{"column":7,"line":4067},"status":"passed","title":"should properly report base duration wrt suspended subtrees"},{"ancestorTitles":["Profiler","interaction tracing","suspense"],"failureMessages":[],"fullName":"Profiler interaction tracing suspense [GATED, SHOULD FAIL] double invoking does not disconnect wrapped async work","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] double invoking does not disconnect wrapped async work"}],"endTime":1639319105049,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactProfiler-test.internal.js","startTime":1639319098573,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should support identity for simple","location":{"column":3,"line":22},"status":"passed","title":"should support identity for simple"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should support Portal components","location":{"column":3,"line":47},"status":"passed","title":"should support Portal components"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should treat single arrayless child as being in array","location":{"column":3,"line":72},"status":"passed","title":"should treat single arrayless child as being in array"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should treat single child in array as expected","location":{"column":3,"line":93},"status":"passed","title":"should treat single child in array as expected"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should be called for each child","location":{"column":3,"line":114},"status":"passed","title":"should be called for each child"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should traverse children of different kinds","location":{"column":3,"line":162},"status":"passed","title":"should traverse children of different kinds"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should be called for each child in nested structure","location":{"column":3,"line":219},"status":"passed","title":"should be called for each child in nested structure"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should retain key across two mappings","location":{"column":3,"line":262},"status":"passed","title":"should retain key across two mappings"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should be called for each child in an iterable without keys","location":{"column":3,"line":299},"status":"passed","title":"should be called for each child in an iterable without keys"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should be called for each child in an iterable with keys","location":{"column":3,"line":350},"status":"passed","title":"should be called for each child in an iterable with keys"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should not enumerate enumerable numbers (#4776)","location":{"column":3,"line":398},"status":"passed","title":"should not enumerate enumerable numbers (#4776)"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should allow extension of native prototypes","location":{"column":3,"line":443},"status":"passed","title":"should allow extension of native prototypes"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should pass key to returned component","location":{"column":3,"line":484},"status":"passed","title":"should pass key to returned component"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should invoke callback with the right context","location":{"column":3,"line":500},"status":"passed","title":"should invoke callback with the right context"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should be called for each child","location":{"column":3,"line":525},"status":"passed","title":"should be called for each child"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should be called for each child in nested structure","location":{"column":3,"line":587},"status":"passed","title":"should be called for each child in nested structure"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should retain key across two mappings","location":{"column":3,"line":660},"status":"passed","title":"should retain key across two mappings"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should not throw if key provided is a dupe with array key","location":{"column":3,"line":701},"status":"passed","title":"should not throw if key provided is a dupe with array key"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should use the same key for a cloned element","location":{"column":3,"line":721},"status":"passed","title":"should use the same key for a cloned element"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should use the same key for a cloned element with key","location":{"column":3,"line":741},"status":"passed","title":"should use the same key for a cloned element with key"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should return 0 for null children","location":{"column":3,"line":761},"status":"passed","title":"should return 0 for null children"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should return 0 for undefined children","location":{"column":3,"line":766},"status":"passed","title":"should return 0 for undefined children"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should return 1 for single child","location":{"column":3,"line":771},"status":"passed","title":"should return 1 for single child"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should count the number of children in flat structure","location":{"column":3,"line":778},"status":"passed","title":"should count the number of children in flat structure"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should count the number of children in nested structure","location":{"column":3,"line":798},"status":"passed","title":"should count the number of children in nested structure"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should flatten children to an array","location":{"column":3,"line":813},"status":"passed","title":"should flatten children to an array"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should escape keys","location":{"column":3,"line":850},"status":"passed","title":"should escape keys"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should combine keys when map returns an array","location":{"column":3,"line":869},"status":"passed","title":"should combine keys when map returns an array"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should throw on object","location":{"column":3,"line":937},"status":"passed","title":"should throw on object"},{"ancestorTitles":["ReactChildren"],"failureMessages":[],"fullName":"ReactChildren should throw on regex","location":{"column":3,"line":950},"status":"passed","title":"should throw on regex"},{"ancestorTitles":["ReactChildren","with fragments enabled"],"failureMessages":[],"fullName":"ReactChildren with fragments enabled warns for keys for arrays of elements in a fragment","location":{"column":5,"line":965},"status":"passed","title":"warns for keys for arrays of elements in a fragment"},{"ancestorTitles":["ReactChildren","with fragments enabled"],"failureMessages":[],"fullName":"ReactChildren with fragments enabled does not warn when there are keys on elements in a fragment","location":{"column":5,"line":982},"status":"passed","title":"does not warn when there are keys on elements in a fragment"},{"ancestorTitles":["ReactChildren","with fragments enabled"],"failureMessages":[],"fullName":"ReactChildren with fragments enabled warns for keys for arrays at the top level","location":{"column":5,"line":992},"status":"passed","title":"warns for keys for arrays at the top level"}],"endTime":1639319107203,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactChildren-test.js","startTime":1639319105116,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement uses the fallback value when in an environment without Symbol","location":{"column":3,"line":44},"status":"passed","title":"uses the fallback value when in an environment without Symbol"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement returns a complete element according to spec","location":{"column":3,"line":48},"status":"passed","title":"returns a complete element according to spec"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement should warn when `key` is being accessed on composite element","location":{"column":3,"line":60},"status":"passed","title":"should warn when `key` is being accessed on composite element"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement should warn when `key` is being accessed on a host element","location":{"column":3,"line":86},"status":"passed","title":"should warn when `key` is being accessed on a host element"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement should warn when `ref` is being accessed","location":{"column":3,"line":99},"status":"passed","title":"should warn when `ref` is being accessed"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement allows a string to be passed as the type","location":{"column":3,"line":123},"status":"passed","title":"allows a string to be passed as the type"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement returns an immutable element","location":{"column":3,"line":135},"status":"passed","title":"returns an immutable element"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement does not reuse the original config object","location":{"column":3,"line":144},"status":"passed","title":"does not reuse the original config object"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement does not fail if config has no prototype","location":{"column":3,"line":152},"status":"passed","title":"does not fail if config has no prototype"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement extracts key and ref from the config","location":{"column":3,"line":158},"status":"passed","title":"extracts key and ref from the config"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement extracts null key and ref","location":{"column":3,"line":174},"status":"passed","title":"extracts null key and ref"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement ignores undefined key and ref","location":{"column":3,"line":190},"status":"passed","title":"ignores undefined key and ref"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement ignores key and ref warning getters","location":{"column":3,"line":207},"status":"passed","title":"ignores key and ref warning getters"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement coerces the key to a string","location":{"column":3,"line":214},"status":"passed","title":"coerces the key to a string"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement preserves the owner on the element","location":{"column":3,"line":229},"status":"passed","title":"preserves the owner on the element"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement merges an additional argument onto the children prop","location":{"column":3,"line":245},"status":"passed","title":"merges an additional argument onto the children prop"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement does not override children if no rest args are provided","location":{"column":3,"line":257},"status":"passed","title":"does not override children if no rest args are provided"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement overrides children if null is provided as an argument","location":{"column":3,"line":264},"status":"passed","title":"overrides children if null is provided as an argument"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement merges rest arguments onto the children prop in an array","location":{"column":3,"line":275},"status":"passed","title":"merges rest arguments onto the children prop in an array"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement allows static methods to be called using the type property","location":{"column":3,"line":285},"status":"passed","title":"allows static methods to be called using the type property"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement identifies valid elements","location":{"column":3,"line":299},"status":"passed","title":"identifies valid elements"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement is indistinguishable from a plain object","location":{"column":3,"line":334},"status":"passed","title":"is indistinguishable from a plain object"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement should use default prop value when removing a prop","location":{"column":3,"line":342},"status":"passed","title":"should use default prop value when removing a prop"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement should normalize props with default values","location":{"column":3,"line":363},"status":"passed","title":"should normalize props with default values"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement throws when changing a prop (in dev) after element creation","location":{"column":3,"line":382},"status":"passed","title":"throws when changing a prop (in dev) after element creation"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement throws when adding a prop (in dev) after element creation","location":{"column":3,"line":408},"status":"passed","title":"throws when adding a prop (in dev) after element creation"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement does not warn for NaN props","location":{"column":3,"line":437},"status":"passed","title":"does not warn for NaN props"},{"ancestorTitles":["ReactElement"],"failureMessages":[],"fullName":"ReactElement identifies elements, but not JSON, if Symbols are supported","location":{"column":3,"line":449},"status":"passed","title":"identifies elements, but not JSON, if Symbols are supported"}],"endTime":1639319109056,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactElement-test.js","startTime":1639319107270,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement returns a complete element according to spec","location":{"column":3,"line":32},"status":"passed","title":"returns a complete element according to spec"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement allows a lower-case to be passed as the string type","location":{"column":3,"line":42},"status":"passed","title":"allows a lower-case to be passed as the string type"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement allows a string to be passed as the type","location":{"column":3,"line":52},"status":"passed","title":"allows a string to be passed as the type"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement returns an immutable element","location":{"column":3,"line":63},"status":"passed","title":"returns an immutable element"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement does not reuse the object that is spread into props","location":{"column":3,"line":72},"status":"passed","title":"does not reuse the object that is spread into props"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement extracts key and ref from the rest of the props","location":{"column":3,"line":80},"status":"passed","title":"extracts key and ref from the rest of the props"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement coerces the key to a string","location":{"column":3,"line":90},"status":"passed","title":"coerces the key to a string"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement merges JSX children onto the children prop","location":{"column":3,"line":100},"status":"passed","title":"merges JSX children onto the children prop"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement does not override children if no JSX children are provided","location":{"column":3,"line":106},"status":"passed","title":"does not override children if no JSX children are provided"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement overrides children if null is provided as a JSX child","location":{"column":3,"line":111},"status":"passed","title":"overrides children if null is provided as a JSX child"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement overrides children if undefined is provided as an argument","location":{"column":3,"line":116},"status":"passed","title":"overrides children if undefined is provided as an argument"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement merges JSX children onto the children prop in an array","location":{"column":3,"line":128},"status":"passed","title":"merges JSX children onto the children prop in an array"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement allows static methods to be called using the type property","location":{"column":3,"line":142},"status":"passed","title":"allows static methods to be called using the type property"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement identifies valid elements","location":{"column":3,"line":156},"status":"passed","title":"identifies valid elements"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement is indistinguishable from a plain object","location":{"column":3,"line":168},"status":"passed","title":"is indistinguishable from a plain object"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement should use default prop value when removing a prop","location":{"column":3,"line":174},"status":"passed","title":"should use default prop value when removing a prop"},{"ancestorTitles":["ReactJSXElement"],"failureMessages":[],"fullName":"ReactJSXElement should normalize props with default values","location":{"column":3,"line":185},"status":"passed","title":"should normalize props with default values"}],"endTime":1639319110217,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactJSXElement-test.js","startTime":1639319109123,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCache"],"failureMessages":[],"fullName":"ReactCache [GATED, SHOULD FAIL] exports something","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] exports something"}],"endTime":1639319110437,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactCache-test.js","startTime":1639319110283,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should update refs when switching between children","location":{"column":3,"line":26},"status":"passed","title":"should update refs when switching between children"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should support rendering null","location":{"column":3,"line":51},"status":"passed","title":"should support rendering null"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should support rendering null for multiple children","location":{"column":3,"line":61},"status":"passed","title":"should support rendering null for multiple children"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should support propTypes and defaultProps","location":{"column":3,"line":77},"status":"passed","title":"should support propTypes and defaultProps"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should warn if not provided a callback during creation","location":{"column":3,"line":128},"status":"passed","title":"should warn if not provided a callback during creation"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should warn if no render function is provided","location":{"column":3,"line":149},"status":"passed","title":"should warn if no render function is provided"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should warn if the render function provided has propTypes or defaultProps attributes","location":{"column":3,"line":158},"status":"passed","title":"should warn if the render function provided has propTypes or defaultProps attributes"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should not warn if the render function provided does not use any parameter","location":{"column":3,"line":185},"status":"passed","title":"should not warn if the render function provided does not use any parameter"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should warn if the render function provided does not use the forwarded ref parameter","location":{"column":3,"line":191},"status":"passed","title":"should warn if the render function provided does not use the forwarded ref parameter"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should not warn if the render function provided use exactly two parameters","location":{"column":3,"line":203},"status":"passed","title":"should not warn if the render function provided use exactly two parameters"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should warn if the render function provided expects to use more than two parameters","location":{"column":3,"line":208},"status":"passed","title":"should warn if the render function provided expects to use more than two parameters"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should honor a displayName if set on the forwardRef wrapper in warnings","location":{"column":3,"line":220},"status":"passed","title":"should honor a displayName if set on the forwardRef wrapper in warnings"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should honor a displayName in stacks if set on the inner function","location":{"column":3,"line":249},"status":"passed","title":"should honor a displayName in stacks if set on the inner function"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should not bailout if forwardRef is not wrapped in memo","location":{"column":3,"line":276},"status":"passed","title":"should not bailout if forwardRef is not wrapped in memo"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should bailout if forwardRef is wrapped in memo","location":{"column":3,"line":297},"status":"passed","title":"should bailout if forwardRef is wrapped in memo"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef should custom memo comparisons to compose","location":{"column":3,"line":337},"status":"passed","title":"should custom memo comparisons to compose"},{"ancestorTitles":["forwardRef"],"failureMessages":[],"fullName":"forwardRef warns on forwardRef(memo(...))","location":{"column":3,"line":403},"status":"passed","title":"warns on forwardRef(memo(...))"}],"endTime":1639319111398,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/forwardRef-test.js","startTime":1639319110505,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactCreateRef"],"failureMessages":[],"fullName":"ReactCreateRef should warn in dev if an invalid ref object is provided","location":{"column":3,"line":23},"status":"passed","title":"should warn in dev if an invalid ref object is provided"}],"endTime":1639319111678,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react/src/__tests__/ReactCreateRef-test.js","startTime":1639319111468,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should return undefined for unknown/invalid types","location":{"column":3,"line":25},"status":"passed","title":"should return undefined for unknown/invalid types"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs identifies valid element types","location":{"column":3,"line":34},"status":"passed","title":"identifies valid element types"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify context consumers","location":{"column":3,"line":81},"status":"passed","title":"should identify context consumers"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify context providers","location":{"column":3,"line":90},"status":"passed","title":"should identify context providers"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify elements","location":{"column":3,"line":99},"status":"passed","title":"should identify elements"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify ref forwarding component","location":{"column":3,"line":118},"status":"passed","title":"should identify ref forwarding component"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify fragments","location":{"column":3,"line":127},"status":"passed","title":"should identify fragments"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify portals","location":{"column":3,"line":137},"status":"passed","title":"should identify portals"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify memo","location":{"column":3,"line":146},"status":"passed","title":"should identify memo"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify lazy","location":{"column":3,"line":155},"status":"passed","title":"should identify lazy"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify strict mode","location":{"column":3,"line":164},"status":"passed","title":"should identify strict mode"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify suspense","location":{"column":3,"line":172},"status":"passed","title":"should identify suspense"},{"ancestorTitles":["ReactIs"],"failureMessages":[],"fullName":"ReactIs should identify profile root","location":{"column":3,"line":181},"status":"passed","title":"should identify profile root"}],"endTime":1639319112699,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/react-is/src/__tests__/ReactIs-test.js","startTime":1639319111745,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["describeWithPointerEvent: PointerEvent"],"failureMessages":[],"fullName":"describeWithPointerEvent: PointerEvent provides boolean to tests","location":{"column":3,"line":25},"status":"passed","title":"provides boolean to tests"},{"ancestorTitles":["describeWithPointerEvent: PointerEvent"],"failureMessages":[],"fullName":"describeWithPointerEvent: PointerEvent testWithPointerType: mouse","location":{"column":9,"line":42},"status":"passed","title":"testWithPointerType: mouse"},{"ancestorTitles":["describeWithPointerEvent: PointerEvent"],"failureMessages":[],"fullName":"describeWithPointerEvent: PointerEvent testWithPointerType: touch","location":{"column":9,"line":42},"status":"passed","title":"testWithPointerType: touch"},{"ancestorTitles":["describeWithPointerEvent: PointerEvent"],"failureMessages":[],"fullName":"describeWithPointerEvent: PointerEvent testWithPointerType: pen","location":{"column":9,"line":42},"status":"passed","title":"testWithPointerType: pen"},{"ancestorTitles":["describeWithPointerEvent: MouseEvent/TouchEvent"],"failureMessages":[],"fullName":"describeWithPointerEvent: MouseEvent/TouchEvent provides boolean to tests","location":{"column":3,"line":25},"status":"passed","title":"provides boolean to tests"},{"ancestorTitles":["describeWithPointerEvent: MouseEvent/TouchEvent"],"failureMessages":[],"fullName":"describeWithPointerEvent: MouseEvent/TouchEvent testWithPointerType: mouse","location":{"column":9,"line":42},"status":"passed","title":"testWithPointerType: mouse"},{"ancestorTitles":["describeWithPointerEvent: MouseEvent/TouchEvent"],"failureMessages":[],"fullName":"describeWithPointerEvent: MouseEvent/TouchEvent testWithPointerType: touch","location":{"column":9,"line":42},"status":"passed","title":"testWithPointerType: touch"},{"ancestorTitles":["createEventTarget"],"failureMessages":[],"fullName":"createEventTarget returns expected API","location":{"column":3,"line":48},"status":"passed","title":"returns expected API"},{"ancestorTitles":["createEventTarget",".blur()"],"failureMessages":[],"fullName":"createEventTarget .blur() default","location":{"column":5,"line":80},"status":"passed","title":"default"},{"ancestorTitles":["createEventTarget",".blur()"],"failureMessages":[],"fullName":"createEventTarget .blur() custom payload","location":{"column":5,"line":88},"status":"passed","title":"custom payload"},{"ancestorTitles":["createEventTarget",".click()"],"failureMessages":[],"fullName":"createEventTarget .click() default","location":{"column":5,"line":98},"status":"passed","title":"default"},{"ancestorTitles":["createEventTarget",".click()"],"failureMessages":[],"fullName":"createEventTarget .click() custom payload","location":{"column":5,"line":125},"status":"passed","title":"custom payload"},{"ancestorTitles":["createEventTarget",".focus()"],"failureMessages":[],"fullName":"createEventTarget .focus() default","location":{"column":5,"line":165},"status":"passed","title":"default"},{"ancestorTitles":["createEventTarget",".focus()"],"failureMessages":[],"fullName":"createEventTarget .focus() custom payload","location":{"column":5,"line":173},"status":"passed","title":"custom payload"},{"ancestorTitles":["createEventTarget",".keydown()"],"failureMessages":[],"fullName":"createEventTarget .keydown() default","location":{"column":5,"line":183},"status":"passed","title":"default"},{"ancestorTitles":["createEventTarget",".keydown()"],"failureMessages":[],"fullName":"createEventTarget .keydown() custom payload","location":{"column":5,"line":198},"status":"passed","title":"custom payload"},{"ancestorTitles":["createEventTarget",".keyup()"],"failureMessages":[],"fullName":"createEventTarget .keyup() default","location":{"column":5,"line":220},"status":"passed","title":"default"},{"ancestorTitles":["createEventTarget",".keyup()"],"failureMessages":[],"fullName":"createEventTarget .keyup() custom payload","location":{"column":5,"line":235},"status":"passed","title":"custom payload"},{"ancestorTitles":["createEventTarget",".scroll()"],"failureMessages":[],"fullName":"createEventTarget .scroll() default","location":{"column":5,"line":257},"status":"passed","title":"default"},{"ancestorTitles":["createEventTarget",".virtualclick()"],"failureMessages":[],"fullName":"createEventTarget .virtualclick() default","location":{"column":5,"line":267},"status":"passed","title":"default"},{"ancestorTitles":["createEventTarget",".virtualclick()"],"failureMessages":[],"fullName":"createEventTarget .virtualclick() custom payload","location":{"column":5,"line":294},"status":"passed","title":"custom payload"},{"ancestorTitles":["createEventTarget"],"failureMessages":[],"fullName":"createEventTarget .setBoundingClientRect()","location":{"column":3,"line":337},"status":"passed","title":".setBoundingClientRect()"}],"endTime":1639319113023,"message":"","name":"/home/runner/work/react-tests/react-tests/react/packages/dom-event-testing-library/__tests__/index-test.internal.js","startTime":1639319112766,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev does not fail if a warning contains a stack","location":{"column":3,"line":13},"status":"passed","title":"does not fail if a warning contains a stack"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev does not fail if all warnings contain a stack","location":{"column":3,"line":21},"status":"passed","title":"does not fail if all warnings contain a stack"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev does not fail if warnings without stack explicitly opt out","location":{"column":3,"line":31},"status":"passed","title":"does not fail if warnings without stack explicitly opt out"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev does not fail when expected stack-less warning number matches the actual one","location":{"column":3,"line":46},"status":"passed","title":"does not fail when expected stack-less warning number matches the actual one"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if a warning does not contain a stack","location":{"column":5,"line":70},"status":"passed","title":"fails if a warning does not contain a stack"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if some warnings do not contain a stack","location":{"column":5,"line":78},"status":"passed","title":"fails if some warnings do not contain a stack"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if warning is expected to not have a stack, but does","location":{"column":5,"line":109},"status":"passed","title":"fails if warning is expected to not have a stack, but does"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if expected stack-less warning number does not match the actual one","location":{"column":5,"line":124},"status":"passed","title":"fails if expected stack-less warning number does not match the actual one"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if withoutStack is invalid","location":{"column":5,"line":134},"status":"passed","title":"fails if withoutStack is invalid"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if the argument number does not match","location":{"column":5,"line":152},"status":"passed","title":"fails if the argument number does not match"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if stack is passed twice","location":{"column":5,"line":166},"status":"passed","title":"fails if stack is passed twice"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails if multiple strings are passed without an array wrapper","location":{"column":5,"line":174},"status":"passed","title":"fails if multiple strings are passed without an array wrapper"},{"ancestorTitles":["toErrorDev"],"failureMessages":[],"fullName":"toErrorDev fails on more than two arguments","location":{"column":5,"line":202},"status":"passed","title":"fails on more than two arguments"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev does not fail if a warning contains a stack","location":{"column":3,"line":215},"status":"passed","title":"does not fail if a warning contains a stack"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev does not fail if all warnings contain a stack","location":{"column":3,"line":223},"status":"passed","title":"does not fail if all warnings contain a stack"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev does not fail if warnings without stack explicitly opt out","location":{"column":3,"line":233},"status":"passed","title":"does not fail if warnings without stack explicitly opt out"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev does not fail when expected stack-less warning number matches the actual one","location":{"column":3,"line":248},"status":"passed","title":"does not fail when expected stack-less warning number matches the actual one"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if a warning does not contain a stack","location":{"column":5,"line":272},"status":"passed","title":"fails if a warning does not contain a stack"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if some warnings do not contain a stack","location":{"column":5,"line":280},"status":"passed","title":"fails if some warnings do not contain a stack"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if warning is expected to not have a stack, but does","location":{"column":5,"line":311},"status":"passed","title":"fails if warning is expected to not have a stack, but does"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if expected stack-less warning number does not match the actual one","location":{"column":5,"line":328},"status":"passed","title":"fails if expected stack-less warning number does not match the actual one"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if withoutStack is invalid","location":{"column":5,"line":340},"status":"passed","title":"fails if withoutStack is invalid"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if the argument number does not match","location":{"column":5,"line":358},"status":"passed","title":"fails if the argument number does not match"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if stack is passed twice","location":{"column":5,"line":372},"status":"passed","title":"fails if stack is passed twice"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails if multiple strings are passed without an array wrapper","location":{"column":5,"line":380},"status":"passed","title":"fails if multiple strings are passed without an array wrapper"},{"ancestorTitles":["toWarnDev"],"failureMessages":[],"fullName":"toWarnDev fails on more than two arguments","location":{"column":5,"line":408},"status":"passed","title":"fails on more than two arguments"}],"endTime":1639319113334,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/jest/matchers/__tests__/toWarnDev-test.js","startTime":1639319113089,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["evalToString"],"failureMessages":[],"fullName":"evalToString should support StringLiteral","location":{"column":3,"line":17},"status":"passed","title":"should support StringLiteral"},{"ancestorTitles":["evalToString"],"failureMessages":[],"fullName":"evalToString should support string concat (`+`)","location":{"column":3,"line":22},"status":"passed","title":"should support string concat (`+`)"},{"ancestorTitles":["evalToString"],"failureMessages":[],"fullName":"evalToString should throw when it finds other types","location":{"column":3,"line":26},"status":"passed","title":"should throw when it finds other types"}],"endTime":1639319113584,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/shared/__tests__/evalToString-test.js","startTime":1639319113401,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          console.error('Oh no');\n        }\n      ","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          console.error('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          console.error('Hello %s', foo)\n        }\n      ","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          console.error('Hello %s', foo)\n        }\n      "},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          console.error('Hello %s %s', foo, bar)\n        }\n      ","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          console.error('Hello %s %s', foo, bar)\n        }\n      "},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          console.warn('Oh no');\n        }\n      ","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          console.warn('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          console.warn('Oh no');\n        }\n      ","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          console.warn('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          if (potato) {\n            while (true) {\n              console.error('Oh no');\n            }\n          }\n        }","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          if (potato) {\n            while (true) {\n              console.error('Oh no');\n            }\n          }\n        }"},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        var f;\n        if (__DEV__) {\n          f = function() {\n            if (potato) {\n              while (true) {\n                console.error('Oh no');\n              }\n            }\n          };\n        }","location":{"column":32,"line":884},"status":"passed","title":"\n        var f;\n        if (__DEV__) {\n          f = function() {\n            if (potato) {\n              while (true) {\n                console.error('Oh no');\n              }\n            }\n          };\n        }"},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid normalFunctionCall(test);","location":{"column":32,"line":884},"status":"passed","title":"normalFunctionCall(test);"},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid invariant(test);","location":{"column":32,"line":884},"status":"passed","title":"invariant(test);"},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          normalFunctionCall(test);\n        }\n      ","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          normalFunctionCall(test);\n        }\n      "},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        if (__DEV__) {\n          if (foo) {\n            if (__DEV__) {\n            } else {\n              console.error('Oh no');\n            }\n          }\n        }","location":{"column":32,"line":884},"status":"passed","title":"\n        if (__DEV__) {\n          if (foo) {\n            if (__DEV__) {\n            } else {\n              console.error('Oh no');\n            }\n          }\n        }"},{"ancestorTitles":["no-production-logging","valid"],"failureMessages":[],"fullName":"no-production-logging valid \n        console['error']('Oh no');\n      ","location":{"column":32,"line":884},"status":"passed","title":"\n        console['error']('Oh no');\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid console.error('Oh no');","location":{"column":32,"line":892},"status":"passed","title":"console.error('Oh no');"},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid console.warn('Oh no');","location":{"column":32,"line":892},"status":"passed","title":"console.warn('Oh no');"},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid console.warn('Oh no')","location":{"column":32,"line":892},"status":"passed","title":"console.warn('Oh no')"},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (potato) {\n          console.warn('Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (potato) {\n          console.warn('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (__DEV__ || potato && true) {\n          console.error('Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (__DEV__ || potato && true) {\n          console.error('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (banana && __DEV__ && potato && kitten) {\n          console.error('Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (banana && __DEV__ && potato && kitten) {\n          console.error('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (!__DEV__) {\n          console.error('Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (!__DEV__) {\n          console.error('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (foo || x && __DEV__) {\n          console.error('Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (foo || x && __DEV__) {\n          console.error('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (__DEV__) {\n        } else {\n          console.error('Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (__DEV__) {\n        } else {\n          console.error('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (__DEV__) {\n        } else {\n          if (__DEV__) {\n          } else {\n            console.error('Oh no');\n          }\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (__DEV__) {\n        } else {\n          if (__DEV__) {\n          } else {\n            console.error('Oh no');\n          }\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (__DEV__) {\n          console.log('Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (__DEV__) {\n          console.log('Oh no');\n        }\n      "},{"ancestorTitles":["no-production-logging","invalid"],"failureMessages":[],"fullName":"no-production-logging invalid \n        if (__DEV__) {\n          console.log.apply(console, 'Oh no');\n        }\n      ","location":{"column":32,"line":892},"status":"passed","title":"\n        if (__DEV__) {\n          console.log.apply(console, 'Oh no');\n        }\n      "}],"endTime":1639319114039,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/eslint-rules/__tests__/no-production-logging-test.internal.js","startTime":1639319113650,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eslint-rules/no-to-warn-dev-within-to-throw","valid"],"failureMessages":[],"fullName":"eslint-rules/no-to-warn-dev-within-to-throw valid expect(callback).toWarnDev(\"warning\");","location":{"column":32,"line":884},"status":"passed","title":"expect(callback).toWarnDev(\"warning\");"},{"ancestorTitles":["eslint-rules/no-to-warn-dev-within-to-throw","valid"],"failureMessages":[],"fullName":"eslint-rules/no-to-warn-dev-within-to-throw valid expect(function() { expect(callback).toThrow(\"error\") }).toWarnDev(\"warning\");","location":{"column":32,"line":884},"status":"passed","title":"expect(function() { expect(callback).toThrow(\"error\") }).toWarnDev(\"warning\");"},{"ancestorTitles":["eslint-rules/no-to-warn-dev-within-to-throw","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-to-warn-dev-within-to-throw invalid expect(function() { expect(callback).toWarnDev(\"warning\") }).toThrow(\"error\");","location":{"column":32,"line":892},"status":"passed","title":"expect(function() { expect(callback).toWarnDev(\"warning\") }).toThrow(\"error\");"}],"endTime":1639319114379,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/eslint-rules/__tests__/no-to-warn-dev-within-to-throw-test.internal.js","startTime":1639319114106,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eslint-rules/invariant-args","valid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args valid arbitraryFunction(a, b)","location":{"column":32,"line":884},"status":"passed","title":"arbitraryFunction(a, b)"},{"ancestorTitles":["eslint-rules/invariant-args","valid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args valid invariant(false, 'Do not override existing functions.')","location":{"column":32,"line":884},"status":"passed","title":"invariant(false, 'Do not override existing functions.')"},{"ancestorTitles":["eslint-rules/invariant-args","valid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args valid invariant(false, 'createRoot(...): Target container is not a DOM element.')","location":{"column":32,"line":884},"status":"passed","title":"invariant(false, 'createRoot(...): Target container is not a DOM element.')"},{"ancestorTitles":["eslint-rules/invariant-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args invalid invariant('hello, world');","location":{"column":32,"line":892},"status":"passed","title":"invariant('hello, world');"},{"ancestorTitles":["eslint-rules/invariant-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args invalid invariant(true, null);","location":{"column":32,"line":892},"status":"passed","title":"invariant(true, null);"},{"ancestorTitles":["eslint-rules/invariant-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args invalid var g = 5; invariant(true, g);","location":{"column":32,"line":892},"status":"passed","title":"var g = 5; invariant(true, g);"},{"ancestorTitles":["eslint-rules/invariant-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args invalid invariant(true, 'error!');","location":{"column":32,"line":892},"status":"passed","title":"invariant(true, 'error!');"},{"ancestorTitles":["eslint-rules/invariant-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args invalid invariant(true, '%s %s, %s %s: %s (%s)', 1, 2, 3, 4, 5, 6);","location":{"column":32,"line":892},"status":"passed","title":"invariant(true, '%s %s, %s %s: %s (%s)', 1, 2, 3, 4, 5, 6);"},{"ancestorTitles":["eslint-rules/invariant-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/invariant-args invalid invariant(false, 'Not in error map')","location":{"column":32,"line":892},"status":"passed","title":"invariant(false, 'Not in error map')"}],"endTime":1639319114746,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/eslint-rules/__tests__/invariant-args-test.internal.js","startTime":1639319114446,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eslint-rules/no-cross-fork-types","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types valid \nconst a = obj.key_old;\nconst b = obj.key_new;\nconst {key_old, key_new} = obj;\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst a = obj.key_old;\nconst b = obj.key_new;\nconst {key_old, key_new} = obj;\n"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types valid \nconst a = obj.key_old;\nconst {key_old} = obj;\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst a = obj.key_old;\nconst {key_old} = obj;\n"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types valid \nconst a = obj.key_new;\nconst {key_new} = obj;\n","location":{"column":32,"line":884},"status":"passed","title":"\nconst a = obj.key_new;\nconst {key_new} = obj;\n"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types invalid const a = obj.key_new;","location":{"column":32,"line":892},"status":"passed","title":"const a = obj.key_new;"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types invalid const a = obj.key_old;","location":{"column":32,"line":892},"status":"passed","title":"const a = obj.key_old;"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types invalid const {key_new} = obj;","location":{"column":32,"line":892},"status":"passed","title":"const {key_new} = obj;"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types invalid const {key_old} = obj;","location":{"column":32,"line":892},"status":"passed","title":"const {key_old} = obj;"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types invalid const subtreeFlags = obj.subtreeFlags;","location":{"column":32,"line":892},"status":"passed","title":"const subtreeFlags = obj.subtreeFlags;"},{"ancestorTitles":["eslint-rules/no-cross-fork-types","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-types invalid const firstEffect = obj.firstEffect;","location":{"column":32,"line":892},"status":"passed","title":"const firstEffect = obj.firstEffect;"}],"endTime":1639319115125,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/eslint-rules/__tests__/no-cross-fork-types-test.internal.js","startTime":1639319114813,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eslint-rules/no-cross-fork-imports","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports valid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop';","location":{"column":32,"line":884},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports valid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new';","location":{"column":32,"line":884},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports valid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new.js';","location":{"column":32,"line":884},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new.js';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports valid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old';","location":{"column":32,"line":884},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","valid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports valid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old.js';","location":{"column":32,"line":884},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old.js';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports invalid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new';","location":{"column":32,"line":892},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports invalid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new.js';","location":{"column":32,"line":892},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.new.js';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports invalid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old';","location":{"column":32,"line":892},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old';"},{"ancestorTitles":["eslint-rules/no-cross-fork-imports","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-cross-fork-imports invalid import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old.js';","location":{"column":32,"line":892},"status":"passed","title":"import {scheduleUpdateOnFiber} from './ReactFiberWorkLoop.old.js';"}],"endTime":1639319115497,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/eslint-rules/__tests__/no-cross-fork-imports-test.internal.js","startTime":1639319115207,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eslint-rules/warning-args","valid"],"failureMessages":[],"fullName":"eslint-rules/warning-args valid console.error('hello, world');","location":{"column":32,"line":884},"status":"passed","title":"console.error('hello, world');"},{"ancestorTitles":["eslint-rules/warning-args","valid"],"failureMessages":[],"fullName":"eslint-rules/warning-args valid console.error('expected %s, got %s', 42, 24);","location":{"column":32,"line":884},"status":"passed","title":"console.error('expected %s, got %s', 42, 24);"},{"ancestorTitles":["eslint-rules/warning-args","valid"],"failureMessages":[],"fullName":"eslint-rules/warning-args valid arbitraryFunction(a, b)","location":{"column":32,"line":884},"status":"passed","title":"arbitraryFunction(a, b)"},{"ancestorTitles":["eslint-rules/warning-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/warning-args invalid console.error(null);","location":{"column":32,"line":892},"status":"passed","title":"console.error(null);"},{"ancestorTitles":["eslint-rules/warning-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/warning-args invalid console.warn(null);","location":{"column":32,"line":892},"status":"passed","title":"console.warn(null);"},{"ancestorTitles":["eslint-rules/warning-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/warning-args invalid var g = 5; console.error(g);","location":{"column":32,"line":892},"status":"passed","title":"var g = 5; console.error(g);"},{"ancestorTitles":["eslint-rules/warning-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/warning-args invalid console.error('expected %s, got %s');","location":{"column":32,"line":892},"status":"passed","title":"console.error('expected %s, got %s');"},{"ancestorTitles":["eslint-rules/warning-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/warning-args invalid console.error('foo is a bar under foobar', 'junk argument');","location":{"column":32,"line":892},"status":"passed","title":"console.error('foo is a bar under foobar', 'junk argument');"},{"ancestorTitles":["eslint-rules/warning-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/warning-args invalid console.error('error!');","location":{"column":32,"line":892},"status":"passed","title":"console.error('error!');"},{"ancestorTitles":["eslint-rules/warning-args","invalid"],"failureMessages":[],"fullName":"eslint-rules/warning-args invalid console.error('%s %s, %s %s: %s (%s)', 1, 2, 3, 4, 5, 6);","location":{"column":32,"line":892},"status":"passed","title":"console.error('%s %s, %s %s: %s (%s)', 1, 2, 3, 4, 5, 6);"}],"endTime":1639319115867,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/eslint-rules/__tests__/warning-args-test.internal.js","startTime":1639319115564,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["eslint-rules/no-primitive-constructors","valid"],"failureMessages":[],"fullName":"eslint-rules/no-primitive-constructors valid !!obj","location":{"column":32,"line":884},"status":"passed","title":"!!obj"},{"ancestorTitles":["eslint-rules/no-primitive-constructors","valid"],"failureMessages":[],"fullName":"eslint-rules/no-primitive-constructors valid '' + obj","location":{"column":32,"line":884},"status":"passed","title":"'' + obj"},{"ancestorTitles":["eslint-rules/no-primitive-constructors","valid"],"failureMessages":[],"fullName":"eslint-rules/no-primitive-constructors valid +string","location":{"column":32,"line":884},"status":"passed","title":"+string"},{"ancestorTitles":["eslint-rules/no-primitive-constructors","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-primitive-constructors invalid Boolean(obj)","location":{"column":32,"line":892},"status":"passed","title":"Boolean(obj)"},{"ancestorTitles":["eslint-rules/no-primitive-constructors","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-primitive-constructors invalid String(obj)","location":{"column":32,"line":892},"status":"passed","title":"String(obj)"},{"ancestorTitles":["eslint-rules/no-primitive-constructors","invalid"],"failureMessages":[],"fullName":"eslint-rules/no-primitive-constructors invalid Number(string)","location":{"column":32,"line":892},"status":"passed","title":"Number(string)"}],"endTime":1639319116205,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/eslint-rules/__tests__/no-primitive-constructors-test.internal.js","startTime":1639319115933,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["transform-prevent-infinite-loops"],"failureMessages":[],"fullName":"transform-prevent-infinite-loops fails the test for `while` loops","location":{"column":3,"line":14},"status":"passed","title":"fails the test for `while` loops"},{"ancestorTitles":["transform-prevent-infinite-loops"],"failureMessages":[],"fullName":"transform-prevent-infinite-loops fails the test for `for` loops","location":{"column":3,"line":27},"status":"passed","title":"fails the test for `for` loops"}],"endTime":1639319116437,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/babel/__tests__/transform-prevent-infinite-loops-test.js","startTime":1639319116272,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma no pragma","location":{"column":3,"line":46},"status":"passed","title":"no pragma"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma no pragma, unrelated comment","location":{"column":3,"line":51},"status":"passed","title":"no pragma, unrelated comment"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma basic positive test","location":{"column":5,"line":13},"status":"passed","title":"basic positive test"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma basic negative test","location":{"column":5,"line":13},"status":"passed","title":"basic negative test"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma it method","location":{"column":5,"line":13},"status":"passed","title":"it method"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma test.only","location":{"column":5,"line":24},"status":"passed","title":"test.only"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma it.only","location":{"column":5,"line":24},"status":"passed","title":"it.only"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma fit","location":{"column":5,"line":24},"status":"passed","title":"fit"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma flag negation","location":{"column":5,"line":13},"status":"passed","title":"flag negation"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma multiple gates","location":{"column":5,"line":13},"status":"passed","title":"multiple gates"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma multiple gates 2","location":{"column":5,"line":13},"status":"passed","title":"multiple gates 2"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma &&","location":{"column":5,"line":13},"status":"passed","title":"&&"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma ||","location":{"column":5,"line":13},"status":"passed","title":"||"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma groups","location":{"column":5,"line":13},"status":"passed","title":"groups"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma ==","location":{"column":5,"line":13},"status":"passed","title":"=="},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma ===","location":{"column":5,"line":13},"status":"passed","title":"==="},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma !=","location":{"column":5,"line":13},"status":"passed","title":"!="},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma !==","location":{"column":5,"line":13},"status":"passed","title":"!=="},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma true","location":{"column":5,"line":13},"status":"passed","title":"true"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma false","location":{"column":5,"line":13},"status":"passed","title":"false"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma double quoted strings","location":{"column":5,"line":13},"status":"passed","title":"double quoted strings"},{"ancestorTitles":["transform-test-gate-pragma"],"failureMessages":[],"fullName":"transform-test-gate-pragma single quoted strings","location":{"column":5,"line":13},"status":"passed","title":"single quoted strings"},{"ancestorTitles":["transform test-gate-pragma: actual runtime"],"failureMessages":[],"fullName":"transform test-gate-pragma: actual runtime __DEV__","location":{"column":7,"line":283},"status":"passed","title":"__DEV__"},{"ancestorTitles":["transform test-gate-pragma: actual runtime"],"failureMessages":[],"fullName":"transform test-gate-pragma: actual runtime strings","location":{"column":7,"line":283},"status":"passed","title":"strings"},{"ancestorTitles":["transform test-gate-pragma: actual runtime"],"failureMessages":[],"fullName":"transform test-gate-pragma: actual runtime [GATED, SHOULD FAIL] works with console.error tracking","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] works with console.error tracking"},{"ancestorTitles":["transform test-gate-pragma: actual runtime"],"failureMessages":[],"fullName":"transform test-gate-pragma: actual runtime [GATED, SHOULD FAIL] works with console.warn tracking","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] works with console.warn tracking"},{"ancestorTitles":["transform test-gate-pragma: actual runtime"],"failureMessages":[],"fullName":"transform test-gate-pragma: actual runtime [GATED, SHOULD FAIL] works with console tracking if error is thrown before end of test","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] works with console tracking if error is thrown before end of test"},{"ancestorTitles":["dynamic gate method"],"failureMessages":[],"fullName":"dynamic gate method [GATED, SHOULD FAIL] returns same conditions as pragma","location":{"column":7,"line":285},"status":"passed","title":"[GATED, SHOULD FAIL] returns same conditions as pragma"}],"endTime":1639319116719,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/babel/__tests__/transform-test-gate-pragma-test.js","startTime":1639319116503,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["invertObject"],"failureMessages":[],"fullName":"invertObject should return an empty object for an empty input","location":{"column":3,"line":14},"status":"passed","title":"should return an empty object for an empty input"},{"ancestorTitles":["invertObject"],"failureMessages":[],"fullName":"invertObject should invert key-values","location":{"column":3,"line":18},"status":"passed","title":"should invert key-values"},{"ancestorTitles":["invertObject"],"failureMessages":[],"fullName":"invertObject should take the last value when there are duplications in vals","location":{"column":3,"line":30},"status":"passed","title":"should take the last value when there are duplications in vals"},{"ancestorTitles":["invertObject"],"failureMessages":[],"fullName":"invertObject should preserve the original order","location":{"column":3,"line":43},"status":"passed","title":"should preserve the original order"}],"endTime":1639319116956,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/error-codes/__tests__/invertObject-test.js","startTime":1639319116786,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["error transform"],"failureMessages":[],"fullName":"error transform should replace simple invariant calls","location":{"column":3,"line":31},"status":"passed","title":"should replace simple invariant calls"},{"ancestorTitles":["error transform"],"failureMessages":[],"fullName":"error transform should throw if invariant is not in an expression statement","location":{"column":3,"line":40},"status":"passed","title":"should throw if invariant is not in an expression statement"},{"ancestorTitles":["error transform"],"failureMessages":[],"fullName":"error transform should support invariant calls with args","location":{"column":3,"line":49},"status":"passed","title":"should support invariant calls with args"},{"ancestorTitles":["error transform"],"failureMessages":[],"fullName":"error transform should support invariant calls with a concatenated template string and args","location":{"column":3,"line":58},"status":"passed","title":"should support invariant calls with a concatenated template string and args"},{"ancestorTitles":["error transform"],"failureMessages":[],"fullName":"error transform should correctly transform invariants that are not in the error codes map","location":{"column":3,"line":67},"status":"passed","title":"should correctly transform invariants that are not in the error codes map"},{"ancestorTitles":["error transform"],"failureMessages":[],"fullName":"error transform should handle escaped characters","location":{"column":3,"line":76},"status":"passed","title":"should handle escaped characters"},{"ancestorTitles":["error transform"],"failureMessages":[],"fullName":"error transform should support noMinify option","location":{"column":3,"line":85},"status":"passed","title":"should support noMinify option"}],"endTime":1639319117467,"message":"","name":"/home/runner/work/react-tests/react-tests/react/scripts/error-codes/__tests__/transform-error-messages.js","startTime":1639319117037,"status":"passed","summary":""}],"wasInterrupted":false}